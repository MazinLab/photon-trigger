// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="postage_filter_postage_filter,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.307625,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1150,HLS_SYN_LUT=1641,HLS_VERSION=2022_1}" *)

module postage_filter (
        ap_clk,
        ap_rst_n,
        postage_stream_TDATA,
        postage_stream_TVALID,
        postage_stream_TREADY,
        postage_stream_TKEEP,
        postage_stream_TSTRB,
        postage_stream_TUSER,
        postage_stream_TLAST,
        iq_out_0_TDATA,
        iq_out_0_TVALID,
        iq_out_0_TREADY,
        iq_out_0_TKEEP,
        iq_out_0_TSTRB,
        iq_out_0_TUSER,
        iq_out_0_TLAST,
        iq_out_1_TDATA,
        iq_out_1_TVALID,
        iq_out_1_TREADY,
        iq_out_1_TKEEP,
        iq_out_1_TSTRB,
        iq_out_1_TUSER,
        iq_out_1_TLAST,
        iq_out_2_TDATA,
        iq_out_2_TVALID,
        iq_out_2_TREADY,
        iq_out_2_TKEEP,
        iq_out_2_TSTRB,
        iq_out_2_TUSER,
        iq_out_2_TLAST,
        iq_out_3_TDATA,
        iq_out_3_TVALID,
        iq_out_3_TREADY,
        iq_out_3_TKEEP,
        iq_out_3_TSTRB,
        iq_out_3_TUSER,
        iq_out_3_TLAST,
        iq_out_4_TDATA,
        iq_out_4_TVALID,
        iq_out_4_TREADY,
        iq_out_4_TKEEP,
        iq_out_4_TSTRB,
        iq_out_4_TUSER,
        iq_out_4_TLAST,
        iq_out_5_TDATA,
        iq_out_5_TVALID,
        iq_out_5_TREADY,
        iq_out_5_TKEEP,
        iq_out_5_TSTRB,
        iq_out_5_TUSER,
        iq_out_5_TLAST,
        iq_out_6_TDATA,
        iq_out_6_TVALID,
        iq_out_6_TREADY,
        iq_out_6_TKEEP,
        iq_out_6_TSTRB,
        iq_out_6_TUSER,
        iq_out_6_TLAST,
        iq_out_7_TDATA,
        iq_out_7_TVALID,
        iq_out_7_TREADY,
        iq_out_7_TKEEP,
        iq_out_7_TSTRB,
        iq_out_7_TUSER,
        iq_out_7_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [191:0] postage_stream_TDATA;
input   postage_stream_TVALID;
output   postage_stream_TREADY;
input  [23:0] postage_stream_TKEEP;
input  [23:0] postage_stream_TSTRB;
input  [12:0] postage_stream_TUSER;
input  [0:0] postage_stream_TLAST;
output  [31:0] iq_out_0_TDATA;
output   iq_out_0_TVALID;
input   iq_out_0_TREADY;
output  [3:0] iq_out_0_TKEEP;
output  [3:0] iq_out_0_TSTRB;
output  [2:0] iq_out_0_TUSER;
output  [0:0] iq_out_0_TLAST;
output  [31:0] iq_out_1_TDATA;
output   iq_out_1_TVALID;
input   iq_out_1_TREADY;
output  [3:0] iq_out_1_TKEEP;
output  [3:0] iq_out_1_TSTRB;
output  [2:0] iq_out_1_TUSER;
output  [0:0] iq_out_1_TLAST;
output  [31:0] iq_out_2_TDATA;
output   iq_out_2_TVALID;
input   iq_out_2_TREADY;
output  [3:0] iq_out_2_TKEEP;
output  [3:0] iq_out_2_TSTRB;
output  [2:0] iq_out_2_TUSER;
output  [0:0] iq_out_2_TLAST;
output  [31:0] iq_out_3_TDATA;
output   iq_out_3_TVALID;
input   iq_out_3_TREADY;
output  [3:0] iq_out_3_TKEEP;
output  [3:0] iq_out_3_TSTRB;
output  [2:0] iq_out_3_TUSER;
output  [0:0] iq_out_3_TLAST;
output  [31:0] iq_out_4_TDATA;
output   iq_out_4_TVALID;
input   iq_out_4_TREADY;
output  [3:0] iq_out_4_TKEEP;
output  [3:0] iq_out_4_TSTRB;
output  [2:0] iq_out_4_TUSER;
output  [0:0] iq_out_4_TLAST;
output  [31:0] iq_out_5_TDATA;
output   iq_out_5_TVALID;
input   iq_out_5_TREADY;
output  [3:0] iq_out_5_TKEEP;
output  [3:0] iq_out_5_TSTRB;
output  [2:0] iq_out_5_TUSER;
output  [0:0] iq_out_5_TLAST;
output  [31:0] iq_out_6_TDATA;
output   iq_out_6_TVALID;
input   iq_out_6_TREADY;
output  [3:0] iq_out_6_TKEEP;
output  [3:0] iq_out_6_TSTRB;
output  [2:0] iq_out_6_TUSER;
output  [0:0] iq_out_6_TLAST;
output  [31:0] iq_out_7_TDATA;
output   iq_out_7_TVALID;
input   iq_out_7_TREADY;
output  [3:0] iq_out_7_TKEEP;
output  [3:0] iq_out_7_TSTRB;
output  [2:0] iq_out_7_TUSER;
output  [0:0] iq_out_7_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

reg iq_out_0_TVALID;
reg iq_out_1_TVALID;
reg iq_out_2_TVALID;
reg iq_out_3_TVALID;
reg iq_out_4_TVALID;
reg iq_out_5_TVALID;
reg iq_out_6_TVALID;
reg iq_out_7_TVALID;

 reg    ap_rst_n_inv;
wire   [11:0] monitor_0;
wire   [11:0] monitor_1;
wire   [11:0] monitor_2;
wire   [11:0] monitor_3;
wire   [11:0] monitor_4;
wire   [11:0] monitor_5;
wire   [11:0] monitor_6;
wire   [11:0] monitor_7;
reg   [7:0] postage_filter_stream_ap_uint_stream_axis_0_tocapture_7;
reg   [7:0] postage_filter_stream_ap_uint_stream_axis_0_tocapture_1;
reg   [7:0] postage_filter_stream_ap_uint_stream_axis_0_tocapture;
reg   [7:0] postage_filter_stream_ap_uint_stream_axis_0_tocapture_6;
reg   [7:0] postage_filter_stream_ap_uint_stream_axis_0_tocapture_5;
reg   [7:0] postage_filter_stream_ap_uint_stream_axis_0_tocapture_4;
reg   [7:0] postage_filter_stream_ap_uint_stream_axis_0_tocapture_3;
reg   [7:0] postage_filter_stream_ap_uint_stream_axis_0_tocapture_2;
reg    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_ce0;
reg    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_we0;
wire   [31:0] postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_q0;
reg    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_6_ce0;
reg    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_6_we0;
wire   [31:0] postage_filter_stream_ap_uint_stream_axis_0_iqprereg_6_q0;
reg    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_5_ce0;
reg    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_5_we0;
wire   [31:0] postage_filter_stream_ap_uint_stream_axis_0_iqprereg_5_q0;
reg    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_4_ce0;
reg    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_4_we0;
wire   [31:0] postage_filter_stream_ap_uint_stream_axis_0_iqprereg_4_q0;
reg    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_3_ce0;
reg    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_3_we0;
wire   [31:0] postage_filter_stream_ap_uint_stream_axis_0_iqprereg_3_q0;
reg    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_2_ce0;
reg    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_2_we0;
wire   [31:0] postage_filter_stream_ap_uint_stream_axis_0_iqprereg_2_q0;
reg    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_1_ce0;
reg    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_1_we0;
wire   [31:0] postage_filter_stream_ap_uint_stream_axis_0_iqprereg_1_q0;
reg    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_ce0;
reg    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_we0;
wire   [31:0] postage_filter_stream_ap_uint_stream_axis_0_iqprereg_q0;
reg    postage_stream_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    iq_out_0_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] empty_23_reg_516;
reg    iq_out_1_TDATA_blk_n;
reg   [0:0] empty_24_reg_531;
reg    iq_out_2_TDATA_blk_n;
reg   [0:0] empty_25_reg_546;
reg    iq_out_3_TDATA_blk_n;
reg   [0:0] empty_26_reg_561;
reg    iq_out_4_TDATA_blk_n;
reg   [0:0] empty_27_reg_576;
reg    iq_out_5_TDATA_blk_n;
reg   [0:0] empty_28_reg_591;
reg    iq_out_6_TDATA_blk_n;
reg   [0:0] empty_29_reg_606;
reg    iq_out_7_TDATA_blk_n;
reg   [0:0] empty_30_reg_621;
wire   [8:0] group_V_fu_644_p1;
reg   [8:0] group_V_reg_1426;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
reg   [3:0] trigger_V_reg_1438;
reg   [31:0] x_reg_1450;
reg   [31:0] x_reg_1450_pp0_iter1_reg;
reg   [31:0] x_1_reg_1462;
reg   [31:0] x_1_reg_1462_pp0_iter1_reg;
reg   [31:0] x_2_reg_1474;
reg   [31:0] x_2_reg_1474_pp0_iter1_reg;
reg   [31:0] x_3_reg_1486;
reg   [31:0] x_3_reg_1486_pp0_iter1_reg;
wire   [1:0] lane_V_fu_698_p1;
reg   [1:0] lane_V_reg_1498;
reg   [1:0] lane_V_reg_1498_pp0_iter1_reg;
reg   [8:0] gid_V_reg_1504;
wire   [1:0] lane_V_1_fu_712_p1;
reg   [1:0] lane_V_1_reg_1509;
reg   [1:0] lane_V_1_reg_1509_pp0_iter1_reg;
reg   [8:0] gid_V_1_reg_1515;
wire   [1:0] lane_V_2_fu_726_p1;
reg   [1:0] lane_V_2_reg_1520;
reg   [1:0] lane_V_2_reg_1520_pp0_iter1_reg;
reg   [8:0] gid_V_2_reg_1526;
wire   [1:0] lane_V_3_fu_740_p1;
reg   [1:0] lane_V_3_reg_1531;
reg   [1:0] lane_V_3_reg_1531_pp0_iter1_reg;
reg   [8:0] gid_V_3_reg_1537;
wire   [1:0] lane_V_4_fu_754_p1;
reg   [1:0] lane_V_4_reg_1542;
reg   [1:0] lane_V_4_reg_1542_pp0_iter1_reg;
reg   [8:0] gid_V_4_reg_1548;
wire   [1:0] lane_V_5_fu_768_p1;
reg   [1:0] lane_V_5_reg_1553;
reg   [1:0] lane_V_5_reg_1553_pp0_iter1_reg;
reg   [8:0] gid_V_5_reg_1559;
wire   [1:0] lane_V_6_fu_782_p1;
reg   [1:0] lane_V_6_reg_1564;
reg   [1:0] lane_V_6_reg_1564_pp0_iter1_reg;
reg   [8:0] gid_V_6_reg_1570;
wire   [1:0] lane_V_7_fu_796_p1;
reg   [1:0] lane_V_7_reg_1575;
reg   [1:0] lane_V_7_reg_1575_pp0_iter1_reg;
reg   [8:0] gid_V_7_reg_1581;
wire   [0:0] icmp_ln1065_fu_810_p2;
reg   [0:0] icmp_ln1065_reg_1586;
wire   [0:0] tmp_last_V_fu_824_p2;
reg   [0:0] tmp_last_V_reg_1591;
wire   [0:0] icmp_ln1065_1_fu_868_p2;
reg   [0:0] icmp_ln1065_1_reg_1602;
wire   [0:0] tmp_last_V_1_fu_882_p2;
reg   [0:0] tmp_last_V_1_reg_1607;
wire   [0:0] icmp_ln1065_2_fu_926_p2;
reg   [0:0] icmp_ln1065_2_reg_1618;
wire   [0:0] tmp_last_V_2_fu_940_p2;
reg   [0:0] tmp_last_V_2_reg_1623;
wire   [0:0] icmp_ln1065_3_fu_984_p2;
reg   [0:0] icmp_ln1065_3_reg_1634;
wire   [0:0] tmp_last_V_3_fu_998_p2;
reg   [0:0] tmp_last_V_3_reg_1639;
wire   [0:0] icmp_ln1065_4_fu_1042_p2;
reg   [0:0] icmp_ln1065_4_reg_1650;
wire   [0:0] tmp_last_V_4_fu_1056_p2;
reg   [0:0] tmp_last_V_4_reg_1655;
wire   [0:0] icmp_ln1065_5_fu_1100_p2;
reg   [0:0] icmp_ln1065_5_reg_1666;
wire   [0:0] tmp_last_V_5_fu_1114_p2;
reg   [0:0] tmp_last_V_5_reg_1671;
wire   [0:0] icmp_ln1065_6_fu_1158_p2;
reg   [0:0] icmp_ln1065_6_reg_1682;
wire   [0:0] tmp_last_V_6_fu_1172_p2;
reg   [0:0] tmp_last_V_6_reg_1687;
wire   [0:0] icmp_ln1065_7_fu_1216_p2;
reg   [0:0] icmp_ln1065_7_reg_1698;
wire   [0:0] tmp_last_V_7_fu_1230_p2;
reg   [0:0] tmp_last_V_7_reg_1703;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] ap_phi_reg_pp0_iter1_empty_23_reg_516;
wire   [0:0] icmp_ln100_fu_830_p2;
wire   [0:0] ap_phi_reg_pp0_iter1_empty_24_reg_531;
wire   [0:0] icmp_ln100_1_fu_888_p2;
wire   [0:0] ap_phi_reg_pp0_iter1_empty_25_reg_546;
wire   [0:0] icmp_ln100_2_fu_946_p2;
wire   [0:0] ap_phi_reg_pp0_iter1_empty_26_reg_561;
wire   [0:0] icmp_ln100_3_fu_1004_p2;
wire   [0:0] ap_phi_reg_pp0_iter1_empty_27_reg_576;
wire   [0:0] icmp_ln100_4_fu_1062_p2;
wire   [0:0] ap_phi_reg_pp0_iter1_empty_28_reg_591;
wire   [0:0] icmp_ln100_5_fu_1120_p2;
wire   [0:0] ap_phi_reg_pp0_iter1_empty_29_reg_606;
wire   [0:0] icmp_ln100_6_fu_1178_p2;
wire   [0:0] ap_phi_reg_pp0_iter1_empty_30_reg_621;
wire   [0:0] icmp_ln100_7_fu_1236_p2;
wire   [7:0] nexttocap_fu_818_p2;
wire   [0:0] p_Result_s_fu_856_p2;
wire   [7:0] nexttocap_1_fu_876_p2;
wire   [0:0] p_Result_1_fu_914_p2;
wire   [7:0] nexttocap_2_fu_934_p2;
wire   [0:0] p_Result_2_fu_972_p2;
wire   [7:0] nexttocap_3_fu_992_p2;
wire   [0:0] p_Result_3_fu_1030_p2;
wire   [7:0] nexttocap_4_fu_1050_p2;
wire   [0:0] p_Result_4_fu_1088_p2;
wire   [7:0] nexttocap_5_fu_1108_p2;
wire   [0:0] p_Result_5_fu_1146_p2;
wire   [7:0] nexttocap_6_fu_1166_p2;
wire   [0:0] p_Result_6_fu_1204_p2;
wire   [7:0] nexttocap_7_fu_1224_p2;
wire   [0:0] p_Result_7_fu_1262_p2;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] DataIn_assign_fu_1274_p6;
wire   [31:0] DataIn_assign_1_fu_1293_p6;
wire   [31:0] DataIn_assign_2_fu_1312_p6;
wire   [31:0] DataIn_assign_3_fu_1331_p6;
wire   [31:0] DataIn_assign_4_fu_1350_p6;
wire   [31:0] DataIn_assign_5_fu_1369_p6;
wire   [31:0] DataIn_assign_6_fu_1388_p6;
wire   [31:0] DataIn_assign_7_fu_1407_p6;
wire   [3:0] zext_ln825_fu_842_p1;
wire   [3:0] shl_ln825_fu_845_p2;
wire   [3:0] and_ln825_fu_851_p2;
wire   [3:0] zext_ln825_1_fu_900_p1;
wire   [3:0] shl_ln825_1_fu_903_p2;
wire   [3:0] and_ln825_1_fu_909_p2;
wire   [3:0] zext_ln825_2_fu_958_p1;
wire   [3:0] shl_ln825_2_fu_961_p2;
wire   [3:0] and_ln825_2_fu_967_p2;
wire   [3:0] zext_ln825_3_fu_1016_p1;
wire   [3:0] shl_ln825_3_fu_1019_p2;
wire   [3:0] and_ln825_3_fu_1025_p2;
wire   [3:0] zext_ln825_4_fu_1074_p1;
wire   [3:0] shl_ln825_4_fu_1077_p2;
wire   [3:0] and_ln825_4_fu_1083_p2;
wire   [3:0] zext_ln825_5_fu_1132_p1;
wire   [3:0] shl_ln825_5_fu_1135_p2;
wire   [3:0] and_ln825_5_fu_1141_p2;
wire   [3:0] zext_ln825_6_fu_1190_p1;
wire   [3:0] shl_ln825_6_fu_1193_p2;
wire   [3:0] and_ln825_6_fu_1199_p2;
wire   [3:0] zext_ln825_7_fu_1248_p1;
wire   [3:0] shl_ln825_7_fu_1251_p2;
wire   [3:0] and_ln825_7_fu_1257_p2;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_postage_stream_V_data_V_U_apdone_blk;
wire   [191:0] postage_stream_TDATA_int_regslice;
wire    postage_stream_TVALID_int_regslice;
reg    postage_stream_TREADY_int_regslice;
wire    regslice_both_postage_stream_V_data_V_U_ack_in;
wire    regslice_both_postage_stream_V_keep_V_U_apdone_blk;
wire   [23:0] postage_stream_TKEEP_int_regslice;
wire    regslice_both_postage_stream_V_keep_V_U_vld_out;
wire    regslice_both_postage_stream_V_keep_V_U_ack_in;
wire    regslice_both_postage_stream_V_strb_V_U_apdone_blk;
wire   [23:0] postage_stream_TSTRB_int_regslice;
wire    regslice_both_postage_stream_V_strb_V_U_vld_out;
wire    regslice_both_postage_stream_V_strb_V_U_ack_in;
wire    regslice_both_postage_stream_V_user_V_U_apdone_blk;
wire   [12:0] postage_stream_TUSER_int_regslice;
wire    regslice_both_postage_stream_V_user_V_U_vld_out;
wire    regslice_both_postage_stream_V_user_V_U_ack_in;
wire    regslice_both_postage_stream_V_last_V_U_apdone_blk;
wire   [0:0] postage_stream_TLAST_int_regslice;
wire    regslice_both_postage_stream_V_last_V_U_vld_out;
wire    regslice_both_postage_stream_V_last_V_U_ack_in;
reg    ap_condition_959;
reg    ap_condition_950;
reg    ap_condition_1004;
reg    ap_condition_995;
reg    ap_condition_986;
reg    ap_condition_977;
reg    ap_condition_968;
reg    ap_condition_941;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 postage_filter_stream_ap_uint_stream_axis_0_tocapture_7 = 8'd0;
#0 postage_filter_stream_ap_uint_stream_axis_0_tocapture_1 = 8'd0;
#0 postage_filter_stream_ap_uint_stream_axis_0_tocapture = 8'd0;
#0 postage_filter_stream_ap_uint_stream_axis_0_tocapture_6 = 8'd0;
#0 postage_filter_stream_ap_uint_stream_axis_0_tocapture_5 = 8'd0;
#0 postage_filter_stream_ap_uint_stream_axis_0_tocapture_4 = 8'd0;
#0 postage_filter_stream_ap_uint_stream_axis_0_tocapture_3 = 8'd0;
#0 postage_filter_stream_ap_uint_stream_axis_0_tocapture_2 = 8'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

postage_filter_postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_SHIFTREG_AUTO_0R0W #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(4'd8),
    .ce0(postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_ce0),
    .we0(postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_we0),
    .d0(DataIn_assign_fu_1274_p6),
    .q0(postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_q0)
);

postage_filter_postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_SHIFTREG_AUTO_0R0W #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
postage_filter_stream_ap_uint_stream_axis_0_iqprereg_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(4'd8),
    .ce0(postage_filter_stream_ap_uint_stream_axis_0_iqprereg_6_ce0),
    .we0(postage_filter_stream_ap_uint_stream_axis_0_iqprereg_6_we0),
    .d0(DataIn_assign_1_fu_1293_p6),
    .q0(postage_filter_stream_ap_uint_stream_axis_0_iqprereg_6_q0)
);

postage_filter_postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_SHIFTREG_AUTO_0R0W #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
postage_filter_stream_ap_uint_stream_axis_0_iqprereg_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(4'd8),
    .ce0(postage_filter_stream_ap_uint_stream_axis_0_iqprereg_5_ce0),
    .we0(postage_filter_stream_ap_uint_stream_axis_0_iqprereg_5_we0),
    .d0(DataIn_assign_2_fu_1312_p6),
    .q0(postage_filter_stream_ap_uint_stream_axis_0_iqprereg_5_q0)
);

postage_filter_postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_SHIFTREG_AUTO_0R0W #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
postage_filter_stream_ap_uint_stream_axis_0_iqprereg_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(4'd8),
    .ce0(postage_filter_stream_ap_uint_stream_axis_0_iqprereg_4_ce0),
    .we0(postage_filter_stream_ap_uint_stream_axis_0_iqprereg_4_we0),
    .d0(DataIn_assign_3_fu_1331_p6),
    .q0(postage_filter_stream_ap_uint_stream_axis_0_iqprereg_4_q0)
);

postage_filter_postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_SHIFTREG_AUTO_0R0W #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
postage_filter_stream_ap_uint_stream_axis_0_iqprereg_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(4'd8),
    .ce0(postage_filter_stream_ap_uint_stream_axis_0_iqprereg_3_ce0),
    .we0(postage_filter_stream_ap_uint_stream_axis_0_iqprereg_3_we0),
    .d0(DataIn_assign_4_fu_1350_p6),
    .q0(postage_filter_stream_ap_uint_stream_axis_0_iqprereg_3_q0)
);

postage_filter_postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_SHIFTREG_AUTO_0R0W #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
postage_filter_stream_ap_uint_stream_axis_0_iqprereg_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(4'd8),
    .ce0(postage_filter_stream_ap_uint_stream_axis_0_iqprereg_2_ce0),
    .we0(postage_filter_stream_ap_uint_stream_axis_0_iqprereg_2_we0),
    .d0(DataIn_assign_5_fu_1369_p6),
    .q0(postage_filter_stream_ap_uint_stream_axis_0_iqprereg_2_q0)
);

postage_filter_postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_SHIFTREG_AUTO_0R0W #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
postage_filter_stream_ap_uint_stream_axis_0_iqprereg_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(4'd8),
    .ce0(postage_filter_stream_ap_uint_stream_axis_0_iqprereg_1_ce0),
    .we0(postage_filter_stream_ap_uint_stream_axis_0_iqprereg_1_we0),
    .d0(DataIn_assign_6_fu_1388_p6),
    .q0(postage_filter_stream_ap_uint_stream_axis_0_iqprereg_1_q0)
);

postage_filter_postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_SHIFTREG_AUTO_0R0W #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
postage_filter_stream_ap_uint_stream_axis_0_iqprereg_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(4'd8),
    .ce0(postage_filter_stream_ap_uint_stream_axis_0_iqprereg_ce0),
    .we0(postage_filter_stream_ap_uint_stream_axis_0_iqprereg_we0),
    .d0(DataIn_assign_7_fu_1407_p6),
    .q0(postage_filter_stream_ap_uint_stream_axis_0_iqprereg_q0)
);

postage_filter_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .monitor_0(monitor_0),
    .monitor_1(monitor_1),
    .monitor_2(monitor_2),
    .monitor_3(monitor_3),
    .monitor_4(monitor_4),
    .monitor_5(monitor_5),
    .monitor_6(monitor_6),
    .monitor_7(monitor_7)
);

postage_filter_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U1(
    .din0(x_reg_1450_pp0_iter1_reg),
    .din1(x_1_reg_1462_pp0_iter1_reg),
    .din2(x_2_reg_1474_pp0_iter1_reg),
    .din3(x_3_reg_1486_pp0_iter1_reg),
    .din4(lane_V_reg_1498_pp0_iter1_reg),
    .dout(DataIn_assign_fu_1274_p6)
);

postage_filter_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U2(
    .din0(x_reg_1450_pp0_iter1_reg),
    .din1(x_1_reg_1462_pp0_iter1_reg),
    .din2(x_2_reg_1474_pp0_iter1_reg),
    .din3(x_3_reg_1486_pp0_iter1_reg),
    .din4(lane_V_1_reg_1509_pp0_iter1_reg),
    .dout(DataIn_assign_1_fu_1293_p6)
);

postage_filter_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U3(
    .din0(x_reg_1450_pp0_iter1_reg),
    .din1(x_1_reg_1462_pp0_iter1_reg),
    .din2(x_2_reg_1474_pp0_iter1_reg),
    .din3(x_3_reg_1486_pp0_iter1_reg),
    .din4(lane_V_2_reg_1520_pp0_iter1_reg),
    .dout(DataIn_assign_2_fu_1312_p6)
);

postage_filter_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U4(
    .din0(x_reg_1450_pp0_iter1_reg),
    .din1(x_1_reg_1462_pp0_iter1_reg),
    .din2(x_2_reg_1474_pp0_iter1_reg),
    .din3(x_3_reg_1486_pp0_iter1_reg),
    .din4(lane_V_3_reg_1531_pp0_iter1_reg),
    .dout(DataIn_assign_3_fu_1331_p6)
);

postage_filter_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U5(
    .din0(x_reg_1450_pp0_iter1_reg),
    .din1(x_1_reg_1462_pp0_iter1_reg),
    .din2(x_2_reg_1474_pp0_iter1_reg),
    .din3(x_3_reg_1486_pp0_iter1_reg),
    .din4(lane_V_4_reg_1542_pp0_iter1_reg),
    .dout(DataIn_assign_4_fu_1350_p6)
);

postage_filter_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U6(
    .din0(x_reg_1450_pp0_iter1_reg),
    .din1(x_1_reg_1462_pp0_iter1_reg),
    .din2(x_2_reg_1474_pp0_iter1_reg),
    .din3(x_3_reg_1486_pp0_iter1_reg),
    .din4(lane_V_5_reg_1553_pp0_iter1_reg),
    .dout(DataIn_assign_5_fu_1369_p6)
);

postage_filter_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U7(
    .din0(x_reg_1450_pp0_iter1_reg),
    .din1(x_1_reg_1462_pp0_iter1_reg),
    .din2(x_2_reg_1474_pp0_iter1_reg),
    .din3(x_3_reg_1486_pp0_iter1_reg),
    .din4(lane_V_6_reg_1564_pp0_iter1_reg),
    .dout(DataIn_assign_6_fu_1388_p6)
);

postage_filter_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U8(
    .din0(x_reg_1450_pp0_iter1_reg),
    .din1(x_1_reg_1462_pp0_iter1_reg),
    .din2(x_2_reg_1474_pp0_iter1_reg),
    .din3(x_3_reg_1486_pp0_iter1_reg),
    .din4(lane_V_7_reg_1575_pp0_iter1_reg),
    .dout(DataIn_assign_7_fu_1407_p6)
);

postage_filter_regslice_both #(
    .DataWidth( 192 ))
regslice_both_postage_stream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(postage_stream_TDATA),
    .vld_in(postage_stream_TVALID),
    .ack_in(regslice_both_postage_stream_V_data_V_U_ack_in),
    .data_out(postage_stream_TDATA_int_regslice),
    .vld_out(postage_stream_TVALID_int_regslice),
    .ack_out(postage_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_postage_stream_V_data_V_U_apdone_blk)
);

postage_filter_regslice_both #(
    .DataWidth( 24 ))
regslice_both_postage_stream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(postage_stream_TKEEP),
    .vld_in(postage_stream_TVALID),
    .ack_in(regslice_both_postage_stream_V_keep_V_U_ack_in),
    .data_out(postage_stream_TKEEP_int_regslice),
    .vld_out(regslice_both_postage_stream_V_keep_V_U_vld_out),
    .ack_out(postage_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_postage_stream_V_keep_V_U_apdone_blk)
);

postage_filter_regslice_both #(
    .DataWidth( 24 ))
regslice_both_postage_stream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(postage_stream_TSTRB),
    .vld_in(postage_stream_TVALID),
    .ack_in(regslice_both_postage_stream_V_strb_V_U_ack_in),
    .data_out(postage_stream_TSTRB_int_regslice),
    .vld_out(regslice_both_postage_stream_V_strb_V_U_vld_out),
    .ack_out(postage_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_postage_stream_V_strb_V_U_apdone_blk)
);

postage_filter_regslice_both #(
    .DataWidth( 13 ))
regslice_both_postage_stream_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(postage_stream_TUSER),
    .vld_in(postage_stream_TVALID),
    .ack_in(regslice_both_postage_stream_V_user_V_U_ack_in),
    .data_out(postage_stream_TUSER_int_regslice),
    .vld_out(regslice_both_postage_stream_V_user_V_U_vld_out),
    .ack_out(postage_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_postage_stream_V_user_V_U_apdone_blk)
);

postage_filter_regslice_both #(
    .DataWidth( 1 ))
regslice_both_postage_stream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(postage_stream_TLAST),
    .vld_in(postage_stream_TVALID),
    .ack_in(regslice_both_postage_stream_V_last_V_U_ack_in),
    .data_out(postage_stream_TLAST_int_regslice),
    .vld_out(regslice_both_postage_stream_V_last_V_U_vld_out),
    .ack_out(postage_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_postage_stream_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_fu_830_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_fu_810_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_23_reg_516 <= 1'd1;
    end else if ((((icmp_ln100_fu_830_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_fu_810_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_fu_810_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        empty_23_reg_516 <= 1'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_23_reg_516 <= ap_phi_reg_pp0_iter1_empty_23_reg_516;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln100_1_fu_888_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_1_fu_868_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_1_fu_868_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        empty_24_reg_531 <= 1'd0;
    end else if (((icmp_ln100_1_fu_888_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_1_fu_868_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_24_reg_531 <= 1'd1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_24_reg_531 <= ap_phi_reg_pp0_iter1_empty_24_reg_531;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln100_2_fu_946_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_2_fu_926_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_2_fu_926_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        empty_25_reg_546 <= 1'd0;
    end else if (((icmp_ln100_2_fu_946_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_2_fu_926_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_25_reg_546 <= 1'd1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_25_reg_546 <= ap_phi_reg_pp0_iter1_empty_25_reg_546;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln100_3_fu_1004_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_3_fu_984_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_3_fu_984_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        empty_26_reg_561 <= 1'd0;
    end else if (((icmp_ln100_3_fu_1004_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_3_fu_984_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_26_reg_561 <= 1'd1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_26_reg_561 <= ap_phi_reg_pp0_iter1_empty_26_reg_561;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln100_4_fu_1062_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_4_fu_1042_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_4_fu_1042_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        empty_27_reg_576 <= 1'd0;
    end else if (((icmp_ln100_4_fu_1062_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_4_fu_1042_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_27_reg_576 <= 1'd1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_27_reg_576 <= ap_phi_reg_pp0_iter1_empty_27_reg_576;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln100_5_fu_1120_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_5_fu_1100_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_5_fu_1100_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        empty_28_reg_591 <= 1'd0;
    end else if (((icmp_ln100_5_fu_1120_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_5_fu_1100_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_28_reg_591 <= 1'd1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_28_reg_591 <= ap_phi_reg_pp0_iter1_empty_28_reg_591;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln100_6_fu_1178_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_6_fu_1158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_6_fu_1158_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        empty_29_reg_606 <= 1'd0;
    end else if (((icmp_ln100_6_fu_1178_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_6_fu_1158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_29_reg_606 <= 1'd1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_29_reg_606 <= ap_phi_reg_pp0_iter1_empty_29_reg_606;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln100_7_fu_1236_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_7_fu_1216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_7_fu_1216_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        empty_30_reg_621 <= 1'd0;
    end else if (((icmp_ln100_7_fu_1236_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_7_fu_1216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_30_reg_621 <= 1'd1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_30_reg_621 <= ap_phi_reg_pp0_iter1_empty_30_reg_621;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_959)) begin
        if (((p_Result_2_fu_972_p2 == 1'd0) & (icmp_ln100_2_fu_946_p2 == 1'd1))) begin
            postage_filter_stream_ap_uint_stream_axis_0_tocapture <= 8'd127;
        end else if ((icmp_ln100_2_fu_946_p2 == 1'd0)) begin
            postage_filter_stream_ap_uint_stream_axis_0_tocapture <= nexttocap_2_fu_934_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_950)) begin
        if (((p_Result_1_fu_914_p2 == 1'd0) & (icmp_ln100_1_fu_888_p2 == 1'd1))) begin
            postage_filter_stream_ap_uint_stream_axis_0_tocapture_1 <= 8'd127;
        end else if ((icmp_ln100_1_fu_888_p2 == 1'd0)) begin
            postage_filter_stream_ap_uint_stream_axis_0_tocapture_1 <= nexttocap_1_fu_876_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1004)) begin
        if (((p_Result_7_fu_1262_p2 == 1'd0) & (icmp_ln100_7_fu_1236_p2 == 1'd1))) begin
            postage_filter_stream_ap_uint_stream_axis_0_tocapture_2 <= 8'd127;
        end else if ((icmp_ln100_7_fu_1236_p2 == 1'd0)) begin
            postage_filter_stream_ap_uint_stream_axis_0_tocapture_2 <= nexttocap_7_fu_1224_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_995)) begin
        if (((p_Result_6_fu_1204_p2 == 1'd0) & (icmp_ln100_6_fu_1178_p2 == 1'd1))) begin
            postage_filter_stream_ap_uint_stream_axis_0_tocapture_3 <= 8'd127;
        end else if ((icmp_ln100_6_fu_1178_p2 == 1'd0)) begin
            postage_filter_stream_ap_uint_stream_axis_0_tocapture_3 <= nexttocap_6_fu_1166_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_986)) begin
        if (((p_Result_5_fu_1146_p2 == 1'd0) & (icmp_ln100_5_fu_1120_p2 == 1'd1))) begin
            postage_filter_stream_ap_uint_stream_axis_0_tocapture_4 <= 8'd127;
        end else if ((icmp_ln100_5_fu_1120_p2 == 1'd0)) begin
            postage_filter_stream_ap_uint_stream_axis_0_tocapture_4 <= nexttocap_5_fu_1108_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_977)) begin
        if (((p_Result_4_fu_1088_p2 == 1'd0) & (icmp_ln100_4_fu_1062_p2 == 1'd1))) begin
            postage_filter_stream_ap_uint_stream_axis_0_tocapture_5 <= 8'd127;
        end else if ((icmp_ln100_4_fu_1062_p2 == 1'd0)) begin
            postage_filter_stream_ap_uint_stream_axis_0_tocapture_5 <= nexttocap_4_fu_1050_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_968)) begin
        if (((p_Result_3_fu_1030_p2 == 1'd0) & (icmp_ln100_3_fu_1004_p2 == 1'd1))) begin
            postage_filter_stream_ap_uint_stream_axis_0_tocapture_6 <= 8'd127;
        end else if ((icmp_ln100_3_fu_1004_p2 == 1'd0)) begin
            postage_filter_stream_ap_uint_stream_axis_0_tocapture_6 <= nexttocap_3_fu_992_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_941)) begin
        if (((p_Result_s_fu_856_p2 == 1'd0) & (icmp_ln100_fu_830_p2 == 1'd1))) begin
            postage_filter_stream_ap_uint_stream_axis_0_tocapture_7 <= 8'd127;
        end else if ((icmp_ln100_fu_830_p2 == 1'd0)) begin
            postage_filter_stream_ap_uint_stream_axis_0_tocapture_7 <= nexttocap_fu_818_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gid_V_1_reg_1515 <= {{monitor_1[10:2]}};
        gid_V_2_reg_1526 <= {{monitor_2[10:2]}};
        gid_V_3_reg_1537 <= {{monitor_3[10:2]}};
        gid_V_4_reg_1548 <= {{monitor_4[10:2]}};
        gid_V_5_reg_1559 <= {{monitor_5[10:2]}};
        gid_V_6_reg_1570 <= {{monitor_6[10:2]}};
        gid_V_7_reg_1581 <= {{monitor_7[10:2]}};
        gid_V_reg_1504 <= {{monitor_0[10:2]}};
        group_V_reg_1426 <= group_V_fu_644_p1;
        icmp_ln1065_1_reg_1602 <= icmp_ln1065_1_fu_868_p2;
        icmp_ln1065_2_reg_1618 <= icmp_ln1065_2_fu_926_p2;
        icmp_ln1065_3_reg_1634 <= icmp_ln1065_3_fu_984_p2;
        icmp_ln1065_4_reg_1650 <= icmp_ln1065_4_fu_1042_p2;
        icmp_ln1065_5_reg_1666 <= icmp_ln1065_5_fu_1100_p2;
        icmp_ln1065_6_reg_1682 <= icmp_ln1065_6_fu_1158_p2;
        icmp_ln1065_7_reg_1698 <= icmp_ln1065_7_fu_1216_p2;
        icmp_ln1065_reg_1586 <= icmp_ln1065_fu_810_p2;
        lane_V_1_reg_1509 <= lane_V_1_fu_712_p1;
        lane_V_1_reg_1509_pp0_iter1_reg <= lane_V_1_reg_1509;
        lane_V_2_reg_1520 <= lane_V_2_fu_726_p1;
        lane_V_2_reg_1520_pp0_iter1_reg <= lane_V_2_reg_1520;
        lane_V_3_reg_1531 <= lane_V_3_fu_740_p1;
        lane_V_3_reg_1531_pp0_iter1_reg <= lane_V_3_reg_1531;
        lane_V_4_reg_1542 <= lane_V_4_fu_754_p1;
        lane_V_4_reg_1542_pp0_iter1_reg <= lane_V_4_reg_1542;
        lane_V_5_reg_1553 <= lane_V_5_fu_768_p1;
        lane_V_5_reg_1553_pp0_iter1_reg <= lane_V_5_reg_1553;
        lane_V_6_reg_1564 <= lane_V_6_fu_782_p1;
        lane_V_6_reg_1564_pp0_iter1_reg <= lane_V_6_reg_1564;
        lane_V_7_reg_1575 <= lane_V_7_fu_796_p1;
        lane_V_7_reg_1575_pp0_iter1_reg <= lane_V_7_reg_1575;
        lane_V_reg_1498 <= lane_V_fu_698_p1;
        lane_V_reg_1498_pp0_iter1_reg <= lane_V_reg_1498;
        tmp_last_V_1_reg_1607 <= tmp_last_V_1_fu_882_p2;
        tmp_last_V_2_reg_1623 <= tmp_last_V_2_fu_940_p2;
        tmp_last_V_3_reg_1639 <= tmp_last_V_3_fu_998_p2;
        tmp_last_V_4_reg_1655 <= tmp_last_V_4_fu_1056_p2;
        tmp_last_V_5_reg_1671 <= tmp_last_V_5_fu_1114_p2;
        tmp_last_V_6_reg_1687 <= tmp_last_V_6_fu_1172_p2;
        tmp_last_V_7_reg_1703 <= tmp_last_V_7_fu_1230_p2;
        tmp_last_V_reg_1591 <= tmp_last_V_fu_824_p2;
        trigger_V_reg_1438 <= {{postage_stream_TUSER_int_regslice[12:9]}};
        x_1_reg_1462 <= {{postage_stream_TDATA_int_regslice[127:96]}};
        x_1_reg_1462_pp0_iter1_reg <= x_1_reg_1462;
        x_2_reg_1474 <= {{postage_stream_TDATA_int_regslice[159:128]}};
        x_2_reg_1474_pp0_iter1_reg <= x_2_reg_1474;
        x_3_reg_1486 <= {{postage_stream_TDATA_int_regslice[191:160]}};
        x_3_reg_1486_pp0_iter1_reg <= x_3_reg_1486;
        x_reg_1450 <= {{postage_stream_TDATA_int_regslice[95:64]}};
        x_reg_1450_pp0_iter1_reg <= x_reg_1450;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((empty_23_reg_516 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        iq_out_0_TDATA_blk_n = iq_out_0_TREADY;
    end else begin
        iq_out_0_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((empty_23_reg_516 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iq_out_0_TVALID = 1'b1;
    end else begin
        iq_out_0_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((empty_24_reg_531 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        iq_out_1_TDATA_blk_n = iq_out_1_TREADY;
    end else begin
        iq_out_1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((empty_24_reg_531 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iq_out_1_TVALID = 1'b1;
    end else begin
        iq_out_1_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((empty_25_reg_546 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        iq_out_2_TDATA_blk_n = iq_out_2_TREADY;
    end else begin
        iq_out_2_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((empty_25_reg_546 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iq_out_2_TVALID = 1'b1;
    end else begin
        iq_out_2_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((empty_26_reg_561 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        iq_out_3_TDATA_blk_n = iq_out_3_TREADY;
    end else begin
        iq_out_3_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((empty_26_reg_561 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iq_out_3_TVALID = 1'b1;
    end else begin
        iq_out_3_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((empty_27_reg_576 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        iq_out_4_TDATA_blk_n = iq_out_4_TREADY;
    end else begin
        iq_out_4_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((empty_27_reg_576 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iq_out_4_TVALID = 1'b1;
    end else begin
        iq_out_4_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((empty_28_reg_591 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        iq_out_5_TDATA_blk_n = iq_out_5_TREADY;
    end else begin
        iq_out_5_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((empty_28_reg_591 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iq_out_5_TVALID = 1'b1;
    end else begin
        iq_out_5_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((empty_29_reg_606 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        iq_out_6_TDATA_blk_n = iq_out_6_TREADY;
    end else begin
        iq_out_6_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((empty_29_reg_606 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iq_out_6_TVALID = 1'b1;
    end else begin
        iq_out_6_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((empty_30_reg_621 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        iq_out_7_TDATA_blk_n = iq_out_7_TREADY;
    end else begin
        iq_out_7_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((empty_30_reg_621 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iq_out_7_TVALID = 1'b1;
    end else begin
        iq_out_7_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_stream_ap_uint_stream_axis_0_iqprereg_1_ce0 = icmp_ln1065_6_reg_1682;
    end else begin
        postage_filter_stream_ap_uint_stream_axis_0_iqprereg_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_stream_ap_uint_stream_axis_0_iqprereg_1_we0 = icmp_ln1065_6_reg_1682;
    end else begin
        postage_filter_stream_ap_uint_stream_axis_0_iqprereg_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_stream_ap_uint_stream_axis_0_iqprereg_2_ce0 = icmp_ln1065_5_reg_1666;
    end else begin
        postage_filter_stream_ap_uint_stream_axis_0_iqprereg_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_stream_ap_uint_stream_axis_0_iqprereg_2_we0 = icmp_ln1065_5_reg_1666;
    end else begin
        postage_filter_stream_ap_uint_stream_axis_0_iqprereg_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_stream_ap_uint_stream_axis_0_iqprereg_3_ce0 = icmp_ln1065_4_reg_1650;
    end else begin
        postage_filter_stream_ap_uint_stream_axis_0_iqprereg_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_stream_ap_uint_stream_axis_0_iqprereg_3_we0 = icmp_ln1065_4_reg_1650;
    end else begin
        postage_filter_stream_ap_uint_stream_axis_0_iqprereg_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_stream_ap_uint_stream_axis_0_iqprereg_4_ce0 = icmp_ln1065_3_reg_1634;
    end else begin
        postage_filter_stream_ap_uint_stream_axis_0_iqprereg_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_stream_ap_uint_stream_axis_0_iqprereg_4_we0 = icmp_ln1065_3_reg_1634;
    end else begin
        postage_filter_stream_ap_uint_stream_axis_0_iqprereg_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_stream_ap_uint_stream_axis_0_iqprereg_5_ce0 = icmp_ln1065_2_reg_1618;
    end else begin
        postage_filter_stream_ap_uint_stream_axis_0_iqprereg_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_stream_ap_uint_stream_axis_0_iqprereg_5_we0 = icmp_ln1065_2_reg_1618;
    end else begin
        postage_filter_stream_ap_uint_stream_axis_0_iqprereg_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_stream_ap_uint_stream_axis_0_iqprereg_6_ce0 = icmp_ln1065_1_reg_1602;
    end else begin
        postage_filter_stream_ap_uint_stream_axis_0_iqprereg_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_stream_ap_uint_stream_axis_0_iqprereg_6_we0 = icmp_ln1065_1_reg_1602;
    end else begin
        postage_filter_stream_ap_uint_stream_axis_0_iqprereg_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_ce0 = icmp_ln1065_reg_1586;
    end else begin
        postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_we0 = icmp_ln1065_reg_1586;
    end else begin
        postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_stream_ap_uint_stream_axis_0_iqprereg_ce0 = icmp_ln1065_7_reg_1698;
    end else begin
        postage_filter_stream_ap_uint_stream_axis_0_iqprereg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_stream_ap_uint_stream_axis_0_iqprereg_we0 = icmp_ln1065_7_reg_1698;
    end else begin
        postage_filter_stream_ap_uint_stream_axis_0_iqprereg_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1))) begin
        postage_stream_TDATA_blk_n = postage_stream_TVALID_int_regslice;
    end else begin
        postage_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1))) begin
        postage_stream_TREADY_int_regslice = 1'b1;
    end else begin
        postage_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln825_1_fu_909_p2 = (trigger_V_reg_1438 & shl_ln825_1_fu_903_p2);

assign and_ln825_2_fu_967_p2 = (trigger_V_reg_1438 & shl_ln825_2_fu_961_p2);

assign and_ln825_3_fu_1025_p2 = (trigger_V_reg_1438 & shl_ln825_3_fu_1019_p2);

assign and_ln825_4_fu_1083_p2 = (trigger_V_reg_1438 & shl_ln825_4_fu_1077_p2);

assign and_ln825_5_fu_1141_p2 = (trigger_V_reg_1438 & shl_ln825_5_fu_1135_p2);

assign and_ln825_6_fu_1199_p2 = (trigger_V_reg_1438 & shl_ln825_6_fu_1193_p2);

assign and_ln825_7_fu_1257_p2 = (trigger_V_reg_1438 & shl_ln825_7_fu_1251_p2);

assign and_ln825_fu_851_p2 = (trigger_V_reg_1438 & shl_ln825_fu_845_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((iq_out_7_TREADY == 1'b0) & (empty_30_reg_621 == 1'd1)) | ((iq_out_6_TREADY == 1'b0) & (empty_29_reg_606 == 1'd1)) | ((iq_out_5_TREADY == 1'b0) & (empty_28_reg_591 == 1'd1)) | ((iq_out_4_TREADY == 1'b0) & (empty_27_reg_576 == 1'd1)) | ((iq_out_3_TREADY == 1'b0) & (empty_26_reg_561 == 1'd1)) | ((iq_out_2_TREADY == 1'b0) & (empty_25_reg_546 == 1'd1)) | ((iq_out_1_TREADY == 1'b0) & (empty_24_reg_531 == 1'd1)) | ((iq_out_0_TREADY == 1'b0) & (empty_23_reg_516 == 1'd1)))) | ((1'b1 == 1'b1) & (postage_stream_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((iq_out_7_TREADY == 1'b0) & (empty_30_reg_621 == 1'd1)) | ((iq_out_6_TREADY == 1'b0) & (empty_29_reg_606 == 1'd1)) | ((iq_out_5_TREADY == 1'b0) & (empty_28_reg_591 == 1'd1)) | ((iq_out_4_TREADY == 1'b0) & (empty_27_reg_576 == 1'd1)) | ((iq_out_3_TREADY == 1'b0) & (empty_26_reg_561 == 1'd1)) | ((iq_out_2_TREADY == 1'b0) & (empty_25_reg_546 == 1'd1)) | ((iq_out_1_TREADY == 1'b0) & (empty_24_reg_531 == 1'd1)) | ((iq_out_0_TREADY == 1'b0) & (empty_23_reg_516 == 1'd1)))) | ((1'b1 == 1'b1) & (postage_stream_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((iq_out_7_TREADY == 1'b0) & (empty_30_reg_621 == 1'd1)) | ((iq_out_6_TREADY == 1'b0) & (empty_29_reg_606 == 1'd1)) | ((iq_out_5_TREADY == 1'b0) & (empty_28_reg_591 == 1'd1)) | ((iq_out_4_TREADY == 1'b0) & (empty_27_reg_576 == 1'd1)) | ((iq_out_3_TREADY == 1'b0) & (empty_26_reg_561 == 1'd1)) | ((iq_out_2_TREADY == 1'b0) & (empty_25_reg_546 == 1'd1)) | ((iq_out_1_TREADY == 1'b0) & (empty_24_reg_531 == 1'd1)) | ((iq_out_0_TREADY == 1'b0) & (empty_23_reg_516 == 1'd1)))) | ((1'b1 == 1'b1) & (postage_stream_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (postage_stream_TVALID_int_regslice == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = (((iq_out_7_TREADY == 1'b0) & (empty_30_reg_621 == 1'd1)) | ((iq_out_6_TREADY == 1'b0) & (empty_29_reg_606 == 1'd1)) | ((iq_out_5_TREADY == 1'b0) & (empty_28_reg_591 == 1'd1)) | ((iq_out_4_TREADY == 1'b0) & (empty_27_reg_576 == 1'd1)) | ((iq_out_3_TREADY == 1'b0) & (empty_26_reg_561 == 1'd1)) | ((iq_out_2_TREADY == 1'b0) & (empty_25_reg_546 == 1'd1)) | ((iq_out_1_TREADY == 1'b0) & (empty_24_reg_531 == 1'd1)) | ((iq_out_0_TREADY == 1'b0) & (empty_23_reg_516 == 1'd1)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (((iq_out_7_TREADY == 1'b0) & (empty_30_reg_621 == 1'd1)) | ((iq_out_6_TREADY == 1'b0) & (empty_29_reg_606 == 1'd1)) | ((iq_out_5_TREADY == 1'b0) & (empty_28_reg_591 == 1'd1)) | ((iq_out_4_TREADY == 1'b0) & (empty_27_reg_576 == 1'd1)) | ((iq_out_3_TREADY == 1'b0) & (empty_26_reg_561 == 1'd1)) | ((iq_out_2_TREADY == 1'b0) & (empty_25_reg_546 == 1'd1)) | ((iq_out_1_TREADY == 1'b0) & (empty_24_reg_531 == 1'd1)) | ((iq_out_0_TREADY == 1'b0) & (empty_23_reg_516 == 1'd1)));
end

always @ (*) begin
    ap_condition_1004 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_7_fu_1216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_941 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_fu_810_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_950 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_1_fu_868_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_959 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_2_fu_926_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_968 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_3_fu_984_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_977 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_4_fu_1042_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_986 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_5_fu_1100_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_995 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_6_fu_1158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter1_empty_23_reg_516 = 'bx;

assign ap_phi_reg_pp0_iter1_empty_24_reg_531 = 'bx;

assign ap_phi_reg_pp0_iter1_empty_25_reg_546 = 'bx;

assign ap_phi_reg_pp0_iter1_empty_26_reg_561 = 'bx;

assign ap_phi_reg_pp0_iter1_empty_27_reg_576 = 'bx;

assign ap_phi_reg_pp0_iter1_empty_28_reg_591 = 'bx;

assign ap_phi_reg_pp0_iter1_empty_29_reg_606 = 'bx;

assign ap_phi_reg_pp0_iter1_empty_30_reg_621 = 'bx;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign group_V_fu_644_p1 = postage_stream_TUSER_int_regslice[8:0];

assign icmp_ln100_1_fu_888_p2 = ((postage_filter_stream_ap_uint_stream_axis_0_tocapture_1 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln100_2_fu_946_p2 = ((postage_filter_stream_ap_uint_stream_axis_0_tocapture == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln100_3_fu_1004_p2 = ((postage_filter_stream_ap_uint_stream_axis_0_tocapture_6 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln100_4_fu_1062_p2 = ((postage_filter_stream_ap_uint_stream_axis_0_tocapture_5 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln100_5_fu_1120_p2 = ((postage_filter_stream_ap_uint_stream_axis_0_tocapture_4 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln100_6_fu_1178_p2 = ((postage_filter_stream_ap_uint_stream_axis_0_tocapture_3 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln100_7_fu_1236_p2 = ((postage_filter_stream_ap_uint_stream_axis_0_tocapture_2 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln100_fu_830_p2 = ((postage_filter_stream_ap_uint_stream_axis_0_tocapture_7 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln1065_1_fu_868_p2 = ((gid_V_1_reg_1515 == group_V_reg_1426) ? 1'b1 : 1'b0);

assign icmp_ln1065_2_fu_926_p2 = ((gid_V_2_reg_1526 == group_V_reg_1426) ? 1'b1 : 1'b0);

assign icmp_ln1065_3_fu_984_p2 = ((gid_V_3_reg_1537 == group_V_reg_1426) ? 1'b1 : 1'b0);

assign icmp_ln1065_4_fu_1042_p2 = ((gid_V_4_reg_1548 == group_V_reg_1426) ? 1'b1 : 1'b0);

assign icmp_ln1065_5_fu_1100_p2 = ((gid_V_5_reg_1559 == group_V_reg_1426) ? 1'b1 : 1'b0);

assign icmp_ln1065_6_fu_1158_p2 = ((gid_V_6_reg_1570 == group_V_reg_1426) ? 1'b1 : 1'b0);

assign icmp_ln1065_7_fu_1216_p2 = ((gid_V_7_reg_1581 == group_V_reg_1426) ? 1'b1 : 1'b0);

assign icmp_ln1065_fu_810_p2 = ((gid_V_reg_1504 == group_V_reg_1426) ? 1'b1 : 1'b0);

assign iq_out_0_TDATA = postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_q0;

assign iq_out_0_TKEEP = 4'd0;

assign iq_out_0_TLAST = tmp_last_V_reg_1591;

assign iq_out_0_TSTRB = 4'd0;

assign iq_out_0_TUSER = 3'd0;

assign iq_out_1_TDATA = postage_filter_stream_ap_uint_stream_axis_0_iqprereg_6_q0;

assign iq_out_1_TKEEP = 4'd0;

assign iq_out_1_TLAST = tmp_last_V_1_reg_1607;

assign iq_out_1_TSTRB = 4'd0;

assign iq_out_1_TUSER = 3'd1;

assign iq_out_2_TDATA = postage_filter_stream_ap_uint_stream_axis_0_iqprereg_5_q0;

assign iq_out_2_TKEEP = 4'd0;

assign iq_out_2_TLAST = tmp_last_V_2_reg_1623;

assign iq_out_2_TSTRB = 4'd0;

assign iq_out_2_TUSER = 3'd2;

assign iq_out_3_TDATA = postage_filter_stream_ap_uint_stream_axis_0_iqprereg_4_q0;

assign iq_out_3_TKEEP = 4'd0;

assign iq_out_3_TLAST = tmp_last_V_3_reg_1639;

assign iq_out_3_TSTRB = 4'd0;

assign iq_out_3_TUSER = 3'd3;

assign iq_out_4_TDATA = postage_filter_stream_ap_uint_stream_axis_0_iqprereg_3_q0;

assign iq_out_4_TKEEP = 4'd0;

assign iq_out_4_TLAST = tmp_last_V_4_reg_1655;

assign iq_out_4_TSTRB = 4'd0;

assign iq_out_4_TUSER = 3'd4;

assign iq_out_5_TDATA = postage_filter_stream_ap_uint_stream_axis_0_iqprereg_2_q0;

assign iq_out_5_TKEEP = 4'd0;

assign iq_out_5_TLAST = tmp_last_V_5_reg_1671;

assign iq_out_5_TSTRB = 4'd0;

assign iq_out_5_TUSER = 3'd5;

assign iq_out_6_TDATA = postage_filter_stream_ap_uint_stream_axis_0_iqprereg_1_q0;

assign iq_out_6_TKEEP = 4'd0;

assign iq_out_6_TLAST = tmp_last_V_6_reg_1687;

assign iq_out_6_TSTRB = 4'd0;

assign iq_out_6_TUSER = 3'd6;

assign iq_out_7_TDATA = postage_filter_stream_ap_uint_stream_axis_0_iqprereg_q0;

assign iq_out_7_TKEEP = 4'd0;

assign iq_out_7_TLAST = tmp_last_V_7_reg_1703;

assign iq_out_7_TSTRB = 4'd0;

assign iq_out_7_TUSER = 3'd7;

assign lane_V_1_fu_712_p1 = monitor_1[1:0];

assign lane_V_2_fu_726_p1 = monitor_2[1:0];

assign lane_V_3_fu_740_p1 = monitor_3[1:0];

assign lane_V_4_fu_754_p1 = monitor_4[1:0];

assign lane_V_5_fu_768_p1 = monitor_5[1:0];

assign lane_V_6_fu_782_p1 = monitor_6[1:0];

assign lane_V_7_fu_796_p1 = monitor_7[1:0];

assign lane_V_fu_698_p1 = monitor_0[1:0];

assign nexttocap_1_fu_876_p2 = ($signed(postage_filter_stream_ap_uint_stream_axis_0_tocapture_1) + $signed(8'd255));

assign nexttocap_2_fu_934_p2 = ($signed(postage_filter_stream_ap_uint_stream_axis_0_tocapture) + $signed(8'd255));

assign nexttocap_3_fu_992_p2 = ($signed(postage_filter_stream_ap_uint_stream_axis_0_tocapture_6) + $signed(8'd255));

assign nexttocap_4_fu_1050_p2 = ($signed(postage_filter_stream_ap_uint_stream_axis_0_tocapture_5) + $signed(8'd255));

assign nexttocap_5_fu_1108_p2 = ($signed(postage_filter_stream_ap_uint_stream_axis_0_tocapture_4) + $signed(8'd255));

assign nexttocap_6_fu_1166_p2 = ($signed(postage_filter_stream_ap_uint_stream_axis_0_tocapture_3) + $signed(8'd255));

assign nexttocap_7_fu_1224_p2 = ($signed(postage_filter_stream_ap_uint_stream_axis_0_tocapture_2) + $signed(8'd255));

assign nexttocap_fu_818_p2 = ($signed(postage_filter_stream_ap_uint_stream_axis_0_tocapture_7) + $signed(8'd255));

assign p_Result_1_fu_914_p2 = ((and_ln825_1_fu_909_p2 == 4'd0) ? 1'b1 : 1'b0);

assign p_Result_2_fu_972_p2 = ((and_ln825_2_fu_967_p2 == 4'd0) ? 1'b1 : 1'b0);

assign p_Result_3_fu_1030_p2 = ((and_ln825_3_fu_1025_p2 == 4'd0) ? 1'b1 : 1'b0);

assign p_Result_4_fu_1088_p2 = ((and_ln825_4_fu_1083_p2 == 4'd0) ? 1'b1 : 1'b0);

assign p_Result_5_fu_1146_p2 = ((and_ln825_5_fu_1141_p2 == 4'd0) ? 1'b1 : 1'b0);

assign p_Result_6_fu_1204_p2 = ((and_ln825_6_fu_1199_p2 == 4'd0) ? 1'b1 : 1'b0);

assign p_Result_7_fu_1262_p2 = ((and_ln825_7_fu_1257_p2 == 4'd0) ? 1'b1 : 1'b0);

assign p_Result_s_fu_856_p2 = ((and_ln825_fu_851_p2 == 4'd0) ? 1'b1 : 1'b0);

assign postage_stream_TREADY = regslice_both_postage_stream_V_data_V_U_ack_in;

assign shl_ln825_1_fu_903_p2 = 4'd1 << zext_ln825_1_fu_900_p1;

assign shl_ln825_2_fu_961_p2 = 4'd1 << zext_ln825_2_fu_958_p1;

assign shl_ln825_3_fu_1019_p2 = 4'd1 << zext_ln825_3_fu_1016_p1;

assign shl_ln825_4_fu_1077_p2 = 4'd1 << zext_ln825_4_fu_1074_p1;

assign shl_ln825_5_fu_1135_p2 = 4'd1 << zext_ln825_5_fu_1132_p1;

assign shl_ln825_6_fu_1193_p2 = 4'd1 << zext_ln825_6_fu_1190_p1;

assign shl_ln825_7_fu_1251_p2 = 4'd1 << zext_ln825_7_fu_1248_p1;

assign shl_ln825_fu_845_p2 = 4'd1 << zext_ln825_fu_842_p1;

assign tmp_last_V_1_fu_882_p2 = ((postage_filter_stream_ap_uint_stream_axis_0_tocapture_1 == 8'd1) ? 1'b1 : 1'b0);

assign tmp_last_V_2_fu_940_p2 = ((postage_filter_stream_ap_uint_stream_axis_0_tocapture == 8'd1) ? 1'b1 : 1'b0);

assign tmp_last_V_3_fu_998_p2 = ((postage_filter_stream_ap_uint_stream_axis_0_tocapture_6 == 8'd1) ? 1'b1 : 1'b0);

assign tmp_last_V_4_fu_1056_p2 = ((postage_filter_stream_ap_uint_stream_axis_0_tocapture_5 == 8'd1) ? 1'b1 : 1'b0);

assign tmp_last_V_5_fu_1114_p2 = ((postage_filter_stream_ap_uint_stream_axis_0_tocapture_4 == 8'd1) ? 1'b1 : 1'b0);

assign tmp_last_V_6_fu_1172_p2 = ((postage_filter_stream_ap_uint_stream_axis_0_tocapture_3 == 8'd1) ? 1'b1 : 1'b0);

assign tmp_last_V_7_fu_1230_p2 = ((postage_filter_stream_ap_uint_stream_axis_0_tocapture_2 == 8'd1) ? 1'b1 : 1'b0);

assign tmp_last_V_fu_824_p2 = ((postage_filter_stream_ap_uint_stream_axis_0_tocapture_7 == 8'd1) ? 1'b1 : 1'b0);

assign zext_ln825_1_fu_900_p1 = lane_V_1_reg_1509;

assign zext_ln825_2_fu_958_p1 = lane_V_2_reg_1520;

assign zext_ln825_3_fu_1016_p1 = lane_V_3_reg_1531;

assign zext_ln825_4_fu_1074_p1 = lane_V_4_reg_1542;

assign zext_ln825_5_fu_1132_p1 = lane_V_5_reg_1553;

assign zext_ln825_6_fu_1190_p1 = lane_V_6_reg_1564;

assign zext_ln825_7_fu_1248_p1 = lane_V_7_reg_1575;

assign zext_ln825_fu_842_p1 = lane_V_reg_1498;


reg find_kernel_block = 0;
// synthesis translate_off
`include "postage_filter_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //postage_filter

