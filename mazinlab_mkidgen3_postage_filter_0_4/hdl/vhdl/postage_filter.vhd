-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity postage_filter is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    postage_stream_TDATA : IN STD_LOGIC_VECTOR (191 downto 0);
    postage_stream_TVALID : IN STD_LOGIC;
    postage_stream_TREADY : OUT STD_LOGIC;
    postage_stream_TKEEP : IN STD_LOGIC_VECTOR (23 downto 0);
    postage_stream_TSTRB : IN STD_LOGIC_VECTOR (23 downto 0);
    postage_stream_TUSER : IN STD_LOGIC_VECTOR (12 downto 0);
    postage_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    iq_out_0_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    iq_out_0_TVALID : OUT STD_LOGIC;
    iq_out_0_TREADY : IN STD_LOGIC;
    iq_out_0_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    iq_out_0_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    iq_out_0_TUSER : OUT STD_LOGIC_VECTOR (2 downto 0);
    iq_out_0_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    iq_out_1_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    iq_out_1_TVALID : OUT STD_LOGIC;
    iq_out_1_TREADY : IN STD_LOGIC;
    iq_out_1_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    iq_out_1_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    iq_out_1_TUSER : OUT STD_LOGIC_VECTOR (2 downto 0);
    iq_out_1_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    iq_out_2_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    iq_out_2_TVALID : OUT STD_LOGIC;
    iq_out_2_TREADY : IN STD_LOGIC;
    iq_out_2_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    iq_out_2_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    iq_out_2_TUSER : OUT STD_LOGIC_VECTOR (2 downto 0);
    iq_out_2_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    iq_out_3_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    iq_out_3_TVALID : OUT STD_LOGIC;
    iq_out_3_TREADY : IN STD_LOGIC;
    iq_out_3_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    iq_out_3_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    iq_out_3_TUSER : OUT STD_LOGIC_VECTOR (2 downto 0);
    iq_out_3_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    iq_out_4_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    iq_out_4_TVALID : OUT STD_LOGIC;
    iq_out_4_TREADY : IN STD_LOGIC;
    iq_out_4_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    iq_out_4_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    iq_out_4_TUSER : OUT STD_LOGIC_VECTOR (2 downto 0);
    iq_out_4_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    iq_out_5_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    iq_out_5_TVALID : OUT STD_LOGIC;
    iq_out_5_TREADY : IN STD_LOGIC;
    iq_out_5_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    iq_out_5_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    iq_out_5_TUSER : OUT STD_LOGIC_VECTOR (2 downto 0);
    iq_out_5_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    iq_out_6_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    iq_out_6_TVALID : OUT STD_LOGIC;
    iq_out_6_TREADY : IN STD_LOGIC;
    iq_out_6_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    iq_out_6_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    iq_out_6_TUSER : OUT STD_LOGIC_VECTOR (2 downto 0);
    iq_out_6_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    iq_out_7_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    iq_out_7_TVALID : OUT STD_LOGIC;
    iq_out_7_TREADY : IN STD_LOGIC;
    iq_out_7_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    iq_out_7_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    iq_out_7_TUSER : OUT STD_LOGIC_VECTOR (2 downto 0);
    iq_out_7_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of postage_filter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "postage_filter_postage_filter,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.307625,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1150,HLS_SYN_LUT=1641,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal monitor_0 : STD_LOGIC_VECTOR (11 downto 0);
    signal monitor_1 : STD_LOGIC_VECTOR (11 downto 0);
    signal monitor_2 : STD_LOGIC_VECTOR (11 downto 0);
    signal monitor_3 : STD_LOGIC_VECTOR (11 downto 0);
    signal monitor_4 : STD_LOGIC_VECTOR (11 downto 0);
    signal monitor_5 : STD_LOGIC_VECTOR (11 downto 0);
    signal monitor_6 : STD_LOGIC_VECTOR (11 downto 0);
    signal monitor_7 : STD_LOGIC_VECTOR (11 downto 0);
    signal postage_filter_stream_ap_uint_stream_axis_0_tocapture_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal postage_filter_stream_ap_uint_stream_axis_0_tocapture_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal postage_filter_stream_ap_uint_stream_axis_0_tocapture : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal postage_filter_stream_ap_uint_stream_axis_0_tocapture_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal postage_filter_stream_ap_uint_stream_axis_0_tocapture_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal postage_filter_stream_ap_uint_stream_axis_0_tocapture_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal postage_filter_stream_ap_uint_stream_axis_0_tocapture_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal postage_filter_stream_ap_uint_stream_axis_0_tocapture_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_ce0 : STD_LOGIC;
    signal postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_we0 : STD_LOGIC;
    signal postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal postage_filter_stream_ap_uint_stream_axis_0_iqprereg_6_ce0 : STD_LOGIC;
    signal postage_filter_stream_ap_uint_stream_axis_0_iqprereg_6_we0 : STD_LOGIC;
    signal postage_filter_stream_ap_uint_stream_axis_0_iqprereg_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal postage_filter_stream_ap_uint_stream_axis_0_iqprereg_5_ce0 : STD_LOGIC;
    signal postage_filter_stream_ap_uint_stream_axis_0_iqprereg_5_we0 : STD_LOGIC;
    signal postage_filter_stream_ap_uint_stream_axis_0_iqprereg_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal postage_filter_stream_ap_uint_stream_axis_0_iqprereg_4_ce0 : STD_LOGIC;
    signal postage_filter_stream_ap_uint_stream_axis_0_iqprereg_4_we0 : STD_LOGIC;
    signal postage_filter_stream_ap_uint_stream_axis_0_iqprereg_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal postage_filter_stream_ap_uint_stream_axis_0_iqprereg_3_ce0 : STD_LOGIC;
    signal postage_filter_stream_ap_uint_stream_axis_0_iqprereg_3_we0 : STD_LOGIC;
    signal postage_filter_stream_ap_uint_stream_axis_0_iqprereg_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal postage_filter_stream_ap_uint_stream_axis_0_iqprereg_2_ce0 : STD_LOGIC;
    signal postage_filter_stream_ap_uint_stream_axis_0_iqprereg_2_we0 : STD_LOGIC;
    signal postage_filter_stream_ap_uint_stream_axis_0_iqprereg_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal postage_filter_stream_ap_uint_stream_axis_0_iqprereg_1_ce0 : STD_LOGIC;
    signal postage_filter_stream_ap_uint_stream_axis_0_iqprereg_1_we0 : STD_LOGIC;
    signal postage_filter_stream_ap_uint_stream_axis_0_iqprereg_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal postage_filter_stream_ap_uint_stream_axis_0_iqprereg_ce0 : STD_LOGIC;
    signal postage_filter_stream_ap_uint_stream_axis_0_iqprereg_we0 : STD_LOGIC;
    signal postage_filter_stream_ap_uint_stream_axis_0_iqprereg_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal postage_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal iq_out_0_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal empty_23_reg_516 : STD_LOGIC_VECTOR (0 downto 0);
    signal iq_out_1_TDATA_blk_n : STD_LOGIC;
    signal empty_24_reg_531 : STD_LOGIC_VECTOR (0 downto 0);
    signal iq_out_2_TDATA_blk_n : STD_LOGIC;
    signal empty_25_reg_546 : STD_LOGIC_VECTOR (0 downto 0);
    signal iq_out_3_TDATA_blk_n : STD_LOGIC;
    signal empty_26_reg_561 : STD_LOGIC_VECTOR (0 downto 0);
    signal iq_out_4_TDATA_blk_n : STD_LOGIC;
    signal empty_27_reg_576 : STD_LOGIC_VECTOR (0 downto 0);
    signal iq_out_5_TDATA_blk_n : STD_LOGIC;
    signal empty_28_reg_591 : STD_LOGIC_VECTOR (0 downto 0);
    signal iq_out_6_TDATA_blk_n : STD_LOGIC;
    signal empty_29_reg_606 : STD_LOGIC_VECTOR (0 downto 0);
    signal iq_out_7_TDATA_blk_n : STD_LOGIC;
    signal empty_30_reg_621 : STD_LOGIC_VECTOR (0 downto 0);
    signal group_V_fu_644_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal group_V_reg_1426 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trigger_V_reg_1438 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_reg_1450 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_1450_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_1_reg_1462 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_1_reg_1462_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_2_reg_1474 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_2_reg_1474_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_3_reg_1486 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_3_reg_1486_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal lane_V_fu_698_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lane_V_reg_1498 : STD_LOGIC_VECTOR (1 downto 0);
    signal lane_V_reg_1498_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal gid_V_reg_1504 : STD_LOGIC_VECTOR (8 downto 0);
    signal lane_V_1_fu_712_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lane_V_1_reg_1509 : STD_LOGIC_VECTOR (1 downto 0);
    signal lane_V_1_reg_1509_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal gid_V_1_reg_1515 : STD_LOGIC_VECTOR (8 downto 0);
    signal lane_V_2_fu_726_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lane_V_2_reg_1520 : STD_LOGIC_VECTOR (1 downto 0);
    signal lane_V_2_reg_1520_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal gid_V_2_reg_1526 : STD_LOGIC_VECTOR (8 downto 0);
    signal lane_V_3_fu_740_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lane_V_3_reg_1531 : STD_LOGIC_VECTOR (1 downto 0);
    signal lane_V_3_reg_1531_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal gid_V_3_reg_1537 : STD_LOGIC_VECTOR (8 downto 0);
    signal lane_V_4_fu_754_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lane_V_4_reg_1542 : STD_LOGIC_VECTOR (1 downto 0);
    signal lane_V_4_reg_1542_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal gid_V_4_reg_1548 : STD_LOGIC_VECTOR (8 downto 0);
    signal lane_V_5_fu_768_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lane_V_5_reg_1553 : STD_LOGIC_VECTOR (1 downto 0);
    signal lane_V_5_reg_1553_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal gid_V_5_reg_1559 : STD_LOGIC_VECTOR (8 downto 0);
    signal lane_V_6_fu_782_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lane_V_6_reg_1564 : STD_LOGIC_VECTOR (1 downto 0);
    signal lane_V_6_reg_1564_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal gid_V_6_reg_1570 : STD_LOGIC_VECTOR (8 downto 0);
    signal lane_V_7_fu_796_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lane_V_7_reg_1575 : STD_LOGIC_VECTOR (1 downto 0);
    signal lane_V_7_reg_1575_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal gid_V_7_reg_1581 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln1065_fu_810_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_reg_1586 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_fu_824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_1591 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_1_fu_868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_1_reg_1602 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_1_fu_882_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_1_reg_1607 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_2_fu_926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_2_reg_1618 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_2_fu_940_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_2_reg_1623 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_3_fu_984_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_3_reg_1634 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_3_fu_998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_3_reg_1639 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_4_fu_1042_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_4_reg_1650 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_4_fu_1056_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_4_reg_1655 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_5_fu_1100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_5_reg_1666 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_5_fu_1114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_5_reg_1671 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_6_fu_1158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_6_reg_1682 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_6_fu_1172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_6_reg_1687 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_7_fu_1216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_7_reg_1698 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_7_fu_1230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_7_reg_1703 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_reg_pp0_iter1_empty_23_reg_516 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_24_reg_531 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_1_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_25_reg_546 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_2_fu_946_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_26_reg_561 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_3_fu_1004_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_27_reg_576 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_4_fu_1062_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_28_reg_591 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_5_fu_1120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_29_reg_606 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_6_fu_1178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_30_reg_621 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_7_fu_1236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nexttocap_fu_818_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_fu_856_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nexttocap_1_fu_876_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_1_fu_914_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nexttocap_2_fu_934_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_2_fu_972_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nexttocap_3_fu_992_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_3_fu_1030_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nexttocap_4_fu_1050_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_4_fu_1088_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nexttocap_5_fu_1108_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_5_fu_1146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nexttocap_6_fu_1166_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_6_fu_1204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nexttocap_7_fu_1224_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_7_fu_1262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal DataIn_assign_fu_1274_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataIn_assign_1_fu_1293_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataIn_assign_2_fu_1312_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataIn_assign_3_fu_1331_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataIn_assign_4_fu_1350_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataIn_assign_5_fu_1369_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataIn_assign_6_fu_1388_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataIn_assign_7_fu_1407_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln825_fu_842_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln825_fu_845_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln825_fu_851_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln825_1_fu_900_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln825_1_fu_903_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln825_1_fu_909_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln825_2_fu_958_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln825_2_fu_961_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln825_2_fu_967_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln825_3_fu_1016_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln825_3_fu_1019_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln825_3_fu_1025_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln825_4_fu_1074_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln825_4_fu_1077_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln825_4_fu_1083_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln825_5_fu_1132_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln825_5_fu_1135_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln825_5_fu_1141_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln825_6_fu_1190_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln825_6_fu_1193_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln825_6_fu_1199_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln825_7_fu_1248_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln825_7_fu_1251_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln825_7_fu_1257_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_postage_stream_V_data_V_U_apdone_blk : STD_LOGIC;
    signal postage_stream_TDATA_int_regslice : STD_LOGIC_VECTOR (191 downto 0);
    signal postage_stream_TVALID_int_regslice : STD_LOGIC;
    signal postage_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_postage_stream_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_postage_stream_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal postage_stream_TKEEP_int_regslice : STD_LOGIC_VECTOR (23 downto 0);
    signal regslice_both_postage_stream_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_postage_stream_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_postage_stream_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal postage_stream_TSTRB_int_regslice : STD_LOGIC_VECTOR (23 downto 0);
    signal regslice_both_postage_stream_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_postage_stream_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_postage_stream_V_user_V_U_apdone_blk : STD_LOGIC;
    signal postage_stream_TUSER_int_regslice : STD_LOGIC_VECTOR (12 downto 0);
    signal regslice_both_postage_stream_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_postage_stream_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_postage_stream_V_last_V_U_apdone_blk : STD_LOGIC;
    signal postage_stream_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_postage_stream_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_postage_stream_V_last_V_U_ack_in : STD_LOGIC;
    signal ap_condition_959 : BOOLEAN;
    signal ap_condition_950 : BOOLEAN;
    signal ap_condition_1004 : BOOLEAN;
    signal ap_condition_995 : BOOLEAN;
    signal ap_condition_986 : BOOLEAN;
    signal ap_condition_977 : BOOLEAN;
    signal ap_condition_968 : BOOLEAN;
    signal ap_condition_941 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component postage_filter_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component postage_filter_postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_SHIFTREG_AUTO_0R0W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component postage_filter_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        monitor_0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        monitor_1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        monitor_2 : OUT STD_LOGIC_VECTOR (11 downto 0);
        monitor_3 : OUT STD_LOGIC_VECTOR (11 downto 0);
        monitor_4 : OUT STD_LOGIC_VECTOR (11 downto 0);
        monitor_5 : OUT STD_LOGIC_VECTOR (11 downto 0);
        monitor_6 : OUT STD_LOGIC_VECTOR (11 downto 0);
        monitor_7 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component postage_filter_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_U : component postage_filter_postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_SHIFTREG_AUTO_0R0W
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ap_const_lv4_8,
        ce0 => postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_ce0,
        we0 => postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_we0,
        d0 => DataIn_assign_fu_1274_p6,
        q0 => postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_q0);

    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_6_U : component postage_filter_postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_SHIFTREG_AUTO_0R0W
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ap_const_lv4_8,
        ce0 => postage_filter_stream_ap_uint_stream_axis_0_iqprereg_6_ce0,
        we0 => postage_filter_stream_ap_uint_stream_axis_0_iqprereg_6_we0,
        d0 => DataIn_assign_1_fu_1293_p6,
        q0 => postage_filter_stream_ap_uint_stream_axis_0_iqprereg_6_q0);

    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_5_U : component postage_filter_postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_SHIFTREG_AUTO_0R0W
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ap_const_lv4_8,
        ce0 => postage_filter_stream_ap_uint_stream_axis_0_iqprereg_5_ce0,
        we0 => postage_filter_stream_ap_uint_stream_axis_0_iqprereg_5_we0,
        d0 => DataIn_assign_2_fu_1312_p6,
        q0 => postage_filter_stream_ap_uint_stream_axis_0_iqprereg_5_q0);

    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_4_U : component postage_filter_postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_SHIFTREG_AUTO_0R0W
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ap_const_lv4_8,
        ce0 => postage_filter_stream_ap_uint_stream_axis_0_iqprereg_4_ce0,
        we0 => postage_filter_stream_ap_uint_stream_axis_0_iqprereg_4_we0,
        d0 => DataIn_assign_3_fu_1331_p6,
        q0 => postage_filter_stream_ap_uint_stream_axis_0_iqprereg_4_q0);

    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_3_U : component postage_filter_postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_SHIFTREG_AUTO_0R0W
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ap_const_lv4_8,
        ce0 => postage_filter_stream_ap_uint_stream_axis_0_iqprereg_3_ce0,
        we0 => postage_filter_stream_ap_uint_stream_axis_0_iqprereg_3_we0,
        d0 => DataIn_assign_4_fu_1350_p6,
        q0 => postage_filter_stream_ap_uint_stream_axis_0_iqprereg_3_q0);

    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_2_U : component postage_filter_postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_SHIFTREG_AUTO_0R0W
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ap_const_lv4_8,
        ce0 => postage_filter_stream_ap_uint_stream_axis_0_iqprereg_2_ce0,
        we0 => postage_filter_stream_ap_uint_stream_axis_0_iqprereg_2_we0,
        d0 => DataIn_assign_5_fu_1369_p6,
        q0 => postage_filter_stream_ap_uint_stream_axis_0_iqprereg_2_q0);

    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_1_U : component postage_filter_postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_SHIFTREG_AUTO_0R0W
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ap_const_lv4_8,
        ce0 => postage_filter_stream_ap_uint_stream_axis_0_iqprereg_1_ce0,
        we0 => postage_filter_stream_ap_uint_stream_axis_0_iqprereg_1_we0,
        d0 => DataIn_assign_6_fu_1388_p6,
        q0 => postage_filter_stream_ap_uint_stream_axis_0_iqprereg_1_q0);

    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_U : component postage_filter_postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_SHIFTREG_AUTO_0R0W
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ap_const_lv4_8,
        ce0 => postage_filter_stream_ap_uint_stream_axis_0_iqprereg_ce0,
        we0 => postage_filter_stream_ap_uint_stream_axis_0_iqprereg_we0,
        d0 => DataIn_assign_7_fu_1407_p6,
        q0 => postage_filter_stream_ap_uint_stream_axis_0_iqprereg_q0);

    control_s_axi_U : component postage_filter_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        monitor_0 => monitor_0,
        monitor_1 => monitor_1,
        monitor_2 => monitor_2,
        monitor_3 => monitor_3,
        monitor_4 => monitor_4,
        monitor_5 => monitor_5,
        monitor_6 => monitor_6,
        monitor_7 => monitor_7);

    mux_42_32_1_1_U1 : component postage_filter_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => x_reg_1450_pp0_iter1_reg,
        din1 => x_1_reg_1462_pp0_iter1_reg,
        din2 => x_2_reg_1474_pp0_iter1_reg,
        din3 => x_3_reg_1486_pp0_iter1_reg,
        din4 => lane_V_reg_1498_pp0_iter1_reg,
        dout => DataIn_assign_fu_1274_p6);

    mux_42_32_1_1_U2 : component postage_filter_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => x_reg_1450_pp0_iter1_reg,
        din1 => x_1_reg_1462_pp0_iter1_reg,
        din2 => x_2_reg_1474_pp0_iter1_reg,
        din3 => x_3_reg_1486_pp0_iter1_reg,
        din4 => lane_V_1_reg_1509_pp0_iter1_reg,
        dout => DataIn_assign_1_fu_1293_p6);

    mux_42_32_1_1_U3 : component postage_filter_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => x_reg_1450_pp0_iter1_reg,
        din1 => x_1_reg_1462_pp0_iter1_reg,
        din2 => x_2_reg_1474_pp0_iter1_reg,
        din3 => x_3_reg_1486_pp0_iter1_reg,
        din4 => lane_V_2_reg_1520_pp0_iter1_reg,
        dout => DataIn_assign_2_fu_1312_p6);

    mux_42_32_1_1_U4 : component postage_filter_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => x_reg_1450_pp0_iter1_reg,
        din1 => x_1_reg_1462_pp0_iter1_reg,
        din2 => x_2_reg_1474_pp0_iter1_reg,
        din3 => x_3_reg_1486_pp0_iter1_reg,
        din4 => lane_V_3_reg_1531_pp0_iter1_reg,
        dout => DataIn_assign_3_fu_1331_p6);

    mux_42_32_1_1_U5 : component postage_filter_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => x_reg_1450_pp0_iter1_reg,
        din1 => x_1_reg_1462_pp0_iter1_reg,
        din2 => x_2_reg_1474_pp0_iter1_reg,
        din3 => x_3_reg_1486_pp0_iter1_reg,
        din4 => lane_V_4_reg_1542_pp0_iter1_reg,
        dout => DataIn_assign_4_fu_1350_p6);

    mux_42_32_1_1_U6 : component postage_filter_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => x_reg_1450_pp0_iter1_reg,
        din1 => x_1_reg_1462_pp0_iter1_reg,
        din2 => x_2_reg_1474_pp0_iter1_reg,
        din3 => x_3_reg_1486_pp0_iter1_reg,
        din4 => lane_V_5_reg_1553_pp0_iter1_reg,
        dout => DataIn_assign_5_fu_1369_p6);

    mux_42_32_1_1_U7 : component postage_filter_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => x_reg_1450_pp0_iter1_reg,
        din1 => x_1_reg_1462_pp0_iter1_reg,
        din2 => x_2_reg_1474_pp0_iter1_reg,
        din3 => x_3_reg_1486_pp0_iter1_reg,
        din4 => lane_V_6_reg_1564_pp0_iter1_reg,
        dout => DataIn_assign_6_fu_1388_p6);

    mux_42_32_1_1_U8 : component postage_filter_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => x_reg_1450_pp0_iter1_reg,
        din1 => x_1_reg_1462_pp0_iter1_reg,
        din2 => x_2_reg_1474_pp0_iter1_reg,
        din3 => x_3_reg_1486_pp0_iter1_reg,
        din4 => lane_V_7_reg_1575_pp0_iter1_reg,
        dout => DataIn_assign_7_fu_1407_p6);

    regslice_both_postage_stream_V_data_V_U : component postage_filter_regslice_both
    generic map (
        DataWidth => 192)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => postage_stream_TDATA,
        vld_in => postage_stream_TVALID,
        ack_in => regslice_both_postage_stream_V_data_V_U_ack_in,
        data_out => postage_stream_TDATA_int_regslice,
        vld_out => postage_stream_TVALID_int_regslice,
        ack_out => postage_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_postage_stream_V_data_V_U_apdone_blk);

    regslice_both_postage_stream_V_keep_V_U : component postage_filter_regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => postage_stream_TKEEP,
        vld_in => postage_stream_TVALID,
        ack_in => regslice_both_postage_stream_V_keep_V_U_ack_in,
        data_out => postage_stream_TKEEP_int_regslice,
        vld_out => regslice_both_postage_stream_V_keep_V_U_vld_out,
        ack_out => postage_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_postage_stream_V_keep_V_U_apdone_blk);

    regslice_both_postage_stream_V_strb_V_U : component postage_filter_regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => postage_stream_TSTRB,
        vld_in => postage_stream_TVALID,
        ack_in => regslice_both_postage_stream_V_strb_V_U_ack_in,
        data_out => postage_stream_TSTRB_int_regslice,
        vld_out => regslice_both_postage_stream_V_strb_V_U_vld_out,
        ack_out => postage_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_postage_stream_V_strb_V_U_apdone_blk);

    regslice_both_postage_stream_V_user_V_U : component postage_filter_regslice_both
    generic map (
        DataWidth => 13)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => postage_stream_TUSER,
        vld_in => postage_stream_TVALID,
        ack_in => regslice_both_postage_stream_V_user_V_U_ack_in,
        data_out => postage_stream_TUSER_int_regslice,
        vld_out => regslice_both_postage_stream_V_user_V_U_vld_out,
        ack_out => postage_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_postage_stream_V_user_V_U_apdone_blk);

    regslice_both_postage_stream_V_last_V_U : component postage_filter_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => postage_stream_TLAST,
        vld_in => postage_stream_TVALID,
        ack_in => regslice_both_postage_stream_V_last_V_U_ack_in,
        data_out => postage_stream_TLAST_int_regslice,
        vld_out => regslice_both_postage_stream_V_last_V_U_vld_out,
        ack_out => postage_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_postage_stream_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    empty_23_reg_516_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_fu_830_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_fu_810_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                empty_23_reg_516 <= ap_const_lv1_1;
            elsif ((((icmp_ln100_fu_830_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_fu_810_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_fu_810_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                empty_23_reg_516 <= ap_const_lv1_0;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                empty_23_reg_516 <= ap_phi_reg_pp0_iter1_empty_23_reg_516;
            end if; 
        end if;
    end process;

    empty_24_reg_531_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln100_1_fu_888_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_1_fu_868_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_1_fu_868_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                empty_24_reg_531 <= ap_const_lv1_0;
            elsif (((icmp_ln100_1_fu_888_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_1_fu_868_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                empty_24_reg_531 <= ap_const_lv1_1;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                empty_24_reg_531 <= ap_phi_reg_pp0_iter1_empty_24_reg_531;
            end if; 
        end if;
    end process;

    empty_25_reg_546_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln100_2_fu_946_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_2_fu_926_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_2_fu_926_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                empty_25_reg_546 <= ap_const_lv1_0;
            elsif (((icmp_ln100_2_fu_946_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_2_fu_926_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                empty_25_reg_546 <= ap_const_lv1_1;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                empty_25_reg_546 <= ap_phi_reg_pp0_iter1_empty_25_reg_546;
            end if; 
        end if;
    end process;

    empty_26_reg_561_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln100_3_fu_1004_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_3_fu_984_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_3_fu_984_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                empty_26_reg_561 <= ap_const_lv1_0;
            elsif (((icmp_ln100_3_fu_1004_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_3_fu_984_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                empty_26_reg_561 <= ap_const_lv1_1;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                empty_26_reg_561 <= ap_phi_reg_pp0_iter1_empty_26_reg_561;
            end if; 
        end if;
    end process;

    empty_27_reg_576_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln100_4_fu_1062_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_4_fu_1042_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_4_fu_1042_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                empty_27_reg_576 <= ap_const_lv1_0;
            elsif (((icmp_ln100_4_fu_1062_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_4_fu_1042_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                empty_27_reg_576 <= ap_const_lv1_1;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                empty_27_reg_576 <= ap_phi_reg_pp0_iter1_empty_27_reg_576;
            end if; 
        end if;
    end process;

    empty_28_reg_591_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln100_5_fu_1120_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_5_fu_1100_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_5_fu_1100_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                empty_28_reg_591 <= ap_const_lv1_0;
            elsif (((icmp_ln100_5_fu_1120_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_5_fu_1100_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                empty_28_reg_591 <= ap_const_lv1_1;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                empty_28_reg_591 <= ap_phi_reg_pp0_iter1_empty_28_reg_591;
            end if; 
        end if;
    end process;

    empty_29_reg_606_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln100_6_fu_1178_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_6_fu_1158_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_6_fu_1158_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                empty_29_reg_606 <= ap_const_lv1_0;
            elsif (((icmp_ln100_6_fu_1178_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_6_fu_1158_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                empty_29_reg_606 <= ap_const_lv1_1;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                empty_29_reg_606 <= ap_phi_reg_pp0_iter1_empty_29_reg_606;
            end if; 
        end if;
    end process;

    empty_30_reg_621_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln100_7_fu_1236_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_7_fu_1216_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_7_fu_1216_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                empty_30_reg_621 <= ap_const_lv1_0;
            elsif (((icmp_ln100_7_fu_1236_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_7_fu_1216_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                empty_30_reg_621 <= ap_const_lv1_1;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                empty_30_reg_621 <= ap_phi_reg_pp0_iter1_empty_30_reg_621;
            end if; 
        end if;
    end process;

    postage_filter_stream_ap_uint_stream_axis_0_tocapture_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_959)) then
                if (((p_Result_2_fu_972_p2 = ap_const_lv1_0) and (icmp_ln100_2_fu_946_p2 = ap_const_lv1_1))) then 
                    postage_filter_stream_ap_uint_stream_axis_0_tocapture <= ap_const_lv8_7F;
                elsif ((icmp_ln100_2_fu_946_p2 = ap_const_lv1_0)) then 
                    postage_filter_stream_ap_uint_stream_axis_0_tocapture <= nexttocap_2_fu_934_p2;
                end if;
            end if; 
        end if;
    end process;

    postage_filter_stream_ap_uint_stream_axis_0_tocapture_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_950)) then
                if (((p_Result_1_fu_914_p2 = ap_const_lv1_0) and (icmp_ln100_1_fu_888_p2 = ap_const_lv1_1))) then 
                    postage_filter_stream_ap_uint_stream_axis_0_tocapture_1 <= ap_const_lv8_7F;
                elsif ((icmp_ln100_1_fu_888_p2 = ap_const_lv1_0)) then 
                    postage_filter_stream_ap_uint_stream_axis_0_tocapture_1 <= nexttocap_1_fu_876_p2;
                end if;
            end if; 
        end if;
    end process;

    postage_filter_stream_ap_uint_stream_axis_0_tocapture_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_1004)) then
                if (((p_Result_7_fu_1262_p2 = ap_const_lv1_0) and (icmp_ln100_7_fu_1236_p2 = ap_const_lv1_1))) then 
                    postage_filter_stream_ap_uint_stream_axis_0_tocapture_2 <= ap_const_lv8_7F;
                elsif ((icmp_ln100_7_fu_1236_p2 = ap_const_lv1_0)) then 
                    postage_filter_stream_ap_uint_stream_axis_0_tocapture_2 <= nexttocap_7_fu_1224_p2;
                end if;
            end if; 
        end if;
    end process;

    postage_filter_stream_ap_uint_stream_axis_0_tocapture_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_995)) then
                if (((p_Result_6_fu_1204_p2 = ap_const_lv1_0) and (icmp_ln100_6_fu_1178_p2 = ap_const_lv1_1))) then 
                    postage_filter_stream_ap_uint_stream_axis_0_tocapture_3 <= ap_const_lv8_7F;
                elsif ((icmp_ln100_6_fu_1178_p2 = ap_const_lv1_0)) then 
                    postage_filter_stream_ap_uint_stream_axis_0_tocapture_3 <= nexttocap_6_fu_1166_p2;
                end if;
            end if; 
        end if;
    end process;

    postage_filter_stream_ap_uint_stream_axis_0_tocapture_4_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_986)) then
                if (((p_Result_5_fu_1146_p2 = ap_const_lv1_0) and (icmp_ln100_5_fu_1120_p2 = ap_const_lv1_1))) then 
                    postage_filter_stream_ap_uint_stream_axis_0_tocapture_4 <= ap_const_lv8_7F;
                elsif ((icmp_ln100_5_fu_1120_p2 = ap_const_lv1_0)) then 
                    postage_filter_stream_ap_uint_stream_axis_0_tocapture_4 <= nexttocap_5_fu_1108_p2;
                end if;
            end if; 
        end if;
    end process;

    postage_filter_stream_ap_uint_stream_axis_0_tocapture_5_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_977)) then
                if (((p_Result_4_fu_1088_p2 = ap_const_lv1_0) and (icmp_ln100_4_fu_1062_p2 = ap_const_lv1_1))) then 
                    postage_filter_stream_ap_uint_stream_axis_0_tocapture_5 <= ap_const_lv8_7F;
                elsif ((icmp_ln100_4_fu_1062_p2 = ap_const_lv1_0)) then 
                    postage_filter_stream_ap_uint_stream_axis_0_tocapture_5 <= nexttocap_4_fu_1050_p2;
                end if;
            end if; 
        end if;
    end process;

    postage_filter_stream_ap_uint_stream_axis_0_tocapture_6_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_968)) then
                if (((p_Result_3_fu_1030_p2 = ap_const_lv1_0) and (icmp_ln100_3_fu_1004_p2 = ap_const_lv1_1))) then 
                    postage_filter_stream_ap_uint_stream_axis_0_tocapture_6 <= ap_const_lv8_7F;
                elsif ((icmp_ln100_3_fu_1004_p2 = ap_const_lv1_0)) then 
                    postage_filter_stream_ap_uint_stream_axis_0_tocapture_6 <= nexttocap_3_fu_992_p2;
                end if;
            end if; 
        end if;
    end process;

    postage_filter_stream_ap_uint_stream_axis_0_tocapture_7_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_941)) then
                if (((p_Result_s_fu_856_p2 = ap_const_lv1_0) and (icmp_ln100_fu_830_p2 = ap_const_lv1_1))) then 
                    postage_filter_stream_ap_uint_stream_axis_0_tocapture_7 <= ap_const_lv8_7F;
                elsif ((icmp_ln100_fu_830_p2 = ap_const_lv1_0)) then 
                    postage_filter_stream_ap_uint_stream_axis_0_tocapture_7 <= nexttocap_fu_818_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gid_V_1_reg_1515 <= monitor_1(10 downto 2);
                gid_V_2_reg_1526 <= monitor_2(10 downto 2);
                gid_V_3_reg_1537 <= monitor_3(10 downto 2);
                gid_V_4_reg_1548 <= monitor_4(10 downto 2);
                gid_V_5_reg_1559 <= monitor_5(10 downto 2);
                gid_V_6_reg_1570 <= monitor_6(10 downto 2);
                gid_V_7_reg_1581 <= monitor_7(10 downto 2);
                gid_V_reg_1504 <= monitor_0(10 downto 2);
                group_V_reg_1426 <= group_V_fu_644_p1;
                icmp_ln1065_1_reg_1602 <= icmp_ln1065_1_fu_868_p2;
                icmp_ln1065_2_reg_1618 <= icmp_ln1065_2_fu_926_p2;
                icmp_ln1065_3_reg_1634 <= icmp_ln1065_3_fu_984_p2;
                icmp_ln1065_4_reg_1650 <= icmp_ln1065_4_fu_1042_p2;
                icmp_ln1065_5_reg_1666 <= icmp_ln1065_5_fu_1100_p2;
                icmp_ln1065_6_reg_1682 <= icmp_ln1065_6_fu_1158_p2;
                icmp_ln1065_7_reg_1698 <= icmp_ln1065_7_fu_1216_p2;
                icmp_ln1065_reg_1586 <= icmp_ln1065_fu_810_p2;
                lane_V_1_reg_1509 <= lane_V_1_fu_712_p1;
                lane_V_1_reg_1509_pp0_iter1_reg <= lane_V_1_reg_1509;
                lane_V_2_reg_1520 <= lane_V_2_fu_726_p1;
                lane_V_2_reg_1520_pp0_iter1_reg <= lane_V_2_reg_1520;
                lane_V_3_reg_1531 <= lane_V_3_fu_740_p1;
                lane_V_3_reg_1531_pp0_iter1_reg <= lane_V_3_reg_1531;
                lane_V_4_reg_1542 <= lane_V_4_fu_754_p1;
                lane_V_4_reg_1542_pp0_iter1_reg <= lane_V_4_reg_1542;
                lane_V_5_reg_1553 <= lane_V_5_fu_768_p1;
                lane_V_5_reg_1553_pp0_iter1_reg <= lane_V_5_reg_1553;
                lane_V_6_reg_1564 <= lane_V_6_fu_782_p1;
                lane_V_6_reg_1564_pp0_iter1_reg <= lane_V_6_reg_1564;
                lane_V_7_reg_1575 <= lane_V_7_fu_796_p1;
                lane_V_7_reg_1575_pp0_iter1_reg <= lane_V_7_reg_1575;
                lane_V_reg_1498 <= lane_V_fu_698_p1;
                lane_V_reg_1498_pp0_iter1_reg <= lane_V_reg_1498;
                tmp_last_V_1_reg_1607 <= tmp_last_V_1_fu_882_p2;
                tmp_last_V_2_reg_1623 <= tmp_last_V_2_fu_940_p2;
                tmp_last_V_3_reg_1639 <= tmp_last_V_3_fu_998_p2;
                tmp_last_V_4_reg_1655 <= tmp_last_V_4_fu_1056_p2;
                tmp_last_V_5_reg_1671 <= tmp_last_V_5_fu_1114_p2;
                tmp_last_V_6_reg_1687 <= tmp_last_V_6_fu_1172_p2;
                tmp_last_V_7_reg_1703 <= tmp_last_V_7_fu_1230_p2;
                tmp_last_V_reg_1591 <= tmp_last_V_fu_824_p2;
                trigger_V_reg_1438 <= postage_stream_TUSER_int_regslice(12 downto 9);
                x_1_reg_1462 <= postage_stream_TDATA_int_regslice(127 downto 96);
                x_1_reg_1462_pp0_iter1_reg <= x_1_reg_1462;
                x_2_reg_1474 <= postage_stream_TDATA_int_regslice(159 downto 128);
                x_2_reg_1474_pp0_iter1_reg <= x_2_reg_1474;
                x_3_reg_1486 <= postage_stream_TDATA_int_regslice(191 downto 160);
                x_3_reg_1486_pp0_iter1_reg <= x_3_reg_1486;
                x_reg_1450 <= postage_stream_TDATA_int_regslice(95 downto 64);
                x_reg_1450_pp0_iter1_reg <= x_reg_1450;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln825_1_fu_909_p2 <= (trigger_V_reg_1438 and shl_ln825_1_fu_903_p2);
    and_ln825_2_fu_967_p2 <= (trigger_V_reg_1438 and shl_ln825_2_fu_961_p2);
    and_ln825_3_fu_1025_p2 <= (trigger_V_reg_1438 and shl_ln825_3_fu_1019_p2);
    and_ln825_4_fu_1083_p2 <= (trigger_V_reg_1438 and shl_ln825_4_fu_1077_p2);
    and_ln825_5_fu_1141_p2 <= (trigger_V_reg_1438 and shl_ln825_5_fu_1135_p2);
    and_ln825_6_fu_1199_p2 <= (trigger_V_reg_1438 and shl_ln825_6_fu_1193_p2);
    and_ln825_7_fu_1257_p2 <= (trigger_V_reg_1438 and shl_ln825_7_fu_1251_p2);
    and_ln825_fu_851_p2 <= (trigger_V_reg_1438 and shl_ln825_fu_845_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(iq_out_0_TREADY, iq_out_1_TREADY, iq_out_2_TREADY, iq_out_3_TREADY, iq_out_4_TREADY, iq_out_5_TREADY, iq_out_6_TREADY, iq_out_7_TREADY, ap_enable_reg_pp0_iter2, empty_23_reg_516, empty_24_reg_531, empty_25_reg_546, empty_26_reg_561, empty_27_reg_576, empty_28_reg_591, empty_29_reg_606, empty_30_reg_621, postage_stream_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((iq_out_7_TREADY = ap_const_logic_0) and (empty_30_reg_621 = ap_const_lv1_1)) or ((iq_out_6_TREADY = ap_const_logic_0) and (empty_29_reg_606 = ap_const_lv1_1)) or ((iq_out_5_TREADY = ap_const_logic_0) and (empty_28_reg_591 = ap_const_lv1_1)) or ((iq_out_4_TREADY = ap_const_logic_0) and (empty_27_reg_576 = ap_const_lv1_1)) or ((iq_out_3_TREADY = ap_const_logic_0) and (empty_26_reg_561 = ap_const_lv1_1)) or ((iq_out_2_TREADY = ap_const_logic_0) and (empty_25_reg_546 = ap_const_lv1_1)) or ((iq_out_1_TREADY = ap_const_logic_0) and (empty_24_reg_531 = ap_const_lv1_1)) or ((iq_out_0_TREADY = ap_const_logic_0) and (empty_23_reg_516 = ap_const_lv1_1)))) or ((ap_const_logic_1 = ap_const_logic_1) and (postage_stream_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(iq_out_0_TREADY, iq_out_1_TREADY, iq_out_2_TREADY, iq_out_3_TREADY, iq_out_4_TREADY, iq_out_5_TREADY, iq_out_6_TREADY, iq_out_7_TREADY, ap_enable_reg_pp0_iter2, empty_23_reg_516, empty_24_reg_531, empty_25_reg_546, empty_26_reg_561, empty_27_reg_576, empty_28_reg_591, empty_29_reg_606, empty_30_reg_621, ap_block_state3_io, postage_stream_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((iq_out_7_TREADY = ap_const_logic_0) and (empty_30_reg_621 = ap_const_lv1_1)) or ((iq_out_6_TREADY = ap_const_logic_0) and (empty_29_reg_606 = ap_const_lv1_1)) or ((iq_out_5_TREADY = ap_const_logic_0) and (empty_28_reg_591 = ap_const_lv1_1)) or ((iq_out_4_TREADY = ap_const_logic_0) and (empty_27_reg_576 = ap_const_lv1_1)) or ((iq_out_3_TREADY = ap_const_logic_0) and (empty_26_reg_561 = ap_const_lv1_1)) or ((iq_out_2_TREADY = ap_const_logic_0) and (empty_25_reg_546 = ap_const_lv1_1)) or ((iq_out_1_TREADY = ap_const_logic_0) and (empty_24_reg_531 = ap_const_lv1_1)) or ((iq_out_0_TREADY = ap_const_logic_0) and (empty_23_reg_516 = ap_const_lv1_1)))) or ((ap_const_logic_1 = ap_const_logic_1) and (postage_stream_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(iq_out_0_TREADY, iq_out_1_TREADY, iq_out_2_TREADY, iq_out_3_TREADY, iq_out_4_TREADY, iq_out_5_TREADY, iq_out_6_TREADY, iq_out_7_TREADY, ap_enable_reg_pp0_iter2, empty_23_reg_516, empty_24_reg_531, empty_25_reg_546, empty_26_reg_561, empty_27_reg_576, empty_28_reg_591, empty_29_reg_606, empty_30_reg_621, ap_block_state3_io, postage_stream_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((iq_out_7_TREADY = ap_const_logic_0) and (empty_30_reg_621 = ap_const_lv1_1)) or ((iq_out_6_TREADY = ap_const_logic_0) and (empty_29_reg_606 = ap_const_lv1_1)) or ((iq_out_5_TREADY = ap_const_logic_0) and (empty_28_reg_591 = ap_const_lv1_1)) or ((iq_out_4_TREADY = ap_const_logic_0) and (empty_27_reg_576 = ap_const_lv1_1)) or ((iq_out_3_TREADY = ap_const_logic_0) and (empty_26_reg_561 = ap_const_lv1_1)) or ((iq_out_2_TREADY = ap_const_logic_0) and (empty_25_reg_546 = ap_const_lv1_1)) or ((iq_out_1_TREADY = ap_const_logic_0) and (empty_24_reg_531 = ap_const_lv1_1)) or ((iq_out_0_TREADY = ap_const_logic_0) and (empty_23_reg_516 = ap_const_lv1_1)))) or ((ap_const_logic_1 = ap_const_logic_1) and (postage_stream_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(postage_stream_TVALID_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (postage_stream_TVALID_int_regslice = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(iq_out_0_TREADY, iq_out_1_TREADY, iq_out_2_TREADY, iq_out_3_TREADY, iq_out_4_TREADY, iq_out_5_TREADY, iq_out_6_TREADY, iq_out_7_TREADY, empty_23_reg_516, empty_24_reg_531, empty_25_reg_546, empty_26_reg_561, empty_27_reg_576, empty_28_reg_591, empty_29_reg_606, empty_30_reg_621)
    begin
                ap_block_state3_io <= (((iq_out_7_TREADY = ap_const_logic_0) and (empty_30_reg_621 = ap_const_lv1_1)) or ((iq_out_6_TREADY = ap_const_logic_0) and (empty_29_reg_606 = ap_const_lv1_1)) or ((iq_out_5_TREADY = ap_const_logic_0) and (empty_28_reg_591 = ap_const_lv1_1)) or ((iq_out_4_TREADY = ap_const_logic_0) and (empty_27_reg_576 = ap_const_lv1_1)) or ((iq_out_3_TREADY = ap_const_logic_0) and (empty_26_reg_561 = ap_const_lv1_1)) or ((iq_out_2_TREADY = ap_const_logic_0) and (empty_25_reg_546 = ap_const_lv1_1)) or ((iq_out_1_TREADY = ap_const_logic_0) and (empty_24_reg_531 = ap_const_lv1_1)) or ((iq_out_0_TREADY = ap_const_logic_0) and (empty_23_reg_516 = ap_const_lv1_1)));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(iq_out_0_TREADY, iq_out_1_TREADY, iq_out_2_TREADY, iq_out_3_TREADY, iq_out_4_TREADY, iq_out_5_TREADY, iq_out_6_TREADY, iq_out_7_TREADY, empty_23_reg_516, empty_24_reg_531, empty_25_reg_546, empty_26_reg_561, empty_27_reg_576, empty_28_reg_591, empty_29_reg_606, empty_30_reg_621)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (((iq_out_7_TREADY = ap_const_logic_0) and (empty_30_reg_621 = ap_const_lv1_1)) or ((iq_out_6_TREADY = ap_const_logic_0) and (empty_29_reg_606 = ap_const_lv1_1)) or ((iq_out_5_TREADY = ap_const_logic_0) and (empty_28_reg_591 = ap_const_lv1_1)) or ((iq_out_4_TREADY = ap_const_logic_0) and (empty_27_reg_576 = ap_const_lv1_1)) or ((iq_out_3_TREADY = ap_const_logic_0) and (empty_26_reg_561 = ap_const_lv1_1)) or ((iq_out_2_TREADY = ap_const_logic_0) and (empty_25_reg_546 = ap_const_lv1_1)) or ((iq_out_1_TREADY = ap_const_logic_0) and (empty_24_reg_531 = ap_const_lv1_1)) or ((iq_out_0_TREADY = ap_const_logic_0) and (empty_23_reg_516 = ap_const_lv1_1)));
    end process;


    ap_condition_1004_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln1065_7_fu_1216_p2, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_1004 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_7_fu_1216_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_941_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln1065_fu_810_p2, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_941 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_fu_810_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_950_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln1065_1_fu_868_p2, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_950 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_1_fu_868_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_959_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln1065_2_fu_926_p2, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_959 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_2_fu_926_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_968_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln1065_3_fu_984_p2, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_968 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_3_fu_984_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_977_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln1065_4_fu_1042_p2, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_977 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_4_fu_1042_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_986_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln1065_5_fu_1100_p2, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_986 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_5_fu_1100_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_995_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln1065_6_fu_1158_p2, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_995 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_6_fu_1158_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_reg_pp0_iter1_empty_23_reg_516 <= "X";
    ap_phi_reg_pp0_iter1_empty_24_reg_531 <= "X";
    ap_phi_reg_pp0_iter1_empty_25_reg_546 <= "X";
    ap_phi_reg_pp0_iter1_empty_26_reg_561 <= "X";
    ap_phi_reg_pp0_iter1_empty_27_reg_576 <= "X";
    ap_phi_reg_pp0_iter1_empty_28_reg_591 <= "X";
    ap_phi_reg_pp0_iter1_empty_29_reg_606 <= "X";
    ap_phi_reg_pp0_iter1_empty_30_reg_621 <= "X";
    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    group_V_fu_644_p1 <= postage_stream_TUSER_int_regslice(9 - 1 downto 0);
    icmp_ln100_1_fu_888_p2 <= "1" when (postage_filter_stream_ap_uint_stream_axis_0_tocapture_1 = ap_const_lv8_0) else "0";
    icmp_ln100_2_fu_946_p2 <= "1" when (postage_filter_stream_ap_uint_stream_axis_0_tocapture = ap_const_lv8_0) else "0";
    icmp_ln100_3_fu_1004_p2 <= "1" when (postage_filter_stream_ap_uint_stream_axis_0_tocapture_6 = ap_const_lv8_0) else "0";
    icmp_ln100_4_fu_1062_p2 <= "1" when (postage_filter_stream_ap_uint_stream_axis_0_tocapture_5 = ap_const_lv8_0) else "0";
    icmp_ln100_5_fu_1120_p2 <= "1" when (postage_filter_stream_ap_uint_stream_axis_0_tocapture_4 = ap_const_lv8_0) else "0";
    icmp_ln100_6_fu_1178_p2 <= "1" when (postage_filter_stream_ap_uint_stream_axis_0_tocapture_3 = ap_const_lv8_0) else "0";
    icmp_ln100_7_fu_1236_p2 <= "1" when (postage_filter_stream_ap_uint_stream_axis_0_tocapture_2 = ap_const_lv8_0) else "0";
    icmp_ln100_fu_830_p2 <= "1" when (postage_filter_stream_ap_uint_stream_axis_0_tocapture_7 = ap_const_lv8_0) else "0";
    icmp_ln1065_1_fu_868_p2 <= "1" when (gid_V_1_reg_1515 = group_V_reg_1426) else "0";
    icmp_ln1065_2_fu_926_p2 <= "1" when (gid_V_2_reg_1526 = group_V_reg_1426) else "0";
    icmp_ln1065_3_fu_984_p2 <= "1" when (gid_V_3_reg_1537 = group_V_reg_1426) else "0";
    icmp_ln1065_4_fu_1042_p2 <= "1" when (gid_V_4_reg_1548 = group_V_reg_1426) else "0";
    icmp_ln1065_5_fu_1100_p2 <= "1" when (gid_V_5_reg_1559 = group_V_reg_1426) else "0";
    icmp_ln1065_6_fu_1158_p2 <= "1" when (gid_V_6_reg_1570 = group_V_reg_1426) else "0";
    icmp_ln1065_7_fu_1216_p2 <= "1" when (gid_V_7_reg_1581 = group_V_reg_1426) else "0";
    icmp_ln1065_fu_810_p2 <= "1" when (gid_V_reg_1504 = group_V_reg_1426) else "0";
    iq_out_0_TDATA <= postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_q0;

    iq_out_0_TDATA_blk_n_assign_proc : process(iq_out_0_TREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, empty_23_reg_516)
    begin
        if (((empty_23_reg_516 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iq_out_0_TDATA_blk_n <= iq_out_0_TREADY;
        else 
            iq_out_0_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iq_out_0_TKEEP <= ap_const_lv4_0;
    iq_out_0_TLAST <= tmp_last_V_reg_1591;
    iq_out_0_TSTRB <= ap_const_lv4_0;
    iq_out_0_TUSER <= ap_const_lv3_0;

    iq_out_0_TVALID_assign_proc : process(ap_enable_reg_pp0_iter2, empty_23_reg_516, ap_block_pp0_stage0_11001)
    begin
        if (((empty_23_reg_516 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            iq_out_0_TVALID <= ap_const_logic_1;
        else 
            iq_out_0_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    iq_out_1_TDATA <= postage_filter_stream_ap_uint_stream_axis_0_iqprereg_6_q0;

    iq_out_1_TDATA_blk_n_assign_proc : process(iq_out_1_TREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, empty_24_reg_531)
    begin
        if (((empty_24_reg_531 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iq_out_1_TDATA_blk_n <= iq_out_1_TREADY;
        else 
            iq_out_1_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iq_out_1_TKEEP <= ap_const_lv4_0;
    iq_out_1_TLAST <= tmp_last_V_1_reg_1607;
    iq_out_1_TSTRB <= ap_const_lv4_0;
    iq_out_1_TUSER <= ap_const_lv3_1;

    iq_out_1_TVALID_assign_proc : process(ap_enable_reg_pp0_iter2, empty_24_reg_531, ap_block_pp0_stage0_11001)
    begin
        if (((empty_24_reg_531 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            iq_out_1_TVALID <= ap_const_logic_1;
        else 
            iq_out_1_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    iq_out_2_TDATA <= postage_filter_stream_ap_uint_stream_axis_0_iqprereg_5_q0;

    iq_out_2_TDATA_blk_n_assign_proc : process(iq_out_2_TREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, empty_25_reg_546)
    begin
        if (((empty_25_reg_546 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iq_out_2_TDATA_blk_n <= iq_out_2_TREADY;
        else 
            iq_out_2_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iq_out_2_TKEEP <= ap_const_lv4_0;
    iq_out_2_TLAST <= tmp_last_V_2_reg_1623;
    iq_out_2_TSTRB <= ap_const_lv4_0;
    iq_out_2_TUSER <= ap_const_lv3_2;

    iq_out_2_TVALID_assign_proc : process(ap_enable_reg_pp0_iter2, empty_25_reg_546, ap_block_pp0_stage0_11001)
    begin
        if (((empty_25_reg_546 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            iq_out_2_TVALID <= ap_const_logic_1;
        else 
            iq_out_2_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    iq_out_3_TDATA <= postage_filter_stream_ap_uint_stream_axis_0_iqprereg_4_q0;

    iq_out_3_TDATA_blk_n_assign_proc : process(iq_out_3_TREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, empty_26_reg_561)
    begin
        if (((empty_26_reg_561 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iq_out_3_TDATA_blk_n <= iq_out_3_TREADY;
        else 
            iq_out_3_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iq_out_3_TKEEP <= ap_const_lv4_0;
    iq_out_3_TLAST <= tmp_last_V_3_reg_1639;
    iq_out_3_TSTRB <= ap_const_lv4_0;
    iq_out_3_TUSER <= ap_const_lv3_3;

    iq_out_3_TVALID_assign_proc : process(ap_enable_reg_pp0_iter2, empty_26_reg_561, ap_block_pp0_stage0_11001)
    begin
        if (((empty_26_reg_561 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            iq_out_3_TVALID <= ap_const_logic_1;
        else 
            iq_out_3_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    iq_out_4_TDATA <= postage_filter_stream_ap_uint_stream_axis_0_iqprereg_3_q0;

    iq_out_4_TDATA_blk_n_assign_proc : process(iq_out_4_TREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, empty_27_reg_576)
    begin
        if (((empty_27_reg_576 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iq_out_4_TDATA_blk_n <= iq_out_4_TREADY;
        else 
            iq_out_4_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iq_out_4_TKEEP <= ap_const_lv4_0;
    iq_out_4_TLAST <= tmp_last_V_4_reg_1655;
    iq_out_4_TSTRB <= ap_const_lv4_0;
    iq_out_4_TUSER <= ap_const_lv3_4;

    iq_out_4_TVALID_assign_proc : process(ap_enable_reg_pp0_iter2, empty_27_reg_576, ap_block_pp0_stage0_11001)
    begin
        if (((empty_27_reg_576 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            iq_out_4_TVALID <= ap_const_logic_1;
        else 
            iq_out_4_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    iq_out_5_TDATA <= postage_filter_stream_ap_uint_stream_axis_0_iqprereg_2_q0;

    iq_out_5_TDATA_blk_n_assign_proc : process(iq_out_5_TREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, empty_28_reg_591)
    begin
        if (((empty_28_reg_591 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iq_out_5_TDATA_blk_n <= iq_out_5_TREADY;
        else 
            iq_out_5_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iq_out_5_TKEEP <= ap_const_lv4_0;
    iq_out_5_TLAST <= tmp_last_V_5_reg_1671;
    iq_out_5_TSTRB <= ap_const_lv4_0;
    iq_out_5_TUSER <= ap_const_lv3_5;

    iq_out_5_TVALID_assign_proc : process(ap_enable_reg_pp0_iter2, empty_28_reg_591, ap_block_pp0_stage0_11001)
    begin
        if (((empty_28_reg_591 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            iq_out_5_TVALID <= ap_const_logic_1;
        else 
            iq_out_5_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    iq_out_6_TDATA <= postage_filter_stream_ap_uint_stream_axis_0_iqprereg_1_q0;

    iq_out_6_TDATA_blk_n_assign_proc : process(iq_out_6_TREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, empty_29_reg_606)
    begin
        if (((empty_29_reg_606 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iq_out_6_TDATA_blk_n <= iq_out_6_TREADY;
        else 
            iq_out_6_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iq_out_6_TKEEP <= ap_const_lv4_0;
    iq_out_6_TLAST <= tmp_last_V_6_reg_1687;
    iq_out_6_TSTRB <= ap_const_lv4_0;
    iq_out_6_TUSER <= ap_const_lv3_6;

    iq_out_6_TVALID_assign_proc : process(ap_enable_reg_pp0_iter2, empty_29_reg_606, ap_block_pp0_stage0_11001)
    begin
        if (((empty_29_reg_606 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            iq_out_6_TVALID <= ap_const_logic_1;
        else 
            iq_out_6_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    iq_out_7_TDATA <= postage_filter_stream_ap_uint_stream_axis_0_iqprereg_q0;

    iq_out_7_TDATA_blk_n_assign_proc : process(iq_out_7_TREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, empty_30_reg_621)
    begin
        if (((empty_30_reg_621 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iq_out_7_TDATA_blk_n <= iq_out_7_TREADY;
        else 
            iq_out_7_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iq_out_7_TKEEP <= ap_const_lv4_0;
    iq_out_7_TLAST <= tmp_last_V_7_reg_1703;
    iq_out_7_TSTRB <= ap_const_lv4_0;
    iq_out_7_TUSER <= ap_const_lv3_7;

    iq_out_7_TVALID_assign_proc : process(ap_enable_reg_pp0_iter2, empty_30_reg_621, ap_block_pp0_stage0_11001)
    begin
        if (((empty_30_reg_621 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            iq_out_7_TVALID <= ap_const_logic_1;
        else 
            iq_out_7_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    lane_V_1_fu_712_p1 <= monitor_1(2 - 1 downto 0);
    lane_V_2_fu_726_p1 <= monitor_2(2 - 1 downto 0);
    lane_V_3_fu_740_p1 <= monitor_3(2 - 1 downto 0);
    lane_V_4_fu_754_p1 <= monitor_4(2 - 1 downto 0);
    lane_V_5_fu_768_p1 <= monitor_5(2 - 1 downto 0);
    lane_V_6_fu_782_p1 <= monitor_6(2 - 1 downto 0);
    lane_V_7_fu_796_p1 <= monitor_7(2 - 1 downto 0);
    lane_V_fu_698_p1 <= monitor_0(2 - 1 downto 0);
    nexttocap_1_fu_876_p2 <= std_logic_vector(unsigned(postage_filter_stream_ap_uint_stream_axis_0_tocapture_1) + unsigned(ap_const_lv8_FF));
    nexttocap_2_fu_934_p2 <= std_logic_vector(unsigned(postage_filter_stream_ap_uint_stream_axis_0_tocapture) + unsigned(ap_const_lv8_FF));
    nexttocap_3_fu_992_p2 <= std_logic_vector(unsigned(postage_filter_stream_ap_uint_stream_axis_0_tocapture_6) + unsigned(ap_const_lv8_FF));
    nexttocap_4_fu_1050_p2 <= std_logic_vector(unsigned(postage_filter_stream_ap_uint_stream_axis_0_tocapture_5) + unsigned(ap_const_lv8_FF));
    nexttocap_5_fu_1108_p2 <= std_logic_vector(unsigned(postage_filter_stream_ap_uint_stream_axis_0_tocapture_4) + unsigned(ap_const_lv8_FF));
    nexttocap_6_fu_1166_p2 <= std_logic_vector(unsigned(postage_filter_stream_ap_uint_stream_axis_0_tocapture_3) + unsigned(ap_const_lv8_FF));
    nexttocap_7_fu_1224_p2 <= std_logic_vector(unsigned(postage_filter_stream_ap_uint_stream_axis_0_tocapture_2) + unsigned(ap_const_lv8_FF));
    nexttocap_fu_818_p2 <= std_logic_vector(unsigned(postage_filter_stream_ap_uint_stream_axis_0_tocapture_7) + unsigned(ap_const_lv8_FF));
    p_Result_1_fu_914_p2 <= "1" when (and_ln825_1_fu_909_p2 = ap_const_lv4_0) else "0";
    p_Result_2_fu_972_p2 <= "1" when (and_ln825_2_fu_967_p2 = ap_const_lv4_0) else "0";
    p_Result_3_fu_1030_p2 <= "1" when (and_ln825_3_fu_1025_p2 = ap_const_lv4_0) else "0";
    p_Result_4_fu_1088_p2 <= "1" when (and_ln825_4_fu_1083_p2 = ap_const_lv4_0) else "0";
    p_Result_5_fu_1146_p2 <= "1" when (and_ln825_5_fu_1141_p2 = ap_const_lv4_0) else "0";
    p_Result_6_fu_1204_p2 <= "1" when (and_ln825_6_fu_1199_p2 = ap_const_lv4_0) else "0";
    p_Result_7_fu_1262_p2 <= "1" when (and_ln825_7_fu_1257_p2 = ap_const_lv4_0) else "0";
    p_Result_s_fu_856_p2 <= "1" when (and_ln825_fu_851_p2 = ap_const_lv4_0) else "0";

    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln1065_6_reg_1682)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            postage_filter_stream_ap_uint_stream_axis_0_iqprereg_1_ce0 <= icmp_ln1065_6_reg_1682(0);
        else 
            postage_filter_stream_ap_uint_stream_axis_0_iqprereg_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_1_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln1065_6_reg_1682)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            postage_filter_stream_ap_uint_stream_axis_0_iqprereg_1_we0 <= icmp_ln1065_6_reg_1682(0);
        else 
            postage_filter_stream_ap_uint_stream_axis_0_iqprereg_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln1065_5_reg_1666)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            postage_filter_stream_ap_uint_stream_axis_0_iqprereg_2_ce0 <= icmp_ln1065_5_reg_1666(0);
        else 
            postage_filter_stream_ap_uint_stream_axis_0_iqprereg_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_2_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln1065_5_reg_1666)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            postage_filter_stream_ap_uint_stream_axis_0_iqprereg_2_we0 <= icmp_ln1065_5_reg_1666(0);
        else 
            postage_filter_stream_ap_uint_stream_axis_0_iqprereg_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln1065_4_reg_1650)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            postage_filter_stream_ap_uint_stream_axis_0_iqprereg_3_ce0 <= icmp_ln1065_4_reg_1650(0);
        else 
            postage_filter_stream_ap_uint_stream_axis_0_iqprereg_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_3_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln1065_4_reg_1650)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            postage_filter_stream_ap_uint_stream_axis_0_iqprereg_3_we0 <= icmp_ln1065_4_reg_1650(0);
        else 
            postage_filter_stream_ap_uint_stream_axis_0_iqprereg_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln1065_3_reg_1634)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            postage_filter_stream_ap_uint_stream_axis_0_iqprereg_4_ce0 <= icmp_ln1065_3_reg_1634(0);
        else 
            postage_filter_stream_ap_uint_stream_axis_0_iqprereg_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_4_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln1065_3_reg_1634)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            postage_filter_stream_ap_uint_stream_axis_0_iqprereg_4_we0 <= icmp_ln1065_3_reg_1634(0);
        else 
            postage_filter_stream_ap_uint_stream_axis_0_iqprereg_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln1065_2_reg_1618)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            postage_filter_stream_ap_uint_stream_axis_0_iqprereg_5_ce0 <= icmp_ln1065_2_reg_1618(0);
        else 
            postage_filter_stream_ap_uint_stream_axis_0_iqprereg_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_5_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln1065_2_reg_1618)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            postage_filter_stream_ap_uint_stream_axis_0_iqprereg_5_we0 <= icmp_ln1065_2_reg_1618(0);
        else 
            postage_filter_stream_ap_uint_stream_axis_0_iqprereg_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln1065_1_reg_1602)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            postage_filter_stream_ap_uint_stream_axis_0_iqprereg_6_ce0 <= icmp_ln1065_1_reg_1602(0);
        else 
            postage_filter_stream_ap_uint_stream_axis_0_iqprereg_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_6_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln1065_1_reg_1602)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            postage_filter_stream_ap_uint_stream_axis_0_iqprereg_6_we0 <= icmp_ln1065_1_reg_1602(0);
        else 
            postage_filter_stream_ap_uint_stream_axis_0_iqprereg_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln1065_reg_1586)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_ce0 <= icmp_ln1065_reg_1586(0);
        else 
            postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln1065_reg_1586)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_we0 <= icmp_ln1065_reg_1586(0);
        else 
            postage_filter_stream_ap_uint_stream_axis_0_iqprereg_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln1065_7_reg_1698)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            postage_filter_stream_ap_uint_stream_axis_0_iqprereg_ce0 <= icmp_ln1065_7_reg_1698(0);
        else 
            postage_filter_stream_ap_uint_stream_axis_0_iqprereg_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    postage_filter_stream_ap_uint_stream_axis_0_iqprereg_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln1065_7_reg_1698)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            postage_filter_stream_ap_uint_stream_axis_0_iqprereg_we0 <= icmp_ln1065_7_reg_1698(0);
        else 
            postage_filter_stream_ap_uint_stream_axis_0_iqprereg_we0 <= ap_const_logic_0;
        end if; 
    end process;


    postage_stream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, postage_stream_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            postage_stream_TDATA_blk_n <= postage_stream_TVALID_int_regslice;
        else 
            postage_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    postage_stream_TREADY <= regslice_both_postage_stream_V_data_V_U_ack_in;

    postage_stream_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1))) then 
            postage_stream_TREADY_int_regslice <= ap_const_logic_1;
        else 
            postage_stream_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln825_1_fu_903_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & zext_ln825_1_fu_900_p1(4-1 downto 0)))));
    shl_ln825_2_fu_961_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & zext_ln825_2_fu_958_p1(4-1 downto 0)))));
    shl_ln825_3_fu_1019_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & zext_ln825_3_fu_1016_p1(4-1 downto 0)))));
    shl_ln825_4_fu_1077_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & zext_ln825_4_fu_1074_p1(4-1 downto 0)))));
    shl_ln825_5_fu_1135_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & zext_ln825_5_fu_1132_p1(4-1 downto 0)))));
    shl_ln825_6_fu_1193_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & zext_ln825_6_fu_1190_p1(4-1 downto 0)))));
    shl_ln825_7_fu_1251_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & zext_ln825_7_fu_1248_p1(4-1 downto 0)))));
    shl_ln825_fu_845_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & zext_ln825_fu_842_p1(4-1 downto 0)))));
    tmp_last_V_1_fu_882_p2 <= "1" when (postage_filter_stream_ap_uint_stream_axis_0_tocapture_1 = ap_const_lv8_1) else "0";
    tmp_last_V_2_fu_940_p2 <= "1" when (postage_filter_stream_ap_uint_stream_axis_0_tocapture = ap_const_lv8_1) else "0";
    tmp_last_V_3_fu_998_p2 <= "1" when (postage_filter_stream_ap_uint_stream_axis_0_tocapture_6 = ap_const_lv8_1) else "0";
    tmp_last_V_4_fu_1056_p2 <= "1" when (postage_filter_stream_ap_uint_stream_axis_0_tocapture_5 = ap_const_lv8_1) else "0";
    tmp_last_V_5_fu_1114_p2 <= "1" when (postage_filter_stream_ap_uint_stream_axis_0_tocapture_4 = ap_const_lv8_1) else "0";
    tmp_last_V_6_fu_1172_p2 <= "1" when (postage_filter_stream_ap_uint_stream_axis_0_tocapture_3 = ap_const_lv8_1) else "0";
    tmp_last_V_7_fu_1230_p2 <= "1" when (postage_filter_stream_ap_uint_stream_axis_0_tocapture_2 = ap_const_lv8_1) else "0";
    tmp_last_V_fu_824_p2 <= "1" when (postage_filter_stream_ap_uint_stream_axis_0_tocapture_7 = ap_const_lv8_1) else "0";
    zext_ln825_1_fu_900_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lane_V_1_reg_1509),4));
    zext_ln825_2_fu_958_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lane_V_2_reg_1520),4));
    zext_ln825_3_fu_1016_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lane_V_3_reg_1531),4));
    zext_ln825_4_fu_1074_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lane_V_4_reg_1542),4));
    zext_ln825_5_fu_1132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lane_V_5_reg_1553),4));
    zext_ln825_6_fu_1190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lane_V_6_reg_1564),4));
    zext_ln825_7_fu_1248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lane_V_7_reg_1575),4));
    zext_ln825_fu_842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lane_V_reg_1498),4));
end behav;
