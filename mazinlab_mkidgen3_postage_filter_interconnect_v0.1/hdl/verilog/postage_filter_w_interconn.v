// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="postage_filter_w_interconn_postage_filter_w_interconn,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.671570,HLS_SYN_LAT=8,HLS_SYN_TPT=1,HLS_SYN_MEM=16,HLS_SYN_DSP=0,HLS_SYN_FF=4170,HLS_SYN_LUT=3141,HLS_VERSION=2022_1}" *)

module postage_filter_w_interconn (
        ap_clk,
        ap_rst_n,
        postage_stream_TDATA,
        postage_stream_TVALID,
        postage_stream_TREADY,
        postage_stream_TKEEP,
        postage_stream_TSTRB,
        postage_stream_TUSER,
        postage_stream_TLAST,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TKEEP,
        out_r_TSTRB,
        out_r_TUSER,
        out_r_TLAST,
        overflow,
        overflow_ap_vld,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [191:0] postage_stream_TDATA;
input   postage_stream_TVALID;
output   postage_stream_TREADY;
input  [23:0] postage_stream_TKEEP;
input  [23:0] postage_stream_TSTRB;
input  [12:0] postage_stream_TUSER;
input  [0:0] postage_stream_TLAST;
output  [31:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [3:0] out_r_TKEEP;
output  [3:0] out_r_TSTRB;
output  [2:0] out_r_TUSER;
output  [0:0] out_r_TLAST;
output   overflow;
output   overflow_ap_vld;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

reg overflow_ap_vld;

 reg    ap_rst_n_inv;
wire   [11:0] monitor_0;
wire   [11:0] monitor_1;
wire   [11:0] monitor_2;
wire   [11:0] monitor_3;
wire   [11:0] monitor_4;
wire   [11:0] monitor_5;
wire   [11:0] monitor_6;
wire   [11:0] monitor_7;
reg   [7:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_7;
reg   [7:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_6;
reg   [0:0] packet_in_flight;
reg   [7:0] sending_i;
reg   [7:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_5;
reg   [7:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_4;
reg   [7:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_3;
reg   [7:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_2;
reg   [7:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_1;
reg   [7:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture;
reg    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_7_ce0;
reg    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_7_we0;
wire   [31:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_7_q0;
reg    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_1_ce0;
reg    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_1_we0;
wire   [31:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_1_q0;
reg    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_ce0;
reg    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_we0;
wire   [31:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_q0;
reg    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_6_ce0;
reg    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_6_we0;
wire   [31:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_6_q0;
reg    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_5_ce0;
reg    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_5_we0;
wire   [31:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_5_q0;
reg    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_4_ce0;
reg    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_4_we0;
wire   [31:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_4_q0;
reg    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_3_ce0;
reg    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_3_we0;
wire   [31:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_3_q0;
reg    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_2_ce0;
reg    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_2_we0;
wire   [31:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_2_q0;
reg    postage_stream_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    out_r_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter7;
reg   [0:0] trunc_ln164_1_reg_2571;
reg   [0:0] trunc_ln164_1_reg_2571_pp0_iter6_reg;
reg    ap_enable_reg_pp0_iter8;
reg   [0:0] trunc_ln164_1_reg_2571_pp0_iter7_reg;
wire   [8:0] group_V_fu_639_p1;
reg   [8:0] group_V_reg_2180;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
reg    ap_block_state8_pp0_stage0_iter7;
reg    ap_block_state8_io;
wire    regslice_both_out_r_V_data_V_U_apdone_blk;
reg    ap_block_state9_pp0_stage0_iter8;
reg    ap_block_state9_io;
reg    ap_block_pp0_stage0_11001;
reg   [3:0] trigger_V_reg_2192;
reg   [3:0] trigger_V_reg_2192_pp0_iter1_reg;
reg   [31:0] x_reg_2204;
reg   [31:0] x_reg_2204_pp0_iter1_reg;
reg   [31:0] x_1_reg_2216;
reg   [31:0] x_1_reg_2216_pp0_iter1_reg;
reg   [31:0] x_2_reg_2228;
reg   [31:0] x_2_reg_2228_pp0_iter1_reg;
reg   [31:0] x_3_reg_2240;
reg   [31:0] x_3_reg_2240_pp0_iter1_reg;
wire   [1:0] lane_V_fu_693_p1;
reg   [1:0] lane_V_reg_2252;
reg   [1:0] lane_V_reg_2252_pp0_iter1_reg;
reg   [8:0] gid_V_reg_2258;
wire   [1:0] lane_V_1_fu_707_p1;
reg   [1:0] lane_V_1_reg_2263;
reg   [1:0] lane_V_1_reg_2263_pp0_iter1_reg;
reg   [8:0] gid_V_1_reg_2269;
wire   [1:0] lane_V_2_fu_721_p1;
reg   [1:0] lane_V_2_reg_2274;
reg   [1:0] lane_V_2_reg_2274_pp0_iter1_reg;
reg   [8:0] gid_V_2_reg_2280;
wire   [1:0] lane_V_3_fu_735_p1;
reg   [1:0] lane_V_3_reg_2285;
reg   [1:0] lane_V_3_reg_2285_pp0_iter1_reg;
reg   [8:0] gid_V_3_reg_2291;
wire   [1:0] lane_V_4_fu_749_p1;
reg   [1:0] lane_V_4_reg_2296;
reg   [1:0] lane_V_4_reg_2296_pp0_iter1_reg;
reg   [8:0] gid_V_4_reg_2302;
wire   [1:0] lane_V_5_fu_763_p1;
reg   [1:0] lane_V_5_reg_2307;
reg   [1:0] lane_V_5_reg_2307_pp0_iter1_reg;
reg   [8:0] gid_V_5_reg_2313;
wire   [1:0] lane_V_6_fu_777_p1;
reg   [1:0] lane_V_6_reg_2318;
reg   [1:0] lane_V_6_reg_2318_pp0_iter1_reg;
reg   [8:0] gid_V_6_reg_2324;
wire   [1:0] lane_V_7_fu_791_p1;
reg   [1:0] lane_V_7_reg_2329;
reg   [1:0] lane_V_7_reg_2329_pp0_iter1_reg;
reg   [8:0] gid_V_7_reg_2335;
wire   [0:0] icmp_ln1065_fu_805_p2;
reg   [0:0] icmp_ln1065_reg_2340;
reg   [0:0] icmp_ln1065_reg_2340_pp0_iter2_reg;
reg   [0:0] icmp_ln1065_reg_2340_pp0_iter3_reg;
wire   [0:0] icmp_ln1065_1_fu_809_p2;
reg   [0:0] icmp_ln1065_1_reg_2345;
reg   [0:0] icmp_ln1065_1_reg_2345_pp0_iter2_reg;
reg   [0:0] icmp_ln1065_1_reg_2345_pp0_iter3_reg;
wire   [0:0] icmp_ln1065_2_fu_813_p2;
reg   [0:0] icmp_ln1065_2_reg_2350;
reg   [0:0] icmp_ln1065_2_reg_2350_pp0_iter2_reg;
reg   [0:0] icmp_ln1065_2_reg_2350_pp0_iter3_reg;
reg   [0:0] icmp_ln1065_2_reg_2350_pp0_iter4_reg;
wire   [0:0] icmp_ln1065_3_fu_817_p2;
reg   [0:0] icmp_ln1065_3_reg_2355;
reg   [0:0] icmp_ln1065_3_reg_2355_pp0_iter2_reg;
reg   [0:0] icmp_ln1065_3_reg_2355_pp0_iter3_reg;
reg   [0:0] icmp_ln1065_3_reg_2355_pp0_iter4_reg;
reg   [0:0] icmp_ln1065_3_reg_2355_pp0_iter5_reg;
wire   [0:0] icmp_ln1065_4_fu_821_p2;
reg   [0:0] icmp_ln1065_4_reg_2360;
reg   [0:0] icmp_ln1065_4_reg_2360_pp0_iter2_reg;
reg   [0:0] icmp_ln1065_4_reg_2360_pp0_iter3_reg;
reg   [0:0] icmp_ln1065_4_reg_2360_pp0_iter4_reg;
reg   [0:0] icmp_ln1065_4_reg_2360_pp0_iter5_reg;
wire   [0:0] icmp_ln1065_5_fu_825_p2;
reg   [0:0] icmp_ln1065_5_reg_2365;
reg   [0:0] icmp_ln1065_5_reg_2365_pp0_iter2_reg;
reg   [0:0] icmp_ln1065_5_reg_2365_pp0_iter3_reg;
reg   [0:0] icmp_ln1065_5_reg_2365_pp0_iter4_reg;
reg   [0:0] icmp_ln1065_5_reg_2365_pp0_iter5_reg;
reg   [0:0] icmp_ln1065_5_reg_2365_pp0_iter6_reg;
wire   [0:0] icmp_ln1065_6_fu_829_p2;
reg   [0:0] icmp_ln1065_6_reg_2370;
reg   [0:0] icmp_ln1065_6_reg_2370_pp0_iter2_reg;
reg   [0:0] icmp_ln1065_6_reg_2370_pp0_iter3_reg;
reg   [0:0] icmp_ln1065_6_reg_2370_pp0_iter4_reg;
reg   [0:0] icmp_ln1065_6_reg_2370_pp0_iter5_reg;
reg   [0:0] icmp_ln1065_6_reg_2370_pp0_iter6_reg;
reg   [0:0] icmp_ln1065_6_reg_2370_pp0_iter7_reg;
wire   [0:0] icmp_ln1065_7_fu_833_p2;
reg   [0:0] icmp_ln1065_7_reg_2375;
reg   [0:0] icmp_ln1065_7_reg_2375_pp0_iter2_reg;
reg   [0:0] icmp_ln1065_7_reg_2375_pp0_iter3_reg;
reg   [0:0] icmp_ln1065_7_reg_2375_pp0_iter4_reg;
reg   [0:0] icmp_ln1065_7_reg_2375_pp0_iter5_reg;
reg   [0:0] icmp_ln1065_7_reg_2375_pp0_iter6_reg;
reg   [0:0] icmp_ln1065_7_reg_2375_pp0_iter7_reg;
reg   [31:0] DataOut_reg_2380;
wire   [0:0] tmp_last_fu_865_p2;
reg   [0:0] tmp_last_reg_2385;
wire   [0:0] icmp_ln255_fu_871_p2;
reg   [0:0] icmp_ln255_reg_2390;
reg   [0:0] icmp_ln255_reg_2390_pp0_iter3_reg;
reg   [31:0] DataOut_1_reg_2397;
wire   [0:0] tmp_last_1_fu_937_p2;
reg   [0:0] tmp_last_1_reg_2403;
wire   [0:0] icmp_ln255_1_fu_943_p2;
reg   [0:0] icmp_ln255_1_reg_2408;
reg   [0:0] icmp_ln255_1_reg_2408_pp0_iter3_reg;
reg   [31:0] DataOut_2_reg_2415;
wire   [0:0] tmp_last_2_fu_1009_p2;
reg   [0:0] tmp_last_2_reg_2421;
wire   [0:0] icmp_ln255_2_fu_1015_p2;
reg   [0:0] icmp_ln255_2_reg_2426;
reg   [0:0] icmp_ln255_2_reg_2426_pp0_iter3_reg;
reg   [0:0] icmp_ln255_2_reg_2426_pp0_iter4_reg;
reg   [31:0] DataOut_3_reg_2433;
wire   [0:0] tmp_last_3_fu_1081_p2;
reg   [0:0] tmp_last_3_reg_2439;
wire   [0:0] icmp_ln255_3_fu_1087_p2;
reg   [0:0] icmp_ln255_3_reg_2444;
reg   [0:0] icmp_ln255_3_reg_2444_pp0_iter3_reg;
reg   [0:0] icmp_ln255_3_reg_2444_pp0_iter4_reg;
reg   [0:0] icmp_ln255_3_reg_2444_pp0_iter5_reg;
reg   [31:0] DataOut_4_reg_2451;
wire   [0:0] tmp_last_4_fu_1153_p2;
reg   [0:0] tmp_last_4_reg_2457;
wire   [0:0] icmp_ln255_4_fu_1159_p2;
reg   [0:0] icmp_ln255_4_reg_2462;
reg   [0:0] icmp_ln255_4_reg_2462_pp0_iter3_reg;
reg   [0:0] icmp_ln255_4_reg_2462_pp0_iter4_reg;
reg   [0:0] icmp_ln255_4_reg_2462_pp0_iter5_reg;
reg   [31:0] DataOut_5_reg_2469;
wire   [0:0] tmp_last_5_fu_1225_p2;
reg   [0:0] tmp_last_5_reg_2475;
wire   [0:0] icmp_ln255_5_fu_1231_p2;
reg   [0:0] icmp_ln255_5_reg_2480;
reg   [0:0] icmp_ln255_5_reg_2480_pp0_iter3_reg;
reg   [0:0] icmp_ln255_5_reg_2480_pp0_iter4_reg;
reg   [0:0] icmp_ln255_5_reg_2480_pp0_iter5_reg;
reg   [0:0] icmp_ln255_5_reg_2480_pp0_iter6_reg;
reg   [31:0] DataOut_6_reg_2487;
wire   [0:0] tmp_last_6_fu_1297_p2;
reg   [0:0] tmp_last_6_reg_2493;
wire   [0:0] icmp_ln255_6_fu_1303_p2;
reg   [0:0] icmp_ln255_6_reg_2498;
reg   [0:0] icmp_ln255_6_reg_2498_pp0_iter3_reg;
reg   [0:0] icmp_ln255_6_reg_2498_pp0_iter4_reg;
reg   [0:0] icmp_ln255_6_reg_2498_pp0_iter5_reg;
reg   [0:0] icmp_ln255_6_reg_2498_pp0_iter6_reg;
reg   [0:0] icmp_ln255_6_reg_2498_pp0_iter7_reg;
reg   [31:0] DataOut_7_reg_2505;
wire   [0:0] tmp_last_7_fu_1369_p2;
reg   [0:0] tmp_last_7_reg_2511;
wire   [0:0] icmp_ln255_7_fu_1375_p2;
reg   [0:0] icmp_ln255_7_reg_2516;
reg   [0:0] icmp_ln255_7_reg_2516_pp0_iter3_reg;
reg   [0:0] icmp_ln255_7_reg_2516_pp0_iter4_reg;
reg   [0:0] icmp_ln255_7_reg_2516_pp0_iter5_reg;
reg   [0:0] icmp_ln255_7_reg_2516_pp0_iter6_reg;
reg   [0:0] icmp_ln255_7_reg_2516_pp0_iter7_reg;
wire   [0:0] p_overflow_fu_1422_p2;
reg   [0:0] p_overflow_reg_2523;
reg   [0:0] tmp_7_reg_2528;
reg   [0:0] tmp_4_reg_2533;
reg   [0:0] tmp_4_reg_2533_pp0_iter4_reg;
reg   [0:0] tmp_s_reg_2538;
reg   [0:0] tmp_s_reg_2538_pp0_iter4_reg;
reg   [0:0] tmp_10_reg_2543;
reg   [0:0] tmp_10_reg_2543_pp0_iter4_reg;
reg   [0:0] tmp_10_reg_2543_pp0_iter5_reg;
reg   [0:0] tmp_13_reg_2548;
reg   [0:0] tmp_13_reg_2548_pp0_iter4_reg;
reg   [0:0] tmp_13_reg_2548_pp0_iter5_reg;
reg   [0:0] tmp_13_reg_2548_pp0_iter6_reg;
reg   [0:0] tmp_16_reg_2553;
reg   [0:0] tmp_16_reg_2553_pp0_iter4_reg;
reg   [0:0] tmp_16_reg_2553_pp0_iter5_reg;
reg   [0:0] tmp_16_reg_2553_pp0_iter6_reg;
reg   [0:0] tmp_19_reg_2558;
reg   [0:0] tmp_19_reg_2558_pp0_iter4_reg;
reg   [0:0] tmp_19_reg_2558_pp0_iter5_reg;
reg   [0:0] tmp_19_reg_2558_pp0_iter6_reg;
reg   [0:0] tmp_19_reg_2558_pp0_iter7_reg;
wire   [0:0] p_overflow_2_fu_1727_p2;
wire   [0:0] trunc_ln164_1_fu_2057_p1;
reg   [0:0] trunc_ln164_1_reg_2571_pp0_iter5_reg;
reg   [31:0] foo_data_reg_2578;
reg   [31:0] foo_data_reg_2578_pp0_iter5_reg;
reg   [31:0] foo_data_reg_2578_pp0_iter6_reg;
reg   [2:0] foo_user_V_reg_2583;
reg   [2:0] foo_user_V_reg_2583_pp0_iter5_reg;
reg   [2:0] foo_user_V_reg_2583_pp0_iter6_reg;
wire   [0:0] foo_last_fu_2091_p3;
reg   [0:0] foo_last_reg_2588;
reg   [0:0] foo_last_reg_2588_pp0_iter5_reg;
reg   [0:0] foo_last_reg_2588_pp0_iter6_reg;
wire   [0:0] p_overflow_6_fu_2128_p2;
reg   [0:0] p_overflow_6_reg_2593;
wire   [0:0] p_overflow_8_fu_2139_p2;
wire   [0:0] p_overflow_12_fu_2162_p2;
reg   [0:0] p_overflow_12_reg_2603;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg   [0:0] ap_phi_mux_p_overflow_1_phi_fu_504_p6;
reg   [0:0] ap_phi_reg_pp0_iter4_p_overflow_1_reg_500;
wire   [0:0] ap_phi_reg_pp0_iter0_p_overflow_1_reg_500;
reg   [0:0] ap_phi_reg_pp0_iter1_p_overflow_1_reg_500;
reg   [0:0] ap_phi_reg_pp0_iter2_p_overflow_1_reg_500;
reg   [0:0] ap_phi_reg_pp0_iter3_p_overflow_1_reg_500;
reg   [72:0] ap_phi_mux_empty_46_phi_fu_518_p16;
wire   [72:0] tmp_28_fu_2007_p5;
wire   [72:0] ap_phi_reg_pp0_iter4_empty_46_reg_515;
wire   [2:0] trunc_ln164_fu_1757_p1;
wire   [72:0] tmp_33_fu_1970_p5;
wire   [72:0] tmp_35_fu_1933_p5;
wire   [72:0] tmp_37_fu_1896_p5;
wire   [72:0] tmp_39_fu_1859_p5;
wire   [72:0] tmp_41_fu_1822_p5;
wire   [72:0] tmp_43_fu_1785_p5;
wire   [72:0] tmp_22_fu_2044_p5;
wire   [0:0] ap_phi_reg_pp0_iter0_p_overflow_3_reg_536;
reg   [0:0] ap_phi_reg_pp0_iter1_p_overflow_3_reg_536;
reg   [0:0] ap_phi_reg_pp0_iter2_p_overflow_3_reg_536;
reg   [0:0] ap_phi_reg_pp0_iter3_p_overflow_3_reg_536;
reg   [0:0] ap_phi_reg_pp0_iter4_p_overflow_3_reg_536;
reg   [0:0] ap_phi_reg_pp0_iter5_p_overflow_3_reg_536;
reg   [0:0] ap_phi_mux_p_overflow_5_phi_fu_552_p6;
wire   [0:0] p_overflow_4_fu_2116_p2;
wire   [0:0] ap_phi_reg_pp0_iter5_p_overflow_5_reg_549;
reg   [0:0] ap_phi_mux_p_overflow_7_phi_fu_566_p6;
reg   [0:0] ap_phi_reg_pp0_iter6_p_overflow_7_reg_563;
wire   [0:0] ap_phi_reg_pp0_iter0_p_overflow_7_reg_563;
reg   [0:0] ap_phi_reg_pp0_iter1_p_overflow_7_reg_563;
reg   [0:0] ap_phi_reg_pp0_iter2_p_overflow_7_reg_563;
reg   [0:0] ap_phi_reg_pp0_iter3_p_overflow_7_reg_563;
reg   [0:0] ap_phi_reg_pp0_iter4_p_overflow_7_reg_563;
reg   [0:0] ap_phi_reg_pp0_iter5_p_overflow_7_reg_563;
wire   [0:0] ap_phi_reg_pp0_iter0_p_overflow_9_reg_577;
reg   [0:0] ap_phi_reg_pp0_iter1_p_overflow_9_reg_577;
reg   [0:0] ap_phi_reg_pp0_iter2_p_overflow_9_reg_577;
reg   [0:0] ap_phi_reg_pp0_iter3_p_overflow_9_reg_577;
reg   [0:0] ap_phi_reg_pp0_iter4_p_overflow_9_reg_577;
reg   [0:0] ap_phi_reg_pp0_iter5_p_overflow_9_reg_577;
reg   [0:0] ap_phi_reg_pp0_iter6_p_overflow_9_reg_577;
reg   [0:0] ap_phi_reg_pp0_iter7_p_overflow_9_reg_577;
reg   [0:0] ap_phi_mux_p_overflow_11_phi_fu_593_p6;
wire   [0:0] p_overflow_10_fu_2150_p2;
wire   [0:0] ap_phi_reg_pp0_iter7_p_overflow_11_reg_590;
reg   [0:0] ap_phi_mux_p_overflow_13_phi_fu_607_p6;
reg   [0:0] ap_phi_reg_pp0_iter8_p_overflow_13_reg_604;
wire   [0:0] ap_phi_reg_pp0_iter0_p_overflow_13_reg_604;
reg   [0:0] ap_phi_reg_pp0_iter1_p_overflow_13_reg_604;
reg   [0:0] ap_phi_reg_pp0_iter2_p_overflow_13_reg_604;
reg   [0:0] ap_phi_reg_pp0_iter3_p_overflow_13_reg_604;
reg   [0:0] ap_phi_reg_pp0_iter4_p_overflow_13_reg_604;
reg   [0:0] ap_phi_reg_pp0_iter5_p_overflow_13_reg_604;
reg   [0:0] ap_phi_reg_pp0_iter6_p_overflow_13_reg_604;
reg   [0:0] ap_phi_reg_pp0_iter7_p_overflow_13_reg_604;
reg   [0:0] ap_phi_mux_p_overflow_15_phi_fu_620_p6;
wire   [0:0] p_overflow_14_fu_2173_p2;
wire   [0:0] ap_phi_reg_pp0_iter8_p_overflow_15_reg_617;
wire   [7:0] nexttocap_fu_859_p2;
wire   [0:0] p_Result_s_fu_897_p2;
wire   [7:0] nexttocap_1_fu_931_p2;
wire   [0:0] p_Result_1_fu_969_p2;
wire   [0:0] packet_in_flight_load_load_fu_2061_p1;
wire   [7:0] sending_plus1_fu_1749_p3;
wire   [7:0] nexttocap_2_fu_1003_p2;
wire   [0:0] p_Result_2_fu_1041_p2;
wire   [7:0] nexttocap_3_fu_1075_p2;
wire   [0:0] p_Result_3_fu_1113_p2;
wire   [7:0] nexttocap_4_fu_1147_p2;
wire   [0:0] p_Result_4_fu_1185_p2;
wire   [7:0] nexttocap_5_fu_1219_p2;
wire   [0:0] p_Result_5_fu_1257_p2;
wire   [7:0] nexttocap_6_fu_1291_p2;
wire   [0:0] p_Result_6_fu_1329_p2;
wire   [7:0] nexttocap_7_fu_1363_p2;
wire   [0:0] p_Result_7_fu_1401_p2;
wire   [35:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_7_din;
wire    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_7_full_n;
reg    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_7_write;
reg    ap_block_pp0_stage0_01001;
wire   [35:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_6_din;
wire    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_6_full_n;
reg    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_6_write;
wire   [35:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_5_din;
wire    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_5_full_n;
reg    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_5_write;
wire   [35:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_4_din;
wire    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_4_full_n;
reg    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_4_write;
wire   [35:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_3_din;
wire    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_3_full_n;
reg    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_3_write;
wire   [35:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_2_din;
wire    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_2_full_n;
reg    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_2_write;
wire   [35:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_1_din;
wire    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_1_full_n;
reg    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_1_write;
wire   [35:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_din;
wire    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_full_n;
reg    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_write;
wire   [0:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_1_read_nbread_fu_424_p2_0;
wire   [35:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_1_dout;
wire    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_1_empty_n;
reg    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_1_read;
wire   [0:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_2_read_nbread_fu_430_p2_0;
wire   [35:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_2_dout;
wire    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_2_empty_n;
reg    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_2_read;
wire   [0:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_3_read_nbread_fu_436_p2_0;
wire   [35:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_3_dout;
wire    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_3_empty_n;
reg    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_3_read;
wire   [0:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_4_read_nbread_fu_442_p2_0;
wire   [35:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_4_dout;
wire    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_4_empty_n;
reg    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_4_read;
wire   [0:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_5_read_nbread_fu_448_p2_0;
wire   [35:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_5_dout;
wire    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_5_empty_n;
reg    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_5_read;
wire   [0:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_6_read_nbread_fu_454_p2_0;
wire   [35:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_6_dout;
wire    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_6_empty_n;
reg    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_6_read;
wire   [0:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_7_read_nbread_fu_460_p2_0;
wire   [35:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_7_dout;
wire    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_7_empty_n;
reg    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_7_read;
wire   [0:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_read_nbread_fu_466_p2_0;
wire   [35:0] postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_dout;
wire    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_empty_n;
reg    postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_read;
wire   [31:0] DataIn_assign_fu_837_p6;
wire   [31:0] DataIn_assign_1_fu_909_p6;
wire   [31:0] DataIn_assign_2_fu_981_p6;
wire   [31:0] DataIn_assign_3_fu_1053_p6;
wire   [31:0] DataIn_assign_4_fu_1125_p6;
wire   [31:0] DataIn_assign_5_fu_1197_p6;
wire   [31:0] DataIn_assign_6_fu_1269_p6;
wire   [31:0] DataIn_assign_7_fu_1341_p6;
wire   [3:0] zext_ln825_fu_883_p1;
wire   [3:0] shl_ln825_fu_886_p2;
wire   [3:0] and_ln825_fu_892_p2;
wire   [3:0] zext_ln825_1_fu_955_p1;
wire   [3:0] shl_ln825_1_fu_958_p2;
wire   [3:0] and_ln825_1_fu_964_p2;
wire   [3:0] zext_ln825_2_fu_1027_p1;
wire   [3:0] shl_ln825_2_fu_1030_p2;
wire   [3:0] and_ln825_2_fu_1036_p2;
wire   [3:0] zext_ln825_3_fu_1099_p1;
wire   [3:0] shl_ln825_3_fu_1102_p2;
wire   [3:0] and_ln825_3_fu_1108_p2;
wire   [3:0] zext_ln825_4_fu_1171_p1;
wire   [3:0] shl_ln825_4_fu_1174_p2;
wire   [3:0] and_ln825_4_fu_1180_p2;
wire   [3:0] zext_ln825_5_fu_1243_p1;
wire   [3:0] shl_ln825_5_fu_1246_p2;
wire   [3:0] and_ln825_5_fu_1252_p2;
wire   [3:0] zext_ln825_6_fu_1315_p1;
wire   [3:0] shl_ln825_6_fu_1318_p2;
wire   [3:0] and_ln825_6_fu_1324_p2;
wire   [3:0] zext_ln825_7_fu_1387_p1;
wire   [3:0] shl_ln825_7_fu_1390_p2;
wire   [3:0] and_ln825_7_fu_1396_p2;
wire   [0:0] p_overflow_fu_1422_p0;
wire   [40:0] tmp_fu_1428_p4;
wire   [40:0] or_ln185_fu_1436_p2;
wire   [0:0] tmp_3_fu_1452_p3;
wire   [2:0] tmp_1_fu_1442_p4;
wire   [40:0] tmp_5_fu_1470_p4;
wire   [40:0] or_ln185_1_fu_1478_p2;
wire   [0:0] tmp_8_fu_1494_p3;
wire   [2:0] tmp_6_fu_1484_p4;
wire   [40:0] tmp_9_fu_1512_p4;
wire   [40:0] or_ln185_2_fu_1520_p2;
wire   [0:0] tmp_12_fu_1536_p3;
wire   [2:0] tmp_11_fu_1526_p4;
wire   [40:0] tmp_14_fu_1554_p4;
wire   [40:0] or_ln185_3_fu_1562_p2;
wire   [0:0] tmp_17_fu_1578_p3;
wire   [2:0] tmp_15_fu_1568_p4;
wire   [40:0] tmp_18_fu_1596_p4;
wire   [40:0] or_ln185_4_fu_1604_p2;
wire   [0:0] tmp_21_fu_1620_p3;
wire   [2:0] tmp_20_fu_1610_p4;
wire   [40:0] tmp_23_fu_1638_p4;
wire   [40:0] or_ln185_5_fu_1646_p2;
wire   [0:0] tmp_25_fu_1662_p3;
wire   [2:0] tmp_24_fu_1652_p4;
wire   [40:0] tmp_26_fu_1680_p4;
wire   [40:0] or_ln185_6_fu_1688_p2;
wire   [0:0] tmp_29_fu_1704_p3;
wire   [2:0] tmp_27_fu_1694_p4;
wire   [0:0] xor_ln261_fu_1722_p2;
wire   [0:0] icmp_ln288_fu_1737_p2;
wire   [7:0] add_ln288_fu_1743_p2;
wire   [34:0] empty_44_fu_1777_p1;
wire   [0:0] tmp_42_fu_1769_p3;
wire   [39:0] tmp_42_cast_fu_1781_p1;
wire   [34:0] empty_43_fu_1814_p1;
wire   [0:0] tmp_40_fu_1806_p3;
wire   [39:0] tmp_40_cast_fu_1818_p1;
wire   [34:0] empty_42_fu_1851_p1;
wire   [0:0] tmp_38_fu_1843_p3;
wire   [39:0] tmp_38_cast_fu_1855_p1;
wire   [34:0] empty_41_fu_1888_p1;
wire   [0:0] tmp_36_fu_1880_p3;
wire   [39:0] tmp_36_cast_fu_1892_p1;
wire   [34:0] empty_40_fu_1925_p1;
wire   [0:0] tmp_34_fu_1917_p3;
wire   [39:0] tmp_34_cast_fu_1929_p1;
wire   [34:0] empty_39_fu_1962_p1;
wire   [0:0] tmp_32_fu_1954_p3;
wire   [39:0] tmp_32_cast_fu_1966_p1;
wire   [34:0] empty_38_fu_1999_p1;
wire   [0:0] tmp_31_fu_1991_p3;
wire   [39:0] tmp_31_cast_fu_2003_p1;
wire   [34:0] empty_45_fu_2036_p1;
wire   [0:0] tmp_30_fu_2028_p3;
wire   [39:0] tmp_30_cast_fu_2040_p1;
wire   [0:0] xor_ln261_1_fu_2111_p2;
wire   [0:0] xor_ln261_2_fu_2123_p2;
wire   [0:0] xor_ln261_3_fu_2134_p2;
wire   [0:0] xor_ln261_4_fu_2145_p2;
wire   [0:0] xor_ln261_5_fu_2157_p2;
wire   [0:0] xor_ln261_6_fu_2168_p2;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_postage_stream_V_data_V_U_apdone_blk;
wire   [191:0] postage_stream_TDATA_int_regslice;
wire    postage_stream_TVALID_int_regslice;
reg    postage_stream_TREADY_int_regslice;
wire    regslice_both_postage_stream_V_data_V_U_ack_in;
wire    regslice_both_postage_stream_V_keep_V_U_apdone_blk;
wire   [23:0] postage_stream_TKEEP_int_regslice;
wire    regslice_both_postage_stream_V_keep_V_U_vld_out;
wire    regslice_both_postage_stream_V_keep_V_U_ack_in;
wire    regslice_both_postage_stream_V_strb_V_U_apdone_blk;
wire   [23:0] postage_stream_TSTRB_int_regslice;
wire    regslice_both_postage_stream_V_strb_V_U_vld_out;
wire    regslice_both_postage_stream_V_strb_V_U_ack_in;
wire    regslice_both_postage_stream_V_user_V_U_apdone_blk;
wire   [12:0] postage_stream_TUSER_int_regslice;
wire    regslice_both_postage_stream_V_user_V_U_vld_out;
wire    regslice_both_postage_stream_V_user_V_U_ack_in;
wire    regslice_both_postage_stream_V_last_V_U_apdone_blk;
wire   [0:0] postage_stream_TLAST_int_regslice;
wire    regslice_both_postage_stream_V_last_V_U_vld_out;
wire    regslice_both_postage_stream_V_last_V_U_ack_in;
reg    out_r_TVALID_int_regslice;
wire    out_r_TREADY_int_regslice;
wire    regslice_both_out_r_V_data_V_U_vld_out;
wire    regslice_both_out_r_V_keep_V_U_apdone_blk;
wire    regslice_both_out_r_V_keep_V_U_ack_in_dummy;
wire    regslice_both_out_r_V_keep_V_U_vld_out;
wire    regslice_both_out_r_V_strb_V_U_apdone_blk;
wire    regslice_both_out_r_V_strb_V_U_ack_in_dummy;
wire    regslice_both_out_r_V_strb_V_U_vld_out;
wire    regslice_both_out_r_V_user_V_U_apdone_blk;
wire    regslice_both_out_r_V_user_V_U_ack_in_dummy;
wire    regslice_both_out_r_V_user_V_U_vld_out;
wire    regslice_both_out_r_V_last_V_U_apdone_blk;
wire    regslice_both_out_r_V_last_V_U_ack_in_dummy;
wire    regslice_both_out_r_V_last_V_U_vld_out;
reg    ap_condition_588;
reg    ap_condition_1805;
reg    ap_condition_1795;
reg    ap_condition_1785;
reg    ap_condition_1775;
reg    ap_condition_1765;
reg    ap_condition_1755;
reg    ap_condition_1745;
reg    ap_condition_1736;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_7 = 8'd0;
#0 postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_6 = 8'd0;
#0 packet_in_flight = 1'd0;
#0 sending_i = 8'd0;
#0 postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_5 = 8'd0;
#0 postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_4 = 8'd0;
#0 postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_3 = 8'd0;
#0 postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_2 = 8'd0;
#0 postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_1 = 8'd0;
#0 postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture = 8'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

postage_filter_w_interconn_postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_7_SHIFTbkb #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(4'd8),
    .ce0(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_7_ce0),
    .we0(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_7_we0),
    .d0(DataIn_assign_fu_837_p6),
    .q0(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_7_q0)
);

postage_filter_w_interconn_postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_7_SHIFTbkb #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(4'd8),
    .ce0(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_1_ce0),
    .we0(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_1_we0),
    .d0(DataIn_assign_1_fu_909_p6),
    .q0(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_1_q0)
);

postage_filter_w_interconn_postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_7_SHIFTbkb #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(4'd8),
    .ce0(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_ce0),
    .we0(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_we0),
    .d0(DataIn_assign_2_fu_981_p6),
    .q0(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_q0)
);

postage_filter_w_interconn_postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_7_SHIFTbkb #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(4'd8),
    .ce0(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_6_ce0),
    .we0(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_6_we0),
    .d0(DataIn_assign_3_fu_1053_p6),
    .q0(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_6_q0)
);

postage_filter_w_interconn_postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_7_SHIFTbkb #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(4'd8),
    .ce0(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_5_ce0),
    .we0(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_5_we0),
    .d0(DataIn_assign_4_fu_1125_p6),
    .q0(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_5_q0)
);

postage_filter_w_interconn_postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_7_SHIFTbkb #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(4'd8),
    .ce0(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_4_ce0),
    .we0(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_4_we0),
    .d0(DataIn_assign_5_fu_1197_p6),
    .q0(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_4_q0)
);

postage_filter_w_interconn_postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_7_SHIFTbkb #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(4'd8),
    .ce0(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_3_ce0),
    .we0(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_3_we0),
    .d0(DataIn_assign_6_fu_1269_p6),
    .q0(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_3_q0)
);

postage_filter_w_interconn_postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_7_SHIFTbkb #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(4'd8),
    .ce0(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_2_ce0),
    .we0(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_2_we0),
    .d0(DataIn_assign_7_fu_1341_p6),
    .q0(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_2_q0)
);

postage_filter_w_interconn_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .monitor_0(monitor_0),
    .monitor_1(monitor_1),
    .monitor_2(monitor_2),
    .monitor_3(monitor_3),
    .monitor_4(monitor_4),
    .monitor_5(monitor_5),
    .monitor_6(monitor_6),
    .monitor_7(monitor_7)
);

postage_filter_w_interconn_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U1(
    .din0(x_reg_2204_pp0_iter1_reg),
    .din1(x_1_reg_2216_pp0_iter1_reg),
    .din2(x_2_reg_2228_pp0_iter1_reg),
    .din3(x_3_reg_2240_pp0_iter1_reg),
    .din4(lane_V_reg_2252_pp0_iter1_reg),
    .dout(DataIn_assign_fu_837_p6)
);

postage_filter_w_interconn_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U2(
    .din0(x_reg_2204_pp0_iter1_reg),
    .din1(x_1_reg_2216_pp0_iter1_reg),
    .din2(x_2_reg_2228_pp0_iter1_reg),
    .din3(x_3_reg_2240_pp0_iter1_reg),
    .din4(lane_V_1_reg_2263_pp0_iter1_reg),
    .dout(DataIn_assign_1_fu_909_p6)
);

postage_filter_w_interconn_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U3(
    .din0(x_reg_2204_pp0_iter1_reg),
    .din1(x_1_reg_2216_pp0_iter1_reg),
    .din2(x_2_reg_2228_pp0_iter1_reg),
    .din3(x_3_reg_2240_pp0_iter1_reg),
    .din4(lane_V_2_reg_2274_pp0_iter1_reg),
    .dout(DataIn_assign_2_fu_981_p6)
);

postage_filter_w_interconn_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U4(
    .din0(x_reg_2204_pp0_iter1_reg),
    .din1(x_1_reg_2216_pp0_iter1_reg),
    .din2(x_2_reg_2228_pp0_iter1_reg),
    .din3(x_3_reg_2240_pp0_iter1_reg),
    .din4(lane_V_3_reg_2285_pp0_iter1_reg),
    .dout(DataIn_assign_3_fu_1053_p6)
);

postage_filter_w_interconn_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U5(
    .din0(x_reg_2204_pp0_iter1_reg),
    .din1(x_1_reg_2216_pp0_iter1_reg),
    .din2(x_2_reg_2228_pp0_iter1_reg),
    .din3(x_3_reg_2240_pp0_iter1_reg),
    .din4(lane_V_4_reg_2296_pp0_iter1_reg),
    .dout(DataIn_assign_4_fu_1125_p6)
);

postage_filter_w_interconn_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U6(
    .din0(x_reg_2204_pp0_iter1_reg),
    .din1(x_1_reg_2216_pp0_iter1_reg),
    .din2(x_2_reg_2228_pp0_iter1_reg),
    .din3(x_3_reg_2240_pp0_iter1_reg),
    .din4(lane_V_5_reg_2307_pp0_iter1_reg),
    .dout(DataIn_assign_5_fu_1197_p6)
);

postage_filter_w_interconn_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U7(
    .din0(x_reg_2204_pp0_iter1_reg),
    .din1(x_1_reg_2216_pp0_iter1_reg),
    .din2(x_2_reg_2228_pp0_iter1_reg),
    .din3(x_3_reg_2240_pp0_iter1_reg),
    .din4(lane_V_6_reg_2318_pp0_iter1_reg),
    .dout(DataIn_assign_6_fu_1269_p6)
);

postage_filter_w_interconn_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U8(
    .din0(x_reg_2204_pp0_iter1_reg),
    .din1(x_1_reg_2216_pp0_iter1_reg),
    .din2(x_2_reg_2228_pp0_iter1_reg),
    .din3(x_3_reg_2240_pp0_iter1_reg),
    .din4(lane_V_7_reg_2329_pp0_iter1_reg),
    .dout(DataIn_assign_7_fu_1341_p6)
);

postage_filter_w_interconn_fifo_w36_d132_A postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_7_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_7_din),
    .if_full_n(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_7_full_n),
    .if_write(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_7_write),
    .if_dout(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_7_dout),
    .if_empty_n(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_7_empty_n),
    .if_read(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_7_read)
);

postage_filter_w_interconn_fifo_w36_d132_A postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_6_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_6_din),
    .if_full_n(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_6_full_n),
    .if_write(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_6_write),
    .if_dout(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_6_dout),
    .if_empty_n(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_6_empty_n),
    .if_read(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_6_read)
);

postage_filter_w_interconn_fifo_w36_d132_A postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_5_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_5_din),
    .if_full_n(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_5_full_n),
    .if_write(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_5_write),
    .if_dout(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_5_dout),
    .if_empty_n(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_5_empty_n),
    .if_read(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_5_read)
);

postage_filter_w_interconn_fifo_w36_d132_A postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_4_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_4_din),
    .if_full_n(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_4_full_n),
    .if_write(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_4_write),
    .if_dout(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_4_dout),
    .if_empty_n(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_4_empty_n),
    .if_read(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_4_read)
);

postage_filter_w_interconn_fifo_w36_d132_A postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_3_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_3_din),
    .if_full_n(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_3_full_n),
    .if_write(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_3_write),
    .if_dout(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_3_dout),
    .if_empty_n(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_3_empty_n),
    .if_read(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_3_read)
);

postage_filter_w_interconn_fifo_w36_d132_A postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_2_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_2_din),
    .if_full_n(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_2_full_n),
    .if_write(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_2_write),
    .if_dout(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_2_dout),
    .if_empty_n(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_2_empty_n),
    .if_read(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_2_read)
);

postage_filter_w_interconn_fifo_w36_d132_A postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_1_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_1_din),
    .if_full_n(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_1_full_n),
    .if_write(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_1_write),
    .if_dout(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_1_dout),
    .if_empty_n(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_1_empty_n),
    .if_read(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_1_read)
);

postage_filter_w_interconn_fifo_w36_d132_A postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_din),
    .if_full_n(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_full_n),
    .if_write(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_write),
    .if_dout(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_dout),
    .if_empty_n(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_empty_n),
    .if_read(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_read)
);

postage_filter_w_interconn_regslice_both #(
    .DataWidth( 192 ))
regslice_both_postage_stream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(postage_stream_TDATA),
    .vld_in(postage_stream_TVALID),
    .ack_in(regslice_both_postage_stream_V_data_V_U_ack_in),
    .data_out(postage_stream_TDATA_int_regslice),
    .vld_out(postage_stream_TVALID_int_regslice),
    .ack_out(postage_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_postage_stream_V_data_V_U_apdone_blk)
);

postage_filter_w_interconn_regslice_both #(
    .DataWidth( 24 ))
regslice_both_postage_stream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(postage_stream_TKEEP),
    .vld_in(postage_stream_TVALID),
    .ack_in(regslice_both_postage_stream_V_keep_V_U_ack_in),
    .data_out(postage_stream_TKEEP_int_regslice),
    .vld_out(regslice_both_postage_stream_V_keep_V_U_vld_out),
    .ack_out(postage_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_postage_stream_V_keep_V_U_apdone_blk)
);

postage_filter_w_interconn_regslice_both #(
    .DataWidth( 24 ))
regslice_both_postage_stream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(postage_stream_TSTRB),
    .vld_in(postage_stream_TVALID),
    .ack_in(regslice_both_postage_stream_V_strb_V_U_ack_in),
    .data_out(postage_stream_TSTRB_int_regslice),
    .vld_out(regslice_both_postage_stream_V_strb_V_U_vld_out),
    .ack_out(postage_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_postage_stream_V_strb_V_U_apdone_blk)
);

postage_filter_w_interconn_regslice_both #(
    .DataWidth( 13 ))
regslice_both_postage_stream_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(postage_stream_TUSER),
    .vld_in(postage_stream_TVALID),
    .ack_in(regslice_both_postage_stream_V_user_V_U_ack_in),
    .data_out(postage_stream_TUSER_int_regslice),
    .vld_out(regslice_both_postage_stream_V_user_V_U_vld_out),
    .ack_out(postage_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_postage_stream_V_user_V_U_apdone_blk)
);

postage_filter_w_interconn_regslice_both #(
    .DataWidth( 1 ))
regslice_both_postage_stream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(postage_stream_TLAST),
    .vld_in(postage_stream_TVALID),
    .ack_in(regslice_both_postage_stream_V_last_V_U_ack_in),
    .data_out(postage_stream_TLAST_int_regslice),
    .vld_out(regslice_both_postage_stream_V_last_V_U_vld_out),
    .ack_out(postage_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_postage_stream_V_last_V_U_apdone_blk)
);

postage_filter_w_interconn_regslice_both #(
    .DataWidth( 32 ))
regslice_both_out_r_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(foo_data_reg_2578_pp0_iter6_reg),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(out_r_TREADY_int_regslice),
    .data_out(out_r_TDATA),
    .vld_out(regslice_both_out_r_V_data_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_r_V_data_V_U_apdone_blk)
);

postage_filter_w_interconn_regslice_both #(
    .DataWidth( 4 ))
regslice_both_out_r_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(4'd0),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(regslice_both_out_r_V_keep_V_U_ack_in_dummy),
    .data_out(out_r_TKEEP),
    .vld_out(regslice_both_out_r_V_keep_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_r_V_keep_V_U_apdone_blk)
);

postage_filter_w_interconn_regslice_both #(
    .DataWidth( 4 ))
regslice_both_out_r_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(4'd0),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(regslice_both_out_r_V_strb_V_U_ack_in_dummy),
    .data_out(out_r_TSTRB),
    .vld_out(regslice_both_out_r_V_strb_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_r_V_strb_V_U_apdone_blk)
);

postage_filter_w_interconn_regslice_both #(
    .DataWidth( 3 ))
regslice_both_out_r_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(foo_user_V_reg_2583_pp0_iter6_reg),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(regslice_both_out_r_V_user_V_U_ack_in_dummy),
    .data_out(out_r_TUSER),
    .vld_out(regslice_both_out_r_V_user_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_r_V_user_V_U_apdone_blk)
);

postage_filter_w_interconn_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_r_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(foo_last_reg_2588_pp0_iter6_reg),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(regslice_both_out_r_V_last_V_U_ack_in_dummy),
    .data_out(out_r_TLAST),
    .vld_out(regslice_both_out_r_V_last_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_r_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_588)) begin
        if ((icmp_ln1065_fu_805_p2 == 1'd0)) begin
            ap_phi_reg_pp0_iter2_p_overflow_1_reg_500 <= 1'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_p_overflow_1_reg_500 <= ap_phi_reg_pp0_iter1_p_overflow_1_reg_500;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((icmp_ln255_fu_871_p2 == 1'd1) & (icmp_ln1065_reg_2340 == 1'd1))) begin
            ap_phi_reg_pp0_iter3_p_overflow_1_reg_500 <= 1'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_overflow_1_reg_500 <= ap_phi_reg_pp0_iter2_p_overflow_1_reg_500;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln1065_1_reg_2345_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln255_1_reg_2408_pp0_iter3_reg == 1'd1) & (icmp_ln1065_1_reg_2345_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        ap_phi_reg_pp0_iter5_p_overflow_3_reg_536 <= ap_phi_mux_p_overflow_1_phi_fu_504_p6;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln255_1_reg_2408_pp0_iter3_reg == 1'd0) & (icmp_ln1065_1_reg_2345_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter5_p_overflow_3_reg_536 <= p_overflow_2_fu_1727_p2;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter5_p_overflow_3_reg_536 <= ap_phi_reg_pp0_iter4_p_overflow_3_reg_536;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln1065_3_reg_2355_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln255_3_reg_2444_pp0_iter4_reg == 1'd1) & (icmp_ln1065_3_reg_2355_pp0_iter4_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        ap_phi_reg_pp0_iter6_p_overflow_7_reg_563 <= ap_phi_mux_p_overflow_5_phi_fu_552_p6;
    end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter6_p_overflow_7_reg_563 <= ap_phi_reg_pp0_iter5_p_overflow_7_reg_563;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln1065_4_reg_2360_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln255_4_reg_2462_pp0_iter5_reg == 1'd1) & (icmp_ln1065_4_reg_2360_pp0_iter5_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        ap_phi_reg_pp0_iter7_p_overflow_9_reg_577 <= ap_phi_mux_p_overflow_7_phi_fu_566_p6;
    end else if (((ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln255_4_reg_2462_pp0_iter5_reg == 1'd0) & (icmp_ln1065_4_reg_2360_pp0_iter5_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter7_p_overflow_9_reg_577 <= p_overflow_8_fu_2139_p2;
    end else if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter7_p_overflow_9_reg_577 <= ap_phi_reg_pp0_iter6_p_overflow_9_reg_577;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln1065_6_reg_2370_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln255_6_reg_2498_pp0_iter6_reg == 1'd1) & (icmp_ln1065_6_reg_2370_pp0_iter6_reg == 1'd1) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        ap_phi_reg_pp0_iter8_p_overflow_13_reg_604 <= ap_phi_mux_p_overflow_11_phi_fu_593_p6;
    end else if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter8_p_overflow_13_reg_604 <= ap_phi_reg_pp0_iter7_p_overflow_13_reg_604;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1805)) begin
        if (((p_Result_7_fu_1401_p2 == 1'd0) & (icmp_ln255_7_fu_1375_p2 == 1'd1))) begin
            postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture <= 8'd128;
        end else if ((icmp_ln255_7_fu_1375_p2 == 1'd0)) begin
            postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture <= nexttocap_7_fu_1363_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1795)) begin
        if (((p_Result_6_fu_1329_p2 == 1'd0) & (icmp_ln255_6_fu_1303_p2 == 1'd1))) begin
            postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_1 <= 8'd128;
        end else if ((icmp_ln255_6_fu_1303_p2 == 1'd0)) begin
            postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_1 <= nexttocap_6_fu_1291_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1785)) begin
        if (((p_Result_5_fu_1257_p2 == 1'd0) & (icmp_ln255_5_fu_1231_p2 == 1'd1))) begin
            postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_2 <= 8'd128;
        end else if ((icmp_ln255_5_fu_1231_p2 == 1'd0)) begin
            postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_2 <= nexttocap_5_fu_1219_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1775)) begin
        if (((p_Result_4_fu_1185_p2 == 1'd0) & (icmp_ln255_4_fu_1159_p2 == 1'd1))) begin
            postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_3 <= 8'd128;
        end else if ((icmp_ln255_4_fu_1159_p2 == 1'd0)) begin
            postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_3 <= nexttocap_4_fu_1147_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1765)) begin
        if (((p_Result_3_fu_1113_p2 == 1'd0) & (icmp_ln255_3_fu_1087_p2 == 1'd1))) begin
            postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_4 <= 8'd128;
        end else if ((icmp_ln255_3_fu_1087_p2 == 1'd0)) begin
            postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_4 <= nexttocap_3_fu_1075_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1755)) begin
        if (((p_Result_2_fu_1041_p2 == 1'd0) & (icmp_ln255_2_fu_1015_p2 == 1'd1))) begin
            postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_5 <= 8'd128;
        end else if ((icmp_ln255_2_fu_1015_p2 == 1'd0)) begin
            postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_5 <= nexttocap_2_fu_1003_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1745)) begin
        if (((p_Result_1_fu_969_p2 == 1'd0) & (icmp_ln255_1_fu_943_p2 == 1'd1))) begin
            postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_6 <= 8'd128;
        end else if ((icmp_ln255_1_fu_943_p2 == 1'd0)) begin
            postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_6 <= nexttocap_1_fu_931_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1736)) begin
        if (((p_Result_s_fu_897_p2 == 1'd0) & (icmp_ln255_fu_871_p2 == 1'd1))) begin
            postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_7 <= 8'd128;
        end else if ((icmp_ln255_fu_871_p2 == 1'd0)) begin
            postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_7 <= nexttocap_fu_859_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        DataOut_1_reg_2397 <= postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_1_q0;
        DataOut_2_reg_2415 <= postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_q0;
        DataOut_3_reg_2433 <= postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_6_q0;
        DataOut_4_reg_2451 <= postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_5_q0;
        DataOut_5_reg_2469 <= postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_4_q0;
        DataOut_6_reg_2487 <= postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_3_q0;
        DataOut_7_reg_2505 <= postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_2_q0;
        DataOut_reg_2380 <= postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_7_q0;
        foo_data_reg_2578_pp0_iter5_reg <= foo_data_reg_2578;
        foo_data_reg_2578_pp0_iter6_reg <= foo_data_reg_2578_pp0_iter5_reg;
        foo_last_reg_2588_pp0_iter5_reg <= foo_last_reg_2588;
        foo_last_reg_2588_pp0_iter6_reg <= foo_last_reg_2588_pp0_iter5_reg;
        foo_user_V_reg_2583_pp0_iter5_reg <= foo_user_V_reg_2583;
        foo_user_V_reg_2583_pp0_iter6_reg <= foo_user_V_reg_2583_pp0_iter5_reg;
        icmp_ln1065_1_reg_2345_pp0_iter2_reg <= icmp_ln1065_1_reg_2345;
        icmp_ln1065_1_reg_2345_pp0_iter3_reg <= icmp_ln1065_1_reg_2345_pp0_iter2_reg;
        icmp_ln1065_2_reg_2350_pp0_iter2_reg <= icmp_ln1065_2_reg_2350;
        icmp_ln1065_2_reg_2350_pp0_iter3_reg <= icmp_ln1065_2_reg_2350_pp0_iter2_reg;
        icmp_ln1065_2_reg_2350_pp0_iter4_reg <= icmp_ln1065_2_reg_2350_pp0_iter3_reg;
        icmp_ln1065_3_reg_2355_pp0_iter2_reg <= icmp_ln1065_3_reg_2355;
        icmp_ln1065_3_reg_2355_pp0_iter3_reg <= icmp_ln1065_3_reg_2355_pp0_iter2_reg;
        icmp_ln1065_3_reg_2355_pp0_iter4_reg <= icmp_ln1065_3_reg_2355_pp0_iter3_reg;
        icmp_ln1065_3_reg_2355_pp0_iter5_reg <= icmp_ln1065_3_reg_2355_pp0_iter4_reg;
        icmp_ln1065_4_reg_2360_pp0_iter2_reg <= icmp_ln1065_4_reg_2360;
        icmp_ln1065_4_reg_2360_pp0_iter3_reg <= icmp_ln1065_4_reg_2360_pp0_iter2_reg;
        icmp_ln1065_4_reg_2360_pp0_iter4_reg <= icmp_ln1065_4_reg_2360_pp0_iter3_reg;
        icmp_ln1065_4_reg_2360_pp0_iter5_reg <= icmp_ln1065_4_reg_2360_pp0_iter4_reg;
        icmp_ln1065_5_reg_2365_pp0_iter2_reg <= icmp_ln1065_5_reg_2365;
        icmp_ln1065_5_reg_2365_pp0_iter3_reg <= icmp_ln1065_5_reg_2365_pp0_iter2_reg;
        icmp_ln1065_5_reg_2365_pp0_iter4_reg <= icmp_ln1065_5_reg_2365_pp0_iter3_reg;
        icmp_ln1065_5_reg_2365_pp0_iter5_reg <= icmp_ln1065_5_reg_2365_pp0_iter4_reg;
        icmp_ln1065_5_reg_2365_pp0_iter6_reg <= icmp_ln1065_5_reg_2365_pp0_iter5_reg;
        icmp_ln1065_6_reg_2370_pp0_iter2_reg <= icmp_ln1065_6_reg_2370;
        icmp_ln1065_6_reg_2370_pp0_iter3_reg <= icmp_ln1065_6_reg_2370_pp0_iter2_reg;
        icmp_ln1065_6_reg_2370_pp0_iter4_reg <= icmp_ln1065_6_reg_2370_pp0_iter3_reg;
        icmp_ln1065_6_reg_2370_pp0_iter5_reg <= icmp_ln1065_6_reg_2370_pp0_iter4_reg;
        icmp_ln1065_6_reg_2370_pp0_iter6_reg <= icmp_ln1065_6_reg_2370_pp0_iter5_reg;
        icmp_ln1065_6_reg_2370_pp0_iter7_reg <= icmp_ln1065_6_reg_2370_pp0_iter6_reg;
        icmp_ln1065_7_reg_2375_pp0_iter2_reg <= icmp_ln1065_7_reg_2375;
        icmp_ln1065_7_reg_2375_pp0_iter3_reg <= icmp_ln1065_7_reg_2375_pp0_iter2_reg;
        icmp_ln1065_7_reg_2375_pp0_iter4_reg <= icmp_ln1065_7_reg_2375_pp0_iter3_reg;
        icmp_ln1065_7_reg_2375_pp0_iter5_reg <= icmp_ln1065_7_reg_2375_pp0_iter4_reg;
        icmp_ln1065_7_reg_2375_pp0_iter6_reg <= icmp_ln1065_7_reg_2375_pp0_iter5_reg;
        icmp_ln1065_7_reg_2375_pp0_iter7_reg <= icmp_ln1065_7_reg_2375_pp0_iter6_reg;
        icmp_ln1065_reg_2340_pp0_iter2_reg <= icmp_ln1065_reg_2340;
        icmp_ln1065_reg_2340_pp0_iter3_reg <= icmp_ln1065_reg_2340_pp0_iter2_reg;
        icmp_ln255_1_reg_2408_pp0_iter3_reg <= icmp_ln255_1_reg_2408;
        icmp_ln255_2_reg_2426_pp0_iter3_reg <= icmp_ln255_2_reg_2426;
        icmp_ln255_2_reg_2426_pp0_iter4_reg <= icmp_ln255_2_reg_2426_pp0_iter3_reg;
        icmp_ln255_3_reg_2444_pp0_iter3_reg <= icmp_ln255_3_reg_2444;
        icmp_ln255_3_reg_2444_pp0_iter4_reg <= icmp_ln255_3_reg_2444_pp0_iter3_reg;
        icmp_ln255_3_reg_2444_pp0_iter5_reg <= icmp_ln255_3_reg_2444_pp0_iter4_reg;
        icmp_ln255_4_reg_2462_pp0_iter3_reg <= icmp_ln255_4_reg_2462;
        icmp_ln255_4_reg_2462_pp0_iter4_reg <= icmp_ln255_4_reg_2462_pp0_iter3_reg;
        icmp_ln255_4_reg_2462_pp0_iter5_reg <= icmp_ln255_4_reg_2462_pp0_iter4_reg;
        icmp_ln255_5_reg_2480_pp0_iter3_reg <= icmp_ln255_5_reg_2480;
        icmp_ln255_5_reg_2480_pp0_iter4_reg <= icmp_ln255_5_reg_2480_pp0_iter3_reg;
        icmp_ln255_5_reg_2480_pp0_iter5_reg <= icmp_ln255_5_reg_2480_pp0_iter4_reg;
        icmp_ln255_5_reg_2480_pp0_iter6_reg <= icmp_ln255_5_reg_2480_pp0_iter5_reg;
        icmp_ln255_6_reg_2498_pp0_iter3_reg <= icmp_ln255_6_reg_2498;
        icmp_ln255_6_reg_2498_pp0_iter4_reg <= icmp_ln255_6_reg_2498_pp0_iter3_reg;
        icmp_ln255_6_reg_2498_pp0_iter5_reg <= icmp_ln255_6_reg_2498_pp0_iter4_reg;
        icmp_ln255_6_reg_2498_pp0_iter6_reg <= icmp_ln255_6_reg_2498_pp0_iter5_reg;
        icmp_ln255_6_reg_2498_pp0_iter7_reg <= icmp_ln255_6_reg_2498_pp0_iter6_reg;
        icmp_ln255_7_reg_2516_pp0_iter3_reg <= icmp_ln255_7_reg_2516;
        icmp_ln255_7_reg_2516_pp0_iter4_reg <= icmp_ln255_7_reg_2516_pp0_iter3_reg;
        icmp_ln255_7_reg_2516_pp0_iter5_reg <= icmp_ln255_7_reg_2516_pp0_iter4_reg;
        icmp_ln255_7_reg_2516_pp0_iter6_reg <= icmp_ln255_7_reg_2516_pp0_iter5_reg;
        icmp_ln255_7_reg_2516_pp0_iter7_reg <= icmp_ln255_7_reg_2516_pp0_iter6_reg;
        icmp_ln255_reg_2390_pp0_iter3_reg <= icmp_ln255_reg_2390;
        tmp_10_reg_2543_pp0_iter4_reg <= tmp_10_reg_2543;
        tmp_10_reg_2543_pp0_iter5_reg <= tmp_10_reg_2543_pp0_iter4_reg;
        tmp_13_reg_2548_pp0_iter4_reg <= tmp_13_reg_2548;
        tmp_13_reg_2548_pp0_iter5_reg <= tmp_13_reg_2548_pp0_iter4_reg;
        tmp_13_reg_2548_pp0_iter6_reg <= tmp_13_reg_2548_pp0_iter5_reg;
        tmp_16_reg_2553_pp0_iter4_reg <= tmp_16_reg_2553;
        tmp_16_reg_2553_pp0_iter5_reg <= tmp_16_reg_2553_pp0_iter4_reg;
        tmp_16_reg_2553_pp0_iter6_reg <= tmp_16_reg_2553_pp0_iter5_reg;
        tmp_19_reg_2558_pp0_iter4_reg <= tmp_19_reg_2558;
        tmp_19_reg_2558_pp0_iter5_reg <= tmp_19_reg_2558_pp0_iter4_reg;
        tmp_19_reg_2558_pp0_iter6_reg <= tmp_19_reg_2558_pp0_iter5_reg;
        tmp_19_reg_2558_pp0_iter7_reg <= tmp_19_reg_2558_pp0_iter6_reg;
        tmp_4_reg_2533_pp0_iter4_reg <= tmp_4_reg_2533;
        tmp_last_1_reg_2403 <= tmp_last_1_fu_937_p2;
        tmp_last_2_reg_2421 <= tmp_last_2_fu_1009_p2;
        tmp_last_3_reg_2439 <= tmp_last_3_fu_1081_p2;
        tmp_last_4_reg_2457 <= tmp_last_4_fu_1153_p2;
        tmp_last_5_reg_2475 <= tmp_last_5_fu_1225_p2;
        tmp_last_6_reg_2493 <= tmp_last_6_fu_1297_p2;
        tmp_last_7_reg_2511 <= tmp_last_7_fu_1369_p2;
        tmp_last_reg_2385 <= tmp_last_fu_865_p2;
        tmp_s_reg_2538_pp0_iter4_reg <= tmp_s_reg_2538;
        trunc_ln164_1_reg_2571 <= trunc_ln164_1_fu_2057_p1;
        trunc_ln164_1_reg_2571_pp0_iter5_reg <= trunc_ln164_1_reg_2571;
        trunc_ln164_1_reg_2571_pp0_iter6_reg <= trunc_ln164_1_reg_2571_pp0_iter5_reg;
        trunc_ln164_1_reg_2571_pp0_iter7_reg <= trunc_ln164_1_reg_2571_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_overflow_13_reg_604 <= ap_phi_reg_pp0_iter0_p_overflow_13_reg_604;
        ap_phi_reg_pp0_iter1_p_overflow_1_reg_500 <= ap_phi_reg_pp0_iter0_p_overflow_1_reg_500;
        ap_phi_reg_pp0_iter1_p_overflow_3_reg_536 <= ap_phi_reg_pp0_iter0_p_overflow_3_reg_536;
        ap_phi_reg_pp0_iter1_p_overflow_7_reg_563 <= ap_phi_reg_pp0_iter0_p_overflow_7_reg_563;
        ap_phi_reg_pp0_iter1_p_overflow_9_reg_577 <= ap_phi_reg_pp0_iter0_p_overflow_9_reg_577;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter2_p_overflow_13_reg_604 <= ap_phi_reg_pp0_iter1_p_overflow_13_reg_604;
        ap_phi_reg_pp0_iter2_p_overflow_3_reg_536 <= ap_phi_reg_pp0_iter1_p_overflow_3_reg_536;
        ap_phi_reg_pp0_iter2_p_overflow_7_reg_563 <= ap_phi_reg_pp0_iter1_p_overflow_7_reg_563;
        ap_phi_reg_pp0_iter2_p_overflow_9_reg_577 <= ap_phi_reg_pp0_iter1_p_overflow_9_reg_577;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter3_p_overflow_13_reg_604 <= ap_phi_reg_pp0_iter2_p_overflow_13_reg_604;
        ap_phi_reg_pp0_iter3_p_overflow_3_reg_536 <= ap_phi_reg_pp0_iter2_p_overflow_3_reg_536;
        ap_phi_reg_pp0_iter3_p_overflow_7_reg_563 <= ap_phi_reg_pp0_iter2_p_overflow_7_reg_563;
        ap_phi_reg_pp0_iter3_p_overflow_9_reg_577 <= ap_phi_reg_pp0_iter2_p_overflow_9_reg_577;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter4_p_overflow_13_reg_604 <= ap_phi_reg_pp0_iter3_p_overflow_13_reg_604;
        ap_phi_reg_pp0_iter4_p_overflow_1_reg_500 <= ap_phi_reg_pp0_iter3_p_overflow_1_reg_500;
        ap_phi_reg_pp0_iter4_p_overflow_3_reg_536 <= ap_phi_reg_pp0_iter3_p_overflow_3_reg_536;
        ap_phi_reg_pp0_iter4_p_overflow_7_reg_563 <= ap_phi_reg_pp0_iter3_p_overflow_7_reg_563;
        ap_phi_reg_pp0_iter4_p_overflow_9_reg_577 <= ap_phi_reg_pp0_iter3_p_overflow_9_reg_577;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter5_p_overflow_13_reg_604 <= ap_phi_reg_pp0_iter4_p_overflow_13_reg_604;
        ap_phi_reg_pp0_iter5_p_overflow_7_reg_563 <= ap_phi_reg_pp0_iter4_p_overflow_7_reg_563;
        ap_phi_reg_pp0_iter5_p_overflow_9_reg_577 <= ap_phi_reg_pp0_iter4_p_overflow_9_reg_577;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter6_p_overflow_13_reg_604 <= ap_phi_reg_pp0_iter5_p_overflow_13_reg_604;
        ap_phi_reg_pp0_iter6_p_overflow_9_reg_577 <= ap_phi_reg_pp0_iter5_p_overflow_9_reg_577;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter7_p_overflow_13_reg_604 <= ap_phi_reg_pp0_iter6_p_overflow_13_reg_604;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln164_1_fu_2057_p1 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        foo_data_reg_2578 <= {{ap_phi_mux_empty_46_phi_fu_518_p16[63:32]}};
        foo_last_reg_2588 <= ap_phi_mux_empty_46_phi_fu_518_p16[32'd72];
        foo_user_V_reg_2583 <= {{ap_phi_mux_empty_46_phi_fu_518_p16[66:64]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gid_V_1_reg_2269 <= {{monitor_1[10:2]}};
        gid_V_2_reg_2280 <= {{monitor_2[10:2]}};
        gid_V_3_reg_2291 <= {{monitor_3[10:2]}};
        gid_V_4_reg_2302 <= {{monitor_4[10:2]}};
        gid_V_5_reg_2313 <= {{monitor_5[10:2]}};
        gid_V_6_reg_2324 <= {{monitor_6[10:2]}};
        gid_V_7_reg_2335 <= {{monitor_7[10:2]}};
        gid_V_reg_2258 <= {{monitor_0[10:2]}};
        group_V_reg_2180 <= group_V_fu_639_p1;
        icmp_ln1065_1_reg_2345 <= icmp_ln1065_1_fu_809_p2;
        icmp_ln1065_2_reg_2350 <= icmp_ln1065_2_fu_813_p2;
        icmp_ln1065_3_reg_2355 <= icmp_ln1065_3_fu_817_p2;
        icmp_ln1065_4_reg_2360 <= icmp_ln1065_4_fu_821_p2;
        icmp_ln1065_5_reg_2365 <= icmp_ln1065_5_fu_825_p2;
        icmp_ln1065_6_reg_2370 <= icmp_ln1065_6_fu_829_p2;
        icmp_ln1065_7_reg_2375 <= icmp_ln1065_7_fu_833_p2;
        icmp_ln1065_reg_2340 <= icmp_ln1065_fu_805_p2;
        lane_V_1_reg_2263 <= lane_V_1_fu_707_p1;
        lane_V_1_reg_2263_pp0_iter1_reg <= lane_V_1_reg_2263;
        lane_V_2_reg_2274 <= lane_V_2_fu_721_p1;
        lane_V_2_reg_2274_pp0_iter1_reg <= lane_V_2_reg_2274;
        lane_V_3_reg_2285 <= lane_V_3_fu_735_p1;
        lane_V_3_reg_2285_pp0_iter1_reg <= lane_V_3_reg_2285;
        lane_V_4_reg_2296 <= lane_V_4_fu_749_p1;
        lane_V_4_reg_2296_pp0_iter1_reg <= lane_V_4_reg_2296;
        lane_V_5_reg_2307 <= lane_V_5_fu_763_p1;
        lane_V_5_reg_2307_pp0_iter1_reg <= lane_V_5_reg_2307;
        lane_V_6_reg_2318 <= lane_V_6_fu_777_p1;
        lane_V_6_reg_2318_pp0_iter1_reg <= lane_V_6_reg_2318;
        lane_V_7_reg_2329 <= lane_V_7_fu_791_p1;
        lane_V_7_reg_2329_pp0_iter1_reg <= lane_V_7_reg_2329;
        lane_V_reg_2252 <= lane_V_fu_693_p1;
        lane_V_reg_2252_pp0_iter1_reg <= lane_V_reg_2252;
        trigger_V_reg_2192 <= {{postage_stream_TUSER_int_regslice[12:9]}};
        trigger_V_reg_2192_pp0_iter1_reg <= trigger_V_reg_2192;
        x_1_reg_2216 <= {{postage_stream_TDATA_int_regslice[127:96]}};
        x_1_reg_2216_pp0_iter1_reg <= x_1_reg_2216;
        x_2_reg_2228 <= {{postage_stream_TDATA_int_regslice[159:128]}};
        x_2_reg_2228_pp0_iter1_reg <= x_2_reg_2228;
        x_3_reg_2240 <= {{postage_stream_TDATA_int_regslice[191:160]}};
        x_3_reg_2240_pp0_iter1_reg <= x_3_reg_2240;
        x_reg_2204 <= {{postage_stream_TDATA_int_regslice[95:64]}};
        x_reg_2204_pp0_iter1_reg <= x_reg_2204;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1065_1_reg_2345 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln255_1_reg_2408 <= icmp_ln255_1_fu_943_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1065_2_reg_2350 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln255_2_reg_2426 <= icmp_ln255_2_fu_1015_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1065_3_reg_2355 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln255_3_reg_2444 <= icmp_ln255_3_fu_1087_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1065_4_reg_2360 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln255_4_reg_2462 <= icmp_ln255_4_fu_1159_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1065_5_reg_2365 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln255_5_reg_2480 <= icmp_ln255_5_fu_1231_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1065_6_reg_2370 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln255_6_reg_2498 <= icmp_ln255_6_fu_1303_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1065_7_reg_2375 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln255_7_reg_2516 <= icmp_ln255_7_fu_1375_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1065_reg_2340 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln255_reg_2390 <= icmp_ln255_fu_871_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln255_6_reg_2498_pp0_iter6_reg == 1'd0) & (icmp_ln1065_6_reg_2370_pp0_iter6_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_overflow_12_reg_2603 <= p_overflow_12_fu_2162_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln255_3_reg_2444_pp0_iter4_reg == 1'd0) & (icmp_ln1065_3_reg_2355_pp0_iter4_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_overflow_6_reg_2593 <= p_overflow_6_fu_2128_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln255_reg_2390 == 1'd0) & (icmp_ln1065_reg_2340_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_overflow_reg_2523 <= p_overflow_fu_1422_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln164_1_fu_2057_p1 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        packet_in_flight <= ap_phi_mux_empty_46_phi_fu_518_p16[32'd72];
    end
end

always @ (posedge ap_clk) begin
    if ((((packet_in_flight_load_load_fu_2061_p1 == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln164_1_fu_2057_p1 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (foo_last_fu_2091_p3 == 1'd1) & (trunc_ln164_1_fu_2057_p1 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        sending_i <= sending_plus1_fu_1749_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln255_4_reg_2462 == 1'd0) & (icmp_ln1065_4_reg_2360_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_10_reg_2543 <= postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_3_full_n;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln255_5_reg_2480 == 1'd0) & (icmp_ln1065_5_reg_2365_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_13_reg_2548 <= postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_2_full_n;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln255_6_reg_2498 == 1'd0) & (icmp_ln1065_6_reg_2370_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_16_reg_2553 <= postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_1_full_n;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln255_7_reg_2516 == 1'd0) & (icmp_ln1065_7_reg_2375_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_19_reg_2558 <= postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_full_n;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln255_2_reg_2426 == 1'd0) & (icmp_ln1065_2_reg_2350_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_4_reg_2533 <= postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_5_full_n;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln255_1_reg_2408 == 1'd0) & (icmp_ln1065_1_reg_2345_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_7_reg_2528 <= postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_6_full_n;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln255_3_reg_2444 == 1'd0) & (icmp_ln1065_3_reg_2355_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_s_reg_2538 <= postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_4_full_n;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((trunc_ln164_fu_1757_p1 == 3'd7)) begin
        ap_phi_mux_empty_46_phi_fu_518_p16 = tmp_22_fu_2044_p5;
    end else if ((trunc_ln164_fu_1757_p1 == 3'd6)) begin
        ap_phi_mux_empty_46_phi_fu_518_p16 = tmp_43_fu_1785_p5;
    end else if ((trunc_ln164_fu_1757_p1 == 3'd5)) begin
        ap_phi_mux_empty_46_phi_fu_518_p16 = tmp_41_fu_1822_p5;
    end else if ((trunc_ln164_fu_1757_p1 == 3'd4)) begin
        ap_phi_mux_empty_46_phi_fu_518_p16 = tmp_39_fu_1859_p5;
    end else if ((trunc_ln164_fu_1757_p1 == 3'd3)) begin
        ap_phi_mux_empty_46_phi_fu_518_p16 = tmp_37_fu_1896_p5;
    end else if ((trunc_ln164_fu_1757_p1 == 3'd2)) begin
        ap_phi_mux_empty_46_phi_fu_518_p16 = tmp_35_fu_1933_p5;
    end else if ((trunc_ln164_fu_1757_p1 == 3'd1)) begin
        ap_phi_mux_empty_46_phi_fu_518_p16 = tmp_33_fu_1970_p5;
    end else if ((trunc_ln164_fu_1757_p1 == 3'd0)) begin
        ap_phi_mux_empty_46_phi_fu_518_p16 = tmp_28_fu_2007_p5;
    end else begin
        ap_phi_mux_empty_46_phi_fu_518_p16 = ap_phi_reg_pp0_iter4_empty_46_reg_515;
    end
end

always @ (*) begin
    if (((icmp_ln1065_5_reg_2365_pp0_iter6_reg == 1'd0) | ((icmp_ln255_5_reg_2480_pp0_iter6_reg == 1'd1) & (icmp_ln1065_5_reg_2365_pp0_iter6_reg == 1'd1)))) begin
        ap_phi_mux_p_overflow_11_phi_fu_593_p6 = ap_phi_reg_pp0_iter7_p_overflow_9_reg_577;
    end else if (((icmp_ln255_5_reg_2480_pp0_iter6_reg == 1'd0) & (icmp_ln1065_5_reg_2365_pp0_iter6_reg == 1'd1))) begin
        ap_phi_mux_p_overflow_11_phi_fu_593_p6 = p_overflow_10_fu_2150_p2;
    end else begin
        ap_phi_mux_p_overflow_11_phi_fu_593_p6 = ap_phi_reg_pp0_iter7_p_overflow_11_reg_590;
    end
end

always @ (*) begin
    if (((icmp_ln255_6_reg_2498_pp0_iter7_reg == 1'd0) & (icmp_ln1065_6_reg_2370_pp0_iter7_reg == 1'd1))) begin
        ap_phi_mux_p_overflow_13_phi_fu_607_p6 = p_overflow_12_reg_2603;
    end else begin
        ap_phi_mux_p_overflow_13_phi_fu_607_p6 = ap_phi_reg_pp0_iter8_p_overflow_13_reg_604;
    end
end

always @ (*) begin
    if (((icmp_ln1065_7_reg_2375_pp0_iter7_reg == 1'd0) | ((icmp_ln255_7_reg_2516_pp0_iter7_reg == 1'd1) & (icmp_ln1065_7_reg_2375_pp0_iter7_reg == 1'd1)))) begin
        ap_phi_mux_p_overflow_15_phi_fu_620_p6 = ap_phi_mux_p_overflow_13_phi_fu_607_p6;
    end else if (((icmp_ln255_7_reg_2516_pp0_iter7_reg == 1'd0) & (icmp_ln1065_7_reg_2375_pp0_iter7_reg == 1'd1))) begin
        ap_phi_mux_p_overflow_15_phi_fu_620_p6 = p_overflow_14_fu_2173_p2;
    end else begin
        ap_phi_mux_p_overflow_15_phi_fu_620_p6 = ap_phi_reg_pp0_iter8_p_overflow_15_reg_617;
    end
end

always @ (*) begin
    if (((icmp_ln255_reg_2390_pp0_iter3_reg == 1'd0) & (icmp_ln1065_reg_2340_pp0_iter3_reg == 1'd1))) begin
        ap_phi_mux_p_overflow_1_phi_fu_504_p6 = p_overflow_reg_2523;
    end else begin
        ap_phi_mux_p_overflow_1_phi_fu_504_p6 = ap_phi_reg_pp0_iter4_p_overflow_1_reg_500;
    end
end

always @ (*) begin
    if (((icmp_ln1065_2_reg_2350_pp0_iter4_reg == 1'd0) | ((icmp_ln255_2_reg_2426_pp0_iter4_reg == 1'd1) & (icmp_ln1065_2_reg_2350_pp0_iter4_reg == 1'd1)))) begin
        ap_phi_mux_p_overflow_5_phi_fu_552_p6 = ap_phi_reg_pp0_iter5_p_overflow_3_reg_536;
    end else if (((icmp_ln255_2_reg_2426_pp0_iter4_reg == 1'd0) & (icmp_ln1065_2_reg_2350_pp0_iter4_reg == 1'd1))) begin
        ap_phi_mux_p_overflow_5_phi_fu_552_p6 = p_overflow_4_fu_2116_p2;
    end else begin
        ap_phi_mux_p_overflow_5_phi_fu_552_p6 = ap_phi_reg_pp0_iter5_p_overflow_5_reg_549;
    end
end

always @ (*) begin
    if (((icmp_ln255_3_reg_2444_pp0_iter5_reg == 1'd0) & (icmp_ln1065_3_reg_2355_pp0_iter5_reg == 1'd1))) begin
        ap_phi_mux_p_overflow_7_phi_fu_566_p6 = p_overflow_6_reg_2593;
    end else begin
        ap_phi_mux_p_overflow_7_phi_fu_566_p6 = ap_phi_reg_pp0_iter6_p_overflow_7_reg_563;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if ((((trunc_ln164_1_reg_2571_pp0_iter7_reg == 1'd1) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((trunc_ln164_1_reg_2571_pp0_iter6_reg == 1'd1) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        out_r_TDATA_blk_n = out_r_TREADY_int_regslice;
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln164_1_reg_2571_pp0_iter6_reg == 1'd1) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_r_TVALID_int_regslice = 1'b1;
    end else begin
        out_r_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        overflow_ap_vld = 1'b1;
    end else begin
        overflow_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_1_empty_n == 1'b1) & (trunc_ln164_fu_1757_p1 == 3'd6) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_1_read = 1'b1;
    end else begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_1_full_n == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln255_6_reg_2498 == 1'd0) & (icmp_ln1065_6_reg_2370_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_1_write = 1'b1;
    end else begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_2_empty_n == 1'b1) & (trunc_ln164_fu_1757_p1 == 3'd5) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_2_read = 1'b1;
    end else begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_2_read = 1'b0;
    end
end

always @ (*) begin
    if (((postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_2_full_n == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln255_5_reg_2480 == 1'd0) & (icmp_ln1065_5_reg_2365_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_2_write = 1'b1;
    end else begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_2_write = 1'b0;
    end
end

always @ (*) begin
    if (((postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_3_empty_n == 1'b1) & (trunc_ln164_fu_1757_p1 == 3'd4) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_3_read = 1'b1;
    end else begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_3_read = 1'b0;
    end
end

always @ (*) begin
    if (((postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_3_full_n == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln255_4_reg_2462 == 1'd0) & (icmp_ln1065_4_reg_2360_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_3_write = 1'b1;
    end else begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_3_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln164_fu_1757_p1 == 3'd3) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_4_empty_n == 1'b1))) begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_4_read = 1'b1;
    end else begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_4_read = 1'b0;
    end
end

always @ (*) begin
    if (((postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_4_full_n == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln255_3_reg_2444 == 1'd0) & (icmp_ln1065_3_reg_2355_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_4_write = 1'b1;
    end else begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_4_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln164_fu_1757_p1 == 3'd2) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_5_empty_n == 1'b1))) begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_5_read = 1'b1;
    end else begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_5_read = 1'b0;
    end
end

always @ (*) begin
    if (((postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_5_full_n == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln255_2_reg_2426 == 1'd0) & (icmp_ln1065_2_reg_2350_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_5_write = 1'b1;
    end else begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_5_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln164_fu_1757_p1 == 3'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_6_empty_n == 1'b1))) begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_6_read = 1'b1;
    end else begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_6_read = 1'b0;
    end
end

always @ (*) begin
    if (((postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_6_full_n == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln255_1_reg_2408 == 1'd0) & (icmp_ln1065_1_reg_2345_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_6_write = 1'b1;
    end else begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_6_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln164_fu_1757_p1 == 3'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_7_empty_n == 1'b1))) begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_7_read = 1'b1;
    end else begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_7_read = 1'b0;
    end
end

always @ (*) begin
    if (((postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_7_full_n == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln255_reg_2390 == 1'd0) & (icmp_ln1065_reg_2340_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_7_write = 1'b1;
    end else begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_7_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln164_fu_1757_p1 == 3'd7) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_empty_n == 1'b1))) begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_read = 1'b1;
    end else begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_read = 1'b0;
    end
end

always @ (*) begin
    if (((postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_full_n == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln255_7_reg_2516 == 1'd0) & (icmp_ln1065_7_reg_2375_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_write = 1'b1;
    end else begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_1_ce0 = icmp_ln1065_1_reg_2345;
    end else begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_1_we0 = icmp_ln1065_1_reg_2345;
    end else begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_2_ce0 = icmp_ln1065_7_reg_2375;
    end else begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_2_we0 = icmp_ln1065_7_reg_2375;
    end else begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_3_ce0 = icmp_ln1065_6_reg_2370;
    end else begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_3_we0 = icmp_ln1065_6_reg_2370;
    end else begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_4_ce0 = icmp_ln1065_5_reg_2365;
    end else begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_4_we0 = icmp_ln1065_5_reg_2365;
    end else begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_5_ce0 = icmp_ln1065_4_reg_2360;
    end else begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_5_we0 = icmp_ln1065_4_reg_2360;
    end else begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_6_ce0 = icmp_ln1065_3_reg_2355;
    end else begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_6_we0 = icmp_ln1065_3_reg_2355;
    end else begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_7_ce0 = icmp_ln1065_reg_2340;
    end else begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_7_we0 = icmp_ln1065_reg_2340;
    end else begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_ce0 = icmp_ln1065_2_reg_2350;
    end else begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_we0 = icmp_ln1065_2_reg_2350;
    end else begin
        postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_iqprereg_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1))) begin
        postage_stream_TDATA_blk_n = postage_stream_TVALID_int_regslice;
    end else begin
        postage_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1))) begin
        postage_stream_TREADY_int_regslice = 1'b1;
    end else begin
        postage_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln288_fu_1743_p2 = (sending_i + 8'd1);

assign and_ln825_1_fu_964_p2 = (trigger_V_reg_2192_pp0_iter1_reg & shl_ln825_1_fu_958_p2);

assign and_ln825_2_fu_1036_p2 = (trigger_V_reg_2192_pp0_iter1_reg & shl_ln825_2_fu_1030_p2);

assign and_ln825_3_fu_1108_p2 = (trigger_V_reg_2192_pp0_iter1_reg & shl_ln825_3_fu_1102_p2);

assign and_ln825_4_fu_1180_p2 = (trigger_V_reg_2192_pp0_iter1_reg & shl_ln825_4_fu_1174_p2);

assign and_ln825_5_fu_1252_p2 = (trigger_V_reg_2192_pp0_iter1_reg & shl_ln825_5_fu_1246_p2);

assign and_ln825_6_fu_1324_p2 = (trigger_V_reg_2192_pp0_iter1_reg & shl_ln825_6_fu_1318_p2);

assign and_ln825_7_fu_1396_p2 = (trigger_V_reg_2192_pp0_iter1_reg & shl_ln825_7_fu_1390_p2);

assign and_ln825_fu_892_p2 = (trigger_V_reg_2192_pp0_iter1_reg & shl_ln825_fu_886_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((out_r_TREADY_int_regslice == 1'b0) & (trunc_ln164_1_reg_2571_pp0_iter6_reg == 1'd1) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((postage_stream_TVALID_int_regslice == 1'b0) & (1'b1 == 1'b1)) | ((ap_enable_reg_pp0_iter8 == 1'b1) & ((regslice_both_out_r_V_data_V_U_apdone_blk == 1'b1) | ((out_r_TREADY_int_regslice == 1'b0) & (trunc_ln164_1_reg_2571_pp0_iter7_reg == 1'd1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((postage_stream_TVALID_int_regslice == 1'b0) & (1'b1 == 1'b1)) | ((ap_enable_reg_pp0_iter8 == 1'b1) & ((regslice_both_out_r_V_data_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state9_io) | ((out_r_TREADY_int_regslice == 1'b0) & (trunc_ln164_1_reg_2571_pp0_iter7_reg == 1'd1)))) | ((ap_enable_reg_pp0_iter7 == 1'b1) & ((1'b1 == ap_block_state8_io) | ((out_r_TREADY_int_regslice == 1'b0) & (trunc_ln164_1_reg_2571_pp0_iter6_reg == 1'd1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((postage_stream_TVALID_int_regslice == 1'b0) & (1'b1 == 1'b1)) | ((ap_enable_reg_pp0_iter8 == 1'b1) & ((regslice_both_out_r_V_data_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state9_io) | ((out_r_TREADY_int_regslice == 1'b0) & (trunc_ln164_1_reg_2571_pp0_iter7_reg == 1'd1)))) | ((ap_enable_reg_pp0_iter7 == 1'b1) & ((1'b1 == ap_block_state8_io) | ((out_r_TREADY_int_regslice == 1'b0) & (trunc_ln164_1_reg_2571_pp0_iter6_reg == 1'd1)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (postage_stream_TVALID_int_regslice == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((out_r_TREADY_int_regslice == 1'b0) & (trunc_ln164_1_reg_2571_pp0_iter6_reg == 1'd1));
end

always @ (*) begin
    ap_block_state8_pp0_stage0_iter7 = ((out_r_TREADY_int_regslice == 1'b0) & (trunc_ln164_1_reg_2571_pp0_iter6_reg == 1'd1));
end

always @ (*) begin
    ap_block_state9_io = ((out_r_TREADY_int_regslice == 1'b0) & (trunc_ln164_1_reg_2571_pp0_iter7_reg == 1'd1));
end

always @ (*) begin
    ap_block_state9_pp0_stage0_iter8 = ((regslice_both_out_r_V_data_V_U_apdone_blk == 1'b1) | ((out_r_TREADY_int_regslice == 1'b0) & (trunc_ln164_1_reg_2571_pp0_iter7_reg == 1'd1)));
end

always @ (*) begin
    ap_condition_1736 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1065_reg_2340 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_1745 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1065_1_reg_2345 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_1755 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1065_2_reg_2350 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_1765 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1065_3_reg_2355 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_1775 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1065_4_reg_2360 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_1785 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1065_5_reg_2365 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_1795 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1065_6_reg_2370 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_1805 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1065_7_reg_2375 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_588 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_overflow_13_reg_604 = 'bx;

assign ap_phi_reg_pp0_iter0_p_overflow_1_reg_500 = 'bx;

assign ap_phi_reg_pp0_iter0_p_overflow_3_reg_536 = 'bx;

assign ap_phi_reg_pp0_iter0_p_overflow_7_reg_563 = 'bx;

assign ap_phi_reg_pp0_iter0_p_overflow_9_reg_577 = 'bx;

assign ap_phi_reg_pp0_iter4_empty_46_reg_515 = 'bx;

assign ap_phi_reg_pp0_iter5_p_overflow_5_reg_549 = 'bx;

assign ap_phi_reg_pp0_iter7_p_overflow_11_reg_590 = 'bx;

assign ap_phi_reg_pp0_iter8_p_overflow_15_reg_617 = 'bx;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_38_fu_1999_p1 = postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_7_dout[34:0];

assign empty_39_fu_1962_p1 = postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_6_dout[34:0];

assign empty_40_fu_1925_p1 = postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_5_dout[34:0];

assign empty_41_fu_1888_p1 = postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_4_dout[34:0];

assign empty_42_fu_1851_p1 = postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_3_dout[34:0];

assign empty_43_fu_1814_p1 = postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_2_dout[34:0];

assign empty_44_fu_1777_p1 = postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_1_dout[34:0];

assign empty_45_fu_2036_p1 = postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_dout[34:0];

assign foo_last_fu_2091_p3 = ap_phi_mux_empty_46_phi_fu_518_p16[32'd72];

assign group_V_fu_639_p1 = postage_stream_TUSER_int_regslice[8:0];

assign icmp_ln1065_1_fu_809_p2 = ((gid_V_1_reg_2269 == group_V_reg_2180) ? 1'b1 : 1'b0);

assign icmp_ln1065_2_fu_813_p2 = ((gid_V_2_reg_2280 == group_V_reg_2180) ? 1'b1 : 1'b0);

assign icmp_ln1065_3_fu_817_p2 = ((gid_V_3_reg_2291 == group_V_reg_2180) ? 1'b1 : 1'b0);

assign icmp_ln1065_4_fu_821_p2 = ((gid_V_4_reg_2302 == group_V_reg_2180) ? 1'b1 : 1'b0);

assign icmp_ln1065_5_fu_825_p2 = ((gid_V_5_reg_2313 == group_V_reg_2180) ? 1'b1 : 1'b0);

assign icmp_ln1065_6_fu_829_p2 = ((gid_V_6_reg_2324 == group_V_reg_2180) ? 1'b1 : 1'b0);

assign icmp_ln1065_7_fu_833_p2 = ((gid_V_7_reg_2335 == group_V_reg_2180) ? 1'b1 : 1'b0);

assign icmp_ln1065_fu_805_p2 = ((gid_V_reg_2258 == group_V_reg_2180) ? 1'b1 : 1'b0);

assign icmp_ln255_1_fu_943_p2 = ((postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_6 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln255_2_fu_1015_p2 = ((postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_5 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln255_3_fu_1087_p2 = ((postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_4 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln255_4_fu_1159_p2 = ((postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_3 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln255_5_fu_1231_p2 = ((postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_2 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln255_6_fu_1303_p2 = ((postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_1 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln255_7_fu_1375_p2 = ((postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln255_fu_871_p2 = ((postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_7 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln288_fu_1737_p2 = ((sending_i > 8'd6) ? 1'b1 : 1'b0);

assign lane_V_1_fu_707_p1 = monitor_1[1:0];

assign lane_V_2_fu_721_p1 = monitor_2[1:0];

assign lane_V_3_fu_735_p1 = monitor_3[1:0];

assign lane_V_4_fu_749_p1 = monitor_4[1:0];

assign lane_V_5_fu_763_p1 = monitor_5[1:0];

assign lane_V_6_fu_777_p1 = monitor_6[1:0];

assign lane_V_7_fu_791_p1 = monitor_7[1:0];

assign lane_V_fu_693_p1 = monitor_0[1:0];

assign nexttocap_1_fu_931_p2 = ($signed(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_6) + $signed(8'd255));

assign nexttocap_2_fu_1003_p2 = ($signed(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_5) + $signed(8'd255));

assign nexttocap_3_fu_1075_p2 = ($signed(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_4) + $signed(8'd255));

assign nexttocap_4_fu_1147_p2 = ($signed(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_3) + $signed(8'd255));

assign nexttocap_5_fu_1219_p2 = ($signed(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_2) + $signed(8'd255));

assign nexttocap_6_fu_1291_p2 = ($signed(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_1) + $signed(8'd255));

assign nexttocap_7_fu_1363_p2 = ($signed(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture) + $signed(8'd255));

assign nexttocap_fu_859_p2 = ($signed(postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_7) + $signed(8'd255));

assign or_ln185_1_fu_1478_p2 = (tmp_5_fu_1470_p4 | 41'd8589934592);

assign or_ln185_2_fu_1520_p2 = (tmp_9_fu_1512_p4 | 41'd12884901888);

assign or_ln185_3_fu_1562_p2 = (tmp_14_fu_1554_p4 | 41'd17179869184);

assign or_ln185_4_fu_1604_p2 = (tmp_18_fu_1596_p4 | 41'd21474836480);

assign or_ln185_5_fu_1646_p2 = (tmp_23_fu_1638_p4 | 41'd25769803776);

assign or_ln185_6_fu_1688_p2 = (tmp_26_fu_1680_p4 | 41'd30064771072);

assign or_ln185_fu_1436_p2 = (tmp_fu_1428_p4 | 41'd4294967296);

assign out_r_TVALID = regslice_both_out_r_V_data_V_U_vld_out;

assign overflow = ap_phi_mux_p_overflow_15_phi_fu_620_p6;

assign p_Result_1_fu_969_p2 = ((and_ln825_1_fu_964_p2 == 4'd0) ? 1'b1 : 1'b0);

assign p_Result_2_fu_1041_p2 = ((and_ln825_2_fu_1036_p2 == 4'd0) ? 1'b1 : 1'b0);

assign p_Result_3_fu_1113_p2 = ((and_ln825_3_fu_1108_p2 == 4'd0) ? 1'b1 : 1'b0);

assign p_Result_4_fu_1185_p2 = ((and_ln825_4_fu_1180_p2 == 4'd0) ? 1'b1 : 1'b0);

assign p_Result_5_fu_1257_p2 = ((and_ln825_5_fu_1252_p2 == 4'd0) ? 1'b1 : 1'b0);

assign p_Result_6_fu_1329_p2 = ((and_ln825_6_fu_1324_p2 == 4'd0) ? 1'b1 : 1'b0);

assign p_Result_7_fu_1401_p2 = ((and_ln825_7_fu_1396_p2 == 4'd0) ? 1'b1 : 1'b0);

assign p_Result_s_fu_897_p2 = ((and_ln825_fu_892_p2 == 4'd0) ? 1'b1 : 1'b0);

assign p_overflow_10_fu_2150_p2 = (xor_ln261_4_fu_2145_p2 | ap_phi_reg_pp0_iter7_p_overflow_9_reg_577);

assign p_overflow_12_fu_2162_p2 = (xor_ln261_5_fu_2157_p2 | ap_phi_mux_p_overflow_11_phi_fu_593_p6);

assign p_overflow_14_fu_2173_p2 = (xor_ln261_6_fu_2168_p2 | ap_phi_mux_p_overflow_13_phi_fu_607_p6);

assign p_overflow_2_fu_1727_p2 = (xor_ln261_fu_1722_p2 | ap_phi_mux_p_overflow_1_phi_fu_504_p6);

assign p_overflow_4_fu_2116_p2 = (xor_ln261_1_fu_2111_p2 | ap_phi_reg_pp0_iter5_p_overflow_3_reg_536);

assign p_overflow_6_fu_2128_p2 = (xor_ln261_2_fu_2123_p2 | ap_phi_mux_p_overflow_5_phi_fu_552_p6);

assign p_overflow_8_fu_2139_p2 = (xor_ln261_3_fu_2134_p2 | ap_phi_mux_p_overflow_7_phi_fu_566_p6);

assign p_overflow_fu_1422_p0 = postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_7_full_n;

assign p_overflow_fu_1422_p2 = (p_overflow_fu_1422_p0 ^ 1'd1);

assign packet_in_flight_load_load_fu_2061_p1 = packet_in_flight;

assign postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_1_din = {{{tmp_25_fu_1662_p3}, {tmp_24_fu_1652_p4}}, {DataOut_6_reg_2487}};

assign postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_1_read_nbread_fu_424_p2_0 = postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_1_empty_n;

assign postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_2_din = {{{tmp_21_fu_1620_p3}, {tmp_20_fu_1610_p4}}, {DataOut_5_reg_2469}};

assign postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_2_read_nbread_fu_430_p2_0 = postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_2_empty_n;

assign postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_3_din = {{{tmp_17_fu_1578_p3}, {tmp_15_fu_1568_p4}}, {DataOut_4_reg_2451}};

assign postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_3_read_nbread_fu_436_p2_0 = postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_3_empty_n;

assign postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_4_din = {{{tmp_12_fu_1536_p3}, {tmp_11_fu_1526_p4}}, {DataOut_3_reg_2433}};

assign postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_4_read_nbread_fu_442_p2_0 = postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_4_empty_n;

assign postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_5_din = {{{tmp_8_fu_1494_p3}, {tmp_6_fu_1484_p4}}, {DataOut_2_reg_2415}};

assign postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_5_read_nbread_fu_448_p2_0 = postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_5_empty_n;

assign postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_6_din = {{{tmp_3_fu_1452_p3}, {tmp_1_fu_1442_p4}}, {DataOut_1_reg_2397}};

assign postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_6_read_nbread_fu_454_p2_0 = postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_6_empty_n;

assign postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_7_din = {{{tmp_last_reg_2385}, {3'd0}}, {DataOut_reg_2380}};

assign postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_7_read_nbread_fu_460_p2_0 = postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_7_empty_n;

assign postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_din = {{{tmp_29_fu_1704_p3}, {tmp_27_fu_1694_p4}}, {DataOut_7_reg_2505}};

assign postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_read_nbread_fu_466_p2_0 = postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_empty_n;

assign postage_stream_TREADY = regslice_both_postage_stream_V_data_V_U_ack_in;

assign sending_plus1_fu_1749_p3 = ((icmp_ln288_fu_1737_p2[0:0] == 1'b1) ? 8'd0 : add_ln288_fu_1743_p2);

assign shl_ln825_1_fu_958_p2 = 4'd1 << zext_ln825_1_fu_955_p1;

assign shl_ln825_2_fu_1030_p2 = 4'd1 << zext_ln825_2_fu_1027_p1;

assign shl_ln825_3_fu_1102_p2 = 4'd1 << zext_ln825_3_fu_1099_p1;

assign shl_ln825_4_fu_1174_p2 = 4'd1 << zext_ln825_4_fu_1171_p1;

assign shl_ln825_5_fu_1246_p2 = 4'd1 << zext_ln825_5_fu_1243_p1;

assign shl_ln825_6_fu_1318_p2 = 4'd1 << zext_ln825_6_fu_1315_p1;

assign shl_ln825_7_fu_1390_p2 = 4'd1 << zext_ln825_7_fu_1387_p1;

assign shl_ln825_fu_886_p2 = 4'd1 << zext_ln825_fu_883_p1;

assign tmp_11_fu_1526_p4 = {{or_ln185_2_fu_1520_p2[34:32]}};

assign tmp_12_fu_1536_p3 = or_ln185_2_fu_1520_p2[32'd40];

assign tmp_14_fu_1554_p4 = {{{tmp_last_4_reg_2457}, {8'd0}}, {DataOut_4_reg_2451}};

assign tmp_15_fu_1568_p4 = {{or_ln185_3_fu_1562_p2[34:32]}};

assign tmp_17_fu_1578_p3 = or_ln185_3_fu_1562_p2[32'd40];

assign tmp_18_fu_1596_p4 = {{{tmp_last_5_reg_2475}, {8'd0}}, {DataOut_5_reg_2469}};

assign tmp_1_fu_1442_p4 = {{or_ln185_fu_1436_p2[34:32]}};

assign tmp_20_fu_1610_p4 = {{or_ln185_4_fu_1604_p2[34:32]}};

assign tmp_21_fu_1620_p3 = or_ln185_4_fu_1604_p2[32'd40];

assign tmp_22_fu_2044_p5 = {{{{tmp_30_fu_2028_p3}, {tmp_30_cast_fu_2040_p1}}, {31'd0}}, {postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_read_nbread_fu_466_p2_0}};

assign tmp_23_fu_1638_p4 = {{{tmp_last_6_reg_2493}, {8'd0}}, {DataOut_6_reg_2487}};

assign tmp_24_fu_1652_p4 = {{or_ln185_5_fu_1646_p2[34:32]}};

assign tmp_25_fu_1662_p3 = or_ln185_5_fu_1646_p2[32'd40];

assign tmp_26_fu_1680_p4 = {{{tmp_last_7_reg_2511}, {8'd0}}, {DataOut_7_reg_2505}};

assign tmp_27_fu_1694_p4 = {{or_ln185_6_fu_1688_p2[34:32]}};

assign tmp_28_fu_2007_p5 = {{{{tmp_31_fu_1991_p3}, {tmp_31_cast_fu_2003_p1}}, {31'd0}}, {postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_7_read_nbread_fu_460_p2_0}};

assign tmp_29_fu_1704_p3 = or_ln185_6_fu_1688_p2[32'd40];

assign tmp_30_cast_fu_2040_p1 = empty_45_fu_2036_p1;

assign tmp_30_fu_2028_p3 = postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_dout[32'd35];

assign tmp_31_cast_fu_2003_p1 = empty_38_fu_1999_p1;

assign tmp_31_fu_1991_p3 = postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_7_dout[32'd35];

assign tmp_32_cast_fu_1966_p1 = empty_39_fu_1962_p1;

assign tmp_32_fu_1954_p3 = postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_6_dout[32'd35];

assign tmp_33_fu_1970_p5 = {{{{tmp_32_fu_1954_p3}, {tmp_32_cast_fu_1966_p1}}, {31'd0}}, {postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_6_read_nbread_fu_454_p2_0}};

assign tmp_34_cast_fu_1929_p1 = empty_40_fu_1925_p1;

assign tmp_34_fu_1917_p3 = postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_5_dout[32'd35];

assign tmp_35_fu_1933_p5 = {{{{tmp_34_fu_1917_p3}, {tmp_34_cast_fu_1929_p1}}, {31'd0}}, {postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_5_read_nbread_fu_448_p2_0}};

assign tmp_36_cast_fu_1892_p1 = empty_41_fu_1888_p1;

assign tmp_36_fu_1880_p3 = postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_4_dout[32'd35];

assign tmp_37_fu_1896_p5 = {{{{tmp_36_fu_1880_p3}, {tmp_36_cast_fu_1892_p1}}, {31'd0}}, {postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_4_read_nbread_fu_442_p2_0}};

assign tmp_38_cast_fu_1855_p1 = empty_42_fu_1851_p1;

assign tmp_38_fu_1843_p3 = postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_3_dout[32'd35];

assign tmp_39_fu_1859_p5 = {{{{tmp_38_fu_1843_p3}, {tmp_38_cast_fu_1855_p1}}, {31'd0}}, {postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_3_read_nbread_fu_436_p2_0}};

assign tmp_3_fu_1452_p3 = or_ln185_fu_1436_p2[32'd40];

assign tmp_40_cast_fu_1818_p1 = empty_43_fu_1814_p1;

assign tmp_40_fu_1806_p3 = postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_2_dout[32'd35];

assign tmp_41_fu_1822_p5 = {{{{tmp_40_fu_1806_p3}, {tmp_40_cast_fu_1818_p1}}, {31'd0}}, {postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_2_read_nbread_fu_430_p2_0}};

assign tmp_42_cast_fu_1781_p1 = empty_44_fu_1777_p1;

assign tmp_42_fu_1769_p3 = postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_1_dout[32'd35];

assign tmp_43_fu_1785_p5 = {{{{tmp_42_fu_1769_p3}, {tmp_42_cast_fu_1781_p1}}, {31'd0}}, {postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_buff_1_read_nbread_fu_424_p2_0}};

assign tmp_5_fu_1470_p4 = {{{tmp_last_2_reg_2421}, {8'd0}}, {DataOut_2_reg_2415}};

assign tmp_6_fu_1484_p4 = {{or_ln185_1_fu_1478_p2[34:32]}};

assign tmp_8_fu_1494_p3 = or_ln185_1_fu_1478_p2[32'd40];

assign tmp_9_fu_1512_p4 = {{{tmp_last_3_reg_2439}, {8'd0}}, {DataOut_3_reg_2433}};

assign tmp_fu_1428_p4 = {{{tmp_last_1_reg_2403}, {8'd0}}, {DataOut_1_reg_2397}};

assign tmp_last_1_fu_937_p2 = ((postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_6 == 8'd1) ? 1'b1 : 1'b0);

assign tmp_last_2_fu_1009_p2 = ((postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_5 == 8'd1) ? 1'b1 : 1'b0);

assign tmp_last_3_fu_1081_p2 = ((postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_4 == 8'd1) ? 1'b1 : 1'b0);

assign tmp_last_4_fu_1153_p2 = ((postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_3 == 8'd1) ? 1'b1 : 1'b0);

assign tmp_last_5_fu_1225_p2 = ((postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_2 == 8'd1) ? 1'b1 : 1'b0);

assign tmp_last_6_fu_1297_p2 = ((postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_1 == 8'd1) ? 1'b1 : 1'b0);

assign tmp_last_7_fu_1369_p2 = ((postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture == 8'd1) ? 1'b1 : 1'b0);

assign tmp_last_fu_865_p2 = ((postage_filter_w_interconn_stream_ap_uint_stream_axis_0_bool_tocapture_7 == 8'd1) ? 1'b1 : 1'b0);

assign trunc_ln164_1_fu_2057_p1 = ap_phi_mux_empty_46_phi_fu_518_p16[0:0];

assign trunc_ln164_fu_1757_p1 = sending_i[2:0];

assign xor_ln261_1_fu_2111_p2 = (tmp_4_reg_2533_pp0_iter4_reg ^ 1'd1);

assign xor_ln261_2_fu_2123_p2 = (tmp_s_reg_2538_pp0_iter4_reg ^ 1'd1);

assign xor_ln261_3_fu_2134_p2 = (tmp_10_reg_2543_pp0_iter5_reg ^ 1'd1);

assign xor_ln261_4_fu_2145_p2 = (tmp_13_reg_2548_pp0_iter6_reg ^ 1'd1);

assign xor_ln261_5_fu_2157_p2 = (tmp_16_reg_2553_pp0_iter6_reg ^ 1'd1);

assign xor_ln261_6_fu_2168_p2 = (tmp_19_reg_2558_pp0_iter7_reg ^ 1'd1);

assign xor_ln261_fu_1722_p2 = (tmp_7_reg_2528 ^ 1'd1);

assign zext_ln825_1_fu_955_p1 = lane_V_1_reg_2263_pp0_iter1_reg;

assign zext_ln825_2_fu_1027_p1 = lane_V_2_reg_2274_pp0_iter1_reg;

assign zext_ln825_3_fu_1099_p1 = lane_V_3_reg_2285_pp0_iter1_reg;

assign zext_ln825_4_fu_1171_p1 = lane_V_4_reg_2296_pp0_iter1_reg;

assign zext_ln825_5_fu_1243_p1 = lane_V_5_reg_2307_pp0_iter1_reg;

assign zext_ln825_6_fu_1315_p1 = lane_V_6_reg_2318_pp0_iter1_reg;

assign zext_ln825_7_fu_1387_p1 = lane_V_7_reg_2329_pp0_iter1_reg;

assign zext_ln825_fu_883_p1 = lane_V_reg_2252_pp0_iter1_reg;


reg find_kernel_block = 0;
// synthesis translate_off
`include "postage_filter_w_interconn_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //postage_filter_w_interconn

