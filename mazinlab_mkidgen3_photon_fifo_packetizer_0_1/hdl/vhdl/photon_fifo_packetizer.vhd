-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity photon_fifo_packetizer is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    photon_fifos_0_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    photon_fifos_0_TVALID : IN STD_LOGIC;
    photon_fifos_0_TREADY : OUT STD_LOGIC;
    photon_fifos_1_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    photon_fifos_1_TVALID : IN STD_LOGIC;
    photon_fifos_1_TREADY : OUT STD_LOGIC;
    photon_fifos_2_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    photon_fifos_2_TVALID : IN STD_LOGIC;
    photon_fifos_2_TREADY : OUT STD_LOGIC;
    photon_fifos_3_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    photon_fifos_3_TVALID : IN STD_LOGIC;
    photon_fifos_3_TREADY : OUT STD_LOGIC;
    photon_packets_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    photon_packets_TVALID : OUT STD_LOGIC;
    photon_packets_TREADY : IN STD_LOGIC;
    photon_packets_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    photon_packets_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    photon_packets_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of photon_fifo_packetizer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "photon_fifo_packetizer_photon_fifo_packetizer,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.953000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.382062,HLS_SYN_LAT=6,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=814,HLS_SYN_LUT=519,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011011";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal max_photons_per_packet_minus2 : STD_LOGIC_VECTOR (16 downto 0);
    signal approx_time_per_packet : STD_LOGIC_VECTOR (4 downto 0);
    signal readfrom : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal p_last_this : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal count_V : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal p_last_time_divided_V : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    signal photon_packets_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal read_reg_528 : STD_LOGIC_VECTOR (0 downto 0);
    signal read_reg_528_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal read_reg_528_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal approx_time_per_packet_read_reg_488 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal regslice_both_photon_packets_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state7_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal max_photons_per_packet_minus2_read_reg_494 : STD_LOGIC_VECTOR (16 downto 0);
    signal max_photons_per_packet_minus2_read_reg_494_pp0_iter1_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal max_photons_per_packet_minus2_read_reg_494_pp0_iter2_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal max_photons_per_packet_minus2_read_reg_494_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal max_photons_per_packet_minus2_read_reg_494_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_fu_221_p6 : STD_LOGIC_VECTOR (155 downto 0);
    signal readfrom_load_load_fu_183_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_257_p6 : STD_LOGIC_VECTOR (155 downto 0);
    signal tmp_s_fu_293_p6 : STD_LOGIC_VECTOR (155 downto 0);
    signal tmp_6_fu_329_p6 : STD_LOGIC_VECTOR (155 downto 0);
    signal shft_V_fu_348_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shft_V_reg_522 : STD_LOGIC_VECTOR (4 downto 0);
    signal read_fu_355_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal read_reg_528_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal read_reg_528_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal photon_time_V_reg_532 : STD_LOGIC_VECTOR (35 downto 0);
    signal photon_time_V_reg_532_pp0_iter2_reg : STD_LOGIC_VECTOR (35 downto 0);
    signal photon_time_V_reg_532_pp0_iter3_reg : STD_LOGIC_VECTOR (35 downto 0);
    signal photon_time_V_reg_532_pp0_iter4_reg : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_reg_538 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_reg_538_pp0_iter2_reg : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_reg_538_pp0_iter3_reg : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_reg_538_pp0_iter4_reg : STD_LOGIC_VECTOR (27 downto 0);
    signal shft_V_1_fu_384_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shft_V_1_reg_543 : STD_LOGIC_VECTOR (4 downto 0);
    signal time_divided_V_fu_399_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal time_divided_V_reg_553 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_phi_reg_pp0_iter0_empty_reg_170 : STD_LOGIC_VECTOR (155 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_reg_170 : STD_LOGIC_VECTOR (155 downto 0);
    signal add_ln886_fu_187_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_last_on_next_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln254_fu_468_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal photon_fifos_2_read_nbread_fu_128_p2_0 : STD_LOGIC_VECTOR (0 downto 0);
    signal photon_fifos_1_read_nbread_fu_134_p2_0 : STD_LOGIC_VECTOR (0 downto 0);
    signal photon_fifos_0_read_nbread_fu_140_p2_0 : STD_LOGIC_VECTOR (0 downto 0);
    signal photon_fifos_3_read_nbread_fu_146_p2_0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_7_fu_211_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln164_3_fu_207_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_5_fu_247_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln164_2_fu_243_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_4_fu_283_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln164_1_fu_279_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_3_fu_319_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln164_fu_315_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal icmp_ln1073_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1081_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_394_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_394_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal icmp_ln247_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1069_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln247_1_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln247_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln247_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln886_1_fu_462_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_394_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_photon_fifos_0_U_apdone_blk : STD_LOGIC;
    signal photon_fifos_0_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal photon_fifos_0_TVALID_int_regslice : STD_LOGIC;
    signal photon_fifos_0_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_photon_fifos_0_U_ack_in : STD_LOGIC;
    signal regslice_both_photon_fifos_1_U_apdone_blk : STD_LOGIC;
    signal photon_fifos_1_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal photon_fifos_1_TVALID_int_regslice : STD_LOGIC;
    signal photon_fifos_1_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_photon_fifos_1_U_ack_in : STD_LOGIC;
    signal regslice_both_photon_fifos_2_U_apdone_blk : STD_LOGIC;
    signal photon_fifos_2_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal photon_fifos_2_TVALID_int_regslice : STD_LOGIC;
    signal photon_fifos_2_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_photon_fifos_2_U_ack_in : STD_LOGIC;
    signal regslice_both_photon_fifos_3_U_apdone_blk : STD_LOGIC;
    signal photon_fifos_3_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal photon_fifos_3_TVALID_int_regslice : STD_LOGIC;
    signal photon_fifos_3_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_photon_fifos_3_U_ack_in : STD_LOGIC;
    signal photon_packets_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal photon_packets_TVALID_int_regslice : STD_LOGIC;
    signal photon_packets_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_photon_packets_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_photon_packets_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_photon_packets_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_photon_packets_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_photon_packets_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_photon_packets_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_photon_packets_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_photon_packets_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_photon_packets_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_photon_packets_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_condition_199 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component photon_fifo_packetizer_lshr_36ns_5ns_36_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (35 downto 0);
        din1 : IN STD_LOGIC_VECTOR (35 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component photon_fifo_packetizer_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        max_photons_per_packet_minus2 : OUT STD_LOGIC_VECTOR (16 downto 0);
        approx_time_per_packet : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component photon_fifo_packetizer_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    control_s_axi_U : component photon_fifo_packetizer_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        max_photons_per_packet_minus2 => max_photons_per_packet_minus2,
        approx_time_per_packet => approx_time_per_packet);

    lshr_36ns_5ns_36_2_1_U1 : component photon_fifo_packetizer_lshr_36ns_5ns_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 1,
        din0_WIDTH => 36,
        din1_WIDTH => 5,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => photon_time_V_reg_532_pp0_iter2_reg,
        din1 => grp_fu_394_p1,
        ce => grp_fu_394_ce,
        dout => grp_fu_394_p2);

    regslice_both_photon_fifos_0_U : component photon_fifo_packetizer_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => photon_fifos_0_TDATA,
        vld_in => photon_fifos_0_TVALID,
        ack_in => regslice_both_photon_fifos_0_U_ack_in,
        data_out => photon_fifos_0_TDATA_int_regslice,
        vld_out => photon_fifos_0_TVALID_int_regslice,
        ack_out => photon_fifos_0_TREADY_int_regslice,
        apdone_blk => regslice_both_photon_fifos_0_U_apdone_blk);

    regslice_both_photon_fifos_1_U : component photon_fifo_packetizer_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => photon_fifos_1_TDATA,
        vld_in => photon_fifos_1_TVALID,
        ack_in => regslice_both_photon_fifos_1_U_ack_in,
        data_out => photon_fifos_1_TDATA_int_regslice,
        vld_out => photon_fifos_1_TVALID_int_regslice,
        ack_out => photon_fifos_1_TREADY_int_regslice,
        apdone_blk => regslice_both_photon_fifos_1_U_apdone_blk);

    regslice_both_photon_fifos_2_U : component photon_fifo_packetizer_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => photon_fifos_2_TDATA,
        vld_in => photon_fifos_2_TVALID,
        ack_in => regslice_both_photon_fifos_2_U_ack_in,
        data_out => photon_fifos_2_TDATA_int_regslice,
        vld_out => photon_fifos_2_TVALID_int_regslice,
        ack_out => photon_fifos_2_TREADY_int_regslice,
        apdone_blk => regslice_both_photon_fifos_2_U_apdone_blk);

    regslice_both_photon_fifos_3_U : component photon_fifo_packetizer_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => photon_fifos_3_TDATA,
        vld_in => photon_fifos_3_TVALID,
        ack_in => regslice_both_photon_fifos_3_U_ack_in,
        data_out => photon_fifos_3_TDATA_int_regslice,
        vld_out => photon_fifos_3_TVALID_int_regslice,
        ack_out => photon_fifos_3_TREADY_int_regslice,
        apdone_blk => regslice_both_photon_fifos_3_U_apdone_blk);

    regslice_both_photon_packets_V_data_V_U : component photon_fifo_packetizer_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => photon_packets_TDATA_int_regslice,
        vld_in => photon_packets_TVALID_int_regslice,
        ack_in => photon_packets_TREADY_int_regslice,
        data_out => photon_packets_TDATA,
        vld_out => regslice_both_photon_packets_V_data_V_U_vld_out,
        ack_out => photon_packets_TREADY,
        apdone_blk => regslice_both_photon_packets_V_data_V_U_apdone_blk);

    regslice_both_photon_packets_V_keep_V_U : component photon_fifo_packetizer_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv8_0,
        vld_in => photon_packets_TVALID_int_regslice,
        ack_in => regslice_both_photon_packets_V_keep_V_U_ack_in_dummy,
        data_out => photon_packets_TKEEP,
        vld_out => regslice_both_photon_packets_V_keep_V_U_vld_out,
        ack_out => photon_packets_TREADY,
        apdone_blk => regslice_both_photon_packets_V_keep_V_U_apdone_blk);

    regslice_both_photon_packets_V_strb_V_U : component photon_fifo_packetizer_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv8_0,
        vld_in => photon_packets_TVALID_int_regslice,
        ack_in => regslice_both_photon_packets_V_strb_V_U_ack_in_dummy,
        data_out => photon_packets_TSTRB,
        vld_out => regslice_both_photon_packets_V_strb_V_U_vld_out,
        ack_out => photon_packets_TREADY,
        apdone_blk => regslice_both_photon_packets_V_strb_V_U_apdone_blk);

    regslice_both_photon_packets_V_last_V_U : component photon_fifo_packetizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => p_last_this,
        vld_in => photon_packets_TVALID_int_regslice,
        ack_in => regslice_both_photon_packets_V_last_V_U_ack_in_dummy,
        data_out => photon_packets_TLAST,
        vld_out => regslice_both_photon_packets_V_last_V_U_vld_out,
        ack_out => photon_packets_TREADY,
        apdone_blk => regslice_both_photon_packets_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_empty_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_199)) then
                if ((readfrom_load_load_fu_183_p1 = ap_const_lv2_3)) then 
                    ap_phi_reg_pp0_iter1_empty_reg_170 <= tmp_6_fu_329_p6;
                elsif ((readfrom_load_load_fu_183_p1 = ap_const_lv2_2)) then 
                    ap_phi_reg_pp0_iter1_empty_reg_170 <= tmp_2_fu_221_p6;
                elsif ((readfrom_load_load_fu_183_p1 = ap_const_lv2_1)) then 
                    ap_phi_reg_pp0_iter1_empty_reg_170 <= tmp_1_fu_257_p6;
                elsif ((readfrom_load_load_fu_183_p1 = ap_const_lv2_0)) then 
                    ap_phi_reg_pp0_iter1_empty_reg_170 <= tmp_s_fu_293_p6;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_empty_reg_170 <= ap_phi_reg_pp0_iter0_empty_reg_170;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                approx_time_per_packet_read_reg_488 <= approx_time_per_packet;
                max_photons_per_packet_minus2_read_reg_494 <= max_photons_per_packet_minus2;
                max_photons_per_packet_minus2_read_reg_494_pp0_iter1_reg <= max_photons_per_packet_minus2_read_reg_494;
                photon_time_V_reg_532 <= ap_phi_reg_pp0_iter1_empty_reg_170(99 downto 64);
                read_reg_528 <= read_fu_355_p1;
                shft_V_reg_522 <= shft_V_fu_348_p3;
                tmp_reg_538 <= ap_phi_reg_pp0_iter1_empty_reg_170(155 downto 128);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((read_reg_528_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                count_V <= select_ln254_fu_468_p3;
                p_last_this <= p_last_on_next_fu_451_p2;
                p_last_time_divided_V <= time_divided_V_reg_553;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                max_photons_per_packet_minus2_read_reg_494_pp0_iter2_reg <= max_photons_per_packet_minus2_read_reg_494_pp0_iter1_reg;
                max_photons_per_packet_minus2_read_reg_494_pp0_iter3_reg <= max_photons_per_packet_minus2_read_reg_494_pp0_iter2_reg;
                max_photons_per_packet_minus2_read_reg_494_pp0_iter4_reg <= max_photons_per_packet_minus2_read_reg_494_pp0_iter3_reg;
                photon_time_V_reg_532_pp0_iter2_reg <= photon_time_V_reg_532;
                photon_time_V_reg_532_pp0_iter3_reg <= photon_time_V_reg_532_pp0_iter2_reg;
                photon_time_V_reg_532_pp0_iter4_reg <= photon_time_V_reg_532_pp0_iter3_reg;
                read_reg_528_pp0_iter2_reg <= read_reg_528;
                read_reg_528_pp0_iter3_reg <= read_reg_528_pp0_iter2_reg;
                read_reg_528_pp0_iter4_reg <= read_reg_528_pp0_iter3_reg;
                read_reg_528_pp0_iter5_reg <= read_reg_528_pp0_iter4_reg;
                shft_V_1_reg_543 <= shft_V_1_fu_384_p3;
                time_divided_V_reg_553 <= time_divided_V_fu_399_p1;
                tmp_reg_538_pp0_iter2_reg <= tmp_reg_538;
                tmp_reg_538_pp0_iter3_reg <= tmp_reg_538_pp0_iter2_reg;
                tmp_reg_538_pp0_iter4_reg <= tmp_reg_538_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1))) then
                readfrom <= add_ln886_fu_187_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln886_1_fu_462_p2 <= std_logic_vector(unsigned(count_V) + unsigned(ap_const_lv17_1));
    add_ln886_fu_187_p2 <= std_logic_vector(unsigned(readfrom) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter5, read_reg_528_pp0_iter4_reg, ap_enable_reg_pp0_iter6, read_reg_528_pp0_iter5_reg, regslice_both_photon_packets_V_data_V_U_apdone_blk, photon_packets_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and ((regslice_both_photon_packets_V_data_V_U_apdone_blk = ap_const_logic_1) or ((read_reg_528_pp0_iter5_reg = ap_const_lv1_1) and (photon_packets_TREADY_int_regslice = ap_const_logic_0)))) or ((photon_packets_TREADY_int_regslice = ap_const_logic_0) and (read_reg_528_pp0_iter4_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter5, read_reg_528_pp0_iter4_reg, ap_enable_reg_pp0_iter6, read_reg_528_pp0_iter5_reg, ap_block_state6_io, regslice_both_photon_packets_V_data_V_U_apdone_blk, ap_block_state7_io, photon_packets_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and ((regslice_both_photon_packets_V_data_V_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state7_io) or ((read_reg_528_pp0_iter5_reg = ap_const_lv1_1) and (photon_packets_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state6_io) or ((photon_packets_TREADY_int_regslice = ap_const_logic_0) and (read_reg_528_pp0_iter4_reg = ap_const_lv1_1)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter5, read_reg_528_pp0_iter4_reg, ap_enable_reg_pp0_iter6, read_reg_528_pp0_iter5_reg, ap_block_state6_io, regslice_both_photon_packets_V_data_V_U_apdone_blk, ap_block_state7_io, photon_packets_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and ((regslice_both_photon_packets_V_data_V_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state7_io) or ((read_reg_528_pp0_iter5_reg = ap_const_lv1_1) and (photon_packets_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state6_io) or ((photon_packets_TREADY_int_regslice = ap_const_logic_0) and (read_reg_528_pp0_iter4_reg = ap_const_lv1_1)))));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_io_assign_proc : process(read_reg_528_pp0_iter4_reg, photon_packets_TREADY_int_regslice)
    begin
                ap_block_state6_io <= ((photon_packets_TREADY_int_regslice = ap_const_logic_0) and (read_reg_528_pp0_iter4_reg = ap_const_lv1_1));
    end process;


    ap_block_state6_pp0_stage0_iter5_assign_proc : process(read_reg_528_pp0_iter4_reg, photon_packets_TREADY_int_regslice)
    begin
                ap_block_state6_pp0_stage0_iter5 <= ((photon_packets_TREADY_int_regslice = ap_const_logic_0) and (read_reg_528_pp0_iter4_reg = ap_const_lv1_1));
    end process;


    ap_block_state7_io_assign_proc : process(read_reg_528_pp0_iter5_reg, photon_packets_TREADY_int_regslice)
    begin
                ap_block_state7_io <= ((read_reg_528_pp0_iter5_reg = ap_const_lv1_1) and (photon_packets_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state7_pp0_stage0_iter6_assign_proc : process(read_reg_528_pp0_iter5_reg, regslice_both_photon_packets_V_data_V_U_apdone_blk, photon_packets_TREADY_int_regslice)
    begin
                ap_block_state7_pp0_stage0_iter6 <= ((regslice_both_photon_packets_V_data_V_U_apdone_blk = ap_const_logic_1) or ((read_reg_528_pp0_iter5_reg = ap_const_lv1_1) and (photon_packets_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_condition_199_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_199 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1));
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_empty_reg_170 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    grp_fu_394_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_394_ce <= ap_const_logic_1;
        else 
            grp_fu_394_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shft_V_1_reg_543),36));
    icmp_ln1069_fu_423_p2 <= "0" when (time_divided_V_reg_553 = p_last_time_divided_V) else "1";
    icmp_ln1073_fu_343_p2 <= "1" when (unsigned(approx_time_per_packet_read_reg_488) < unsigned(ap_const_lv5_9)) else "0";
    icmp_ln1081_fu_379_p2 <= "1" when (unsigned(shft_V_reg_522) > unsigned(ap_const_lv5_14)) else "0";
    icmp_ln247_fu_428_p2 <= "1" when (unsigned(count_V) < unsigned(max_photons_per_packet_minus2_read_reg_494_pp0_iter4_reg)) else "0";
    or_ln247_fu_439_p2 <= (xor_ln247_1_fu_433_p2 or icmp_ln1069_fu_423_p2);
    p_last_on_next_fu_451_p2 <= (xor_ln247_fu_445_p2 and or_ln247_fu_439_p2);
    photon_fifos_0_TREADY <= regslice_both_photon_fifos_0_U_ack_in;

    photon_fifos_0_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, readfrom_load_load_fu_183_p1, photon_fifos_0_TVALID_int_regslice)
    begin
        if (((photon_fifos_0_TVALID_int_regslice = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (readfrom_load_load_fu_183_p1 = ap_const_lv2_0))) then 
            photon_fifos_0_TREADY_int_regslice <= ap_const_logic_1;
        else 
            photon_fifos_0_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    photon_fifos_0_read_nbread_fu_140_p2_0 <= (0=>(photon_fifos_0_TVALID_int_regslice), others=>'-');
    photon_fifos_1_TREADY <= regslice_both_photon_fifos_1_U_ack_in;

    photon_fifos_1_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, readfrom_load_load_fu_183_p1, photon_fifos_1_TVALID_int_regslice)
    begin
        if (((photon_fifos_1_TVALID_int_regslice = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (readfrom_load_load_fu_183_p1 = ap_const_lv2_1))) then 
            photon_fifos_1_TREADY_int_regslice <= ap_const_logic_1;
        else 
            photon_fifos_1_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    photon_fifos_1_read_nbread_fu_134_p2_0 <= (0=>(photon_fifos_1_TVALID_int_regslice), others=>'-');
    photon_fifos_2_TREADY <= regslice_both_photon_fifos_2_U_ack_in;

    photon_fifos_2_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, readfrom_load_load_fu_183_p1, photon_fifos_2_TVALID_int_regslice)
    begin
        if (((photon_fifos_2_TVALID_int_regslice = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (readfrom_load_load_fu_183_p1 = ap_const_lv2_2))) then 
            photon_fifos_2_TREADY_int_regslice <= ap_const_logic_1;
        else 
            photon_fifos_2_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    photon_fifos_2_read_nbread_fu_128_p2_0 <= (0=>(photon_fifos_2_TVALID_int_regslice), others=>'-');
    photon_fifos_3_TREADY <= regslice_both_photon_fifos_3_U_ack_in;

    photon_fifos_3_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, readfrom_load_load_fu_183_p1, photon_fifos_3_TVALID_int_regslice)
    begin
        if (((photon_fifos_3_TVALID_int_regslice = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (readfrom_load_load_fu_183_p1 = ap_const_lv2_3))) then 
            photon_fifos_3_TREADY_int_regslice <= ap_const_logic_1;
        else 
            photon_fifos_3_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    photon_fifos_3_read_nbread_fu_146_p2_0 <= (0=>(photon_fifos_3_TVALID_int_regslice), others=>'-');

    photon_packets_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0, read_reg_528_pp0_iter4_reg, ap_enable_reg_pp0_iter6, read_reg_528_pp0_iter5_reg, photon_packets_TREADY_int_regslice)
    begin
        if ((((read_reg_528_pp0_iter5_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((read_reg_528_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)))) then 
            photon_packets_TDATA_blk_n <= photon_packets_TREADY_int_regslice;
        else 
            photon_packets_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    photon_packets_TDATA_int_regslice <= (photon_time_V_reg_532_pp0_iter4_reg & tmp_reg_538_pp0_iter4_reg);
    photon_packets_TVALID <= regslice_both_photon_packets_V_data_V_U_vld_out;

    photon_packets_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter5, read_reg_528_pp0_iter4_reg, ap_block_pp0_stage0_11001)
    begin
        if (((read_reg_528_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            photon_packets_TVALID_int_regslice <= ap_const_logic_1;
        else 
            photon_packets_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    read_fu_355_p1 <= ap_phi_reg_pp0_iter1_empty_reg_170(1 - 1 downto 0);
    readfrom_load_load_fu_183_p1 <= readfrom;
    select_ln254_fu_468_p3 <= 
        ap_const_lv17_0 when (p_last_this(0) = '1') else 
        add_ln886_1_fu_462_p2;
    shft_V_1_fu_384_p3 <= 
        ap_const_lv5_14 when (icmp_ln1081_fu_379_p2(0) = '1') else 
        shft_V_reg_522;
    shft_V_fu_348_p3 <= 
        ap_const_lv5_9 when (icmp_ln1073_fu_343_p2(0) = '1') else 
        approx_time_per_packet_read_reg_488;
    time_divided_V_fu_399_p1 <= grp_fu_394_p2(27 - 1 downto 0);
    tmp_1_fu_257_p6 <= ((((tmp_5_fu_247_p4 & ap_const_lv28_0) & trunc_ln164_2_fu_243_p1) & ap_const_lv63_0) & photon_fifos_1_read_nbread_fu_134_p2_0);
    tmp_2_fu_221_p6 <= ((((tmp_7_fu_211_p4 & ap_const_lv28_0) & trunc_ln164_3_fu_207_p1) & ap_const_lv63_0) & photon_fifos_2_read_nbread_fu_128_p2_0);
    tmp_3_fu_319_p4 <= photon_fifos_3_TDATA_int_regslice(63 downto 36);
    tmp_4_fu_283_p4 <= photon_fifos_0_TDATA_int_regslice(63 downto 36);
    tmp_5_fu_247_p4 <= photon_fifos_1_TDATA_int_regslice(63 downto 36);
    tmp_6_fu_329_p6 <= ((((tmp_3_fu_319_p4 & ap_const_lv28_0) & trunc_ln164_fu_315_p1) & ap_const_lv63_0) & photon_fifos_3_read_nbread_fu_146_p2_0);
    tmp_7_fu_211_p4 <= photon_fifos_2_TDATA_int_regslice(63 downto 36);
    tmp_s_fu_293_p6 <= ((((tmp_4_fu_283_p4 & ap_const_lv28_0) & trunc_ln164_1_fu_279_p1) & ap_const_lv63_0) & photon_fifos_0_read_nbread_fu_140_p2_0);
    trunc_ln164_1_fu_279_p1 <= photon_fifos_0_TDATA_int_regslice(36 - 1 downto 0);
    trunc_ln164_2_fu_243_p1 <= photon_fifos_1_TDATA_int_regslice(36 - 1 downto 0);
    trunc_ln164_3_fu_207_p1 <= photon_fifos_2_TDATA_int_regslice(36 - 1 downto 0);
    trunc_ln164_fu_315_p1 <= photon_fifos_3_TDATA_int_regslice(36 - 1 downto 0);
    xor_ln247_1_fu_433_p2 <= (icmp_ln247_fu_428_p2 xor ap_const_lv1_1);
    xor_ln247_fu_445_p2 <= (p_last_this xor ap_const_lv1_1);
end behav;
