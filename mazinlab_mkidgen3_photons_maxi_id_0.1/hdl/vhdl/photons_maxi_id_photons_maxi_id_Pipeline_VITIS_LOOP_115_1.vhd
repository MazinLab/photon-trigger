-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity photons_maxi_id_photons_maxi_id_Pipeline_VITIS_LOOP_115_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    n_photons_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    n_photons_ce0 : OUT STD_LOGIC;
    n_photons_we0 : OUT STD_LOGIC;
    n_photons_d0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    idxprom : IN STD_LOGIC_VECTOR (0 downto 0);
    p_ab_load_cast9 : IN STD_LOGIC_VECTOR (0 downto 0);
    active_buffer : OUT STD_LOGIC_VECTOR (7 downto 0);
    active_buffer_ap_vld : OUT STD_LOGIC;
    photons_TDATA : IN STD_LOGIC_VECTOR (47 downto 0);
    photons_TVALID : IN STD_LOGIC;
    photons_TREADY : OUT STD_LOGIC;
    photons_out : IN STD_LOGIC_VECTOR (63 downto 0);
    sext_ln134 : IN STD_LOGIC_VECTOR (17 downto 0);
    trunc_ln132_3 : IN STD_LOGIC_VECTOR (2 downto 0) );
end;


architecture behav of photons_maxi_id_photons_maxi_id_Pipeline_VITIS_LOOP_115_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv13_1FFF : STD_LOGIC_VECTOR (12 downto 0) := "1111111111111";
    constant ap_const_lv16_1F4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000111110100";
    constant ap_const_lv13_3F : STD_LOGIC_VECTOR (12 downto 0) := "0000000111111";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal and_ln115_reg_534 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state6_pp0_stage2_iter1 : BOOLEAN;
    signal and_ln115_reg_534_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state9_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln132_reg_543 : STD_LOGIC_VECTOR (0 downto 0);
    signal photons_TDATA_blk_n : STD_LOGIC;
    signal started_reg_215 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_elapsed_V_5_reg_529 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal and_ln115_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln115_reg_534_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln132_2_fu_321_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln132_2_reg_538 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln132_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1_reg_547 : STD_LOGIC_VECTOR (60 downto 0);
    signal select_ln132_fu_353_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln132_reg_552 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln132_1_fu_361_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln132_1_reg_557 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_562 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal trunc_ln132_2_fu_478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln132_2_reg_574 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_579 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_phi_mux_started_phi_fu_220_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal idxprom_cast_fu_237_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln132_fu_468_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal zext_ln132_6_fu_506_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln132_5_fu_502_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_start_V_fu_126 : STD_LOGIC_VECTOR (15 downto 0);
    signal photon_time_V_2_fu_439_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_elapsed_V_fu_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_elapsed_V_3_fu_432_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_p_elapsed_V_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_n_photons_V_fu_134 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_n_photons_V_3_fu_375_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln1073_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1073_1_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln132_5_fu_271_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln132_6_fu_283_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln132_fu_279_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln132_1_fu_291_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln132_fu_295_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln132_1_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln132_fu_309_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln134_cast_fu_228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln132_fu_305_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln132_3_fu_327_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln132_1_fu_315_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln132_fu_331_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal photon_time_V_fu_390_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln232_fu_400_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1081_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1081_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_elapsed_V_6_fu_406_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_elapsed_V_7_fu_412_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_elapsed_V_8_fu_424_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln132_1_fu_451_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln132_2_fu_447_p1 : STD_LOGIC_VECTOR (103 downto 0);
    signal zext_ln132_4_fu_458_p1 : STD_LOGIC_VECTOR (103 downto 0);
    signal shl_ln132_2_fu_462_p2 : STD_LOGIC_VECTOR (103 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component photons_maxi_id_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component photons_maxi_id_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    p_elapsed_V_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_elapsed_V_fu_130 <= ap_const_lv16_0;
            elsif (((ap_const_lv1_1 = and_ln115_reg_534) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                p_elapsed_V_fu_130 <= p_elapsed_V_3_fu_432_p3;
            end if; 
        end if;
    end process;

    started_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln115_reg_534_pp0_iter1_reg) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                started_reg_215 <= ap_const_lv1_1;
            elsif (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                started_reg_215 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln115_fu_265_p2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln132_2_reg_538 <= add_ln132_2_fu_321_p2;
                icmp_ln132_reg_543 <= icmp_ln132_fu_337_p2;
                    select_ln132_reg_552(1 downto 0) <= select_ln132_fu_353_p3(1 downto 0);
                tmp_1_reg_562 <= shl_ln132_fu_331_p2(12 downto 8);
                trunc_ln132_1_reg_557 <= trunc_ln132_1_fu_361_p1;
                trunc_ln1_reg_547 <= add_ln132_1_fu_315_p2(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln115_reg_534 <= and_ln115_fu_265_p2;
                and_ln115_reg_534_pp0_iter1_reg <= and_ln115_reg_534;
                and_ln115_reg_534_pp0_iter2_reg <= and_ln115_reg_534_pp0_iter1_reg;
                p_elapsed_V_5_reg_529 <= ap_sig_allocacmp_p_elapsed_V_5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln115_fu_265_p2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_n_photons_V_fu_134 <= p_n_photons_V_3_fu_375_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln115_reg_534) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                p_start_V_fu_126 <= photon_time_V_2_fu_439_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln115_reg_534) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp_2_reg_579 <= shl_ln132_2_fu_462_p2(103 downto 64);
                trunc_ln132_2_reg_574 <= trunc_ln132_2_fu_478_p1;
            end if;
        end if;
    end process;
    select_ln132_reg_552(31 downto 2) <= "000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to2, ap_done_pending_pp0, ap_block_pp0_stage1_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    active_buffer <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_ab_load_cast9),8));

    active_buffer_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, and_ln115_fu_265_p2)
    begin
        if (((ap_const_lv1_1 = and_ln115_fu_265_p2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            active_buffer_ap_vld <= ap_const_logic_1;
        else 
            active_buffer_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln132_1_fu_315_p2 <= std_logic_vector(unsigned(add_ln132_fu_309_p2) + unsigned(sext_ln134_cast_fu_228_p1));
    add_ln132_2_fu_321_p2 <= std_logic_vector(unsigned(trunc_ln132_3) + unsigned(trunc_ln132_fu_305_p1));
    add_ln132_fu_309_p2 <= std_logic_vector(signed(sext_ln132_1_fu_301_p1) + signed(photons_out));
    and_ln1081_fu_418_p2 <= (icmp_ln1081_fu_394_p2 and ap_phi_mux_started_phi_fu_220_p4);
    and_ln115_fu_265_p2 <= (icmp_ln1073_fu_253_p2 and icmp_ln1073_1_fu_259_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, and_ln115_reg_534, photons_TVALID, ap_block_state2_io)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state2_io) or ((ap_const_lv1_1 = and_ln115_reg_534) and (photons_TVALID = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, and_ln115_reg_534, photons_TVALID, ap_block_state2_io)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state2_io) or ((ap_const_lv1_1 = and_ln115_reg_534) and (photons_TVALID = ap_const_logic_0))));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_01001_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem_BVALID, and_ln115_reg_534_pp0_iter2_reg)
    begin
                ap_block_pp0_stage2_01001 <= ((ap_const_lv1_1 = and_ln115_reg_534_pp0_iter2_reg) and (m_axi_gmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, m_axi_gmem_BVALID, ap_block_state3_io, and_ln115_reg_534_pp0_iter2_reg)
    begin
                ap_block_pp0_stage2_11001 <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)) or ((ap_const_lv1_1 = and_ln115_reg_534_pp0_iter2_reg) and (m_axi_gmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, m_axi_gmem_BVALID, ap_block_state3_io, and_ln115_reg_534_pp0_iter2_reg)
    begin
                ap_block_pp0_stage2_subdone <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)) or ((ap_const_lv1_1 = and_ln115_reg_534_pp0_iter2_reg) and (m_axi_gmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_io_assign_proc : process(m_axi_gmem_AWREADY, and_ln115_reg_534)
    begin
                ap_block_state2_io <= ((ap_const_lv1_1 = and_ln115_reg_534) and (m_axi_gmem_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage1_iter0_assign_proc : process(and_ln115_reg_534, photons_TVALID)
    begin
                ap_block_state2_pp0_stage1_iter0 <= ((ap_const_lv1_1 = and_ln115_reg_534) and (photons_TVALID = ap_const_logic_0));
    end process;


    ap_block_state3_io_assign_proc : process(m_axi_gmem_WREADY, and_ln115_reg_534)
    begin
                ap_block_state3_io <= ((ap_const_lv1_1 = and_ln115_reg_534) and (m_axi_gmem_WREADY = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(m_axi_gmem_WREADY, icmp_ln132_reg_543)
    begin
                ap_block_state4_io <= ((m_axi_gmem_WREADY = ap_const_logic_0) and (icmp_ln132_reg_543 = ap_const_lv1_1));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp0_stage2_iter2_assign_proc : process(m_axi_gmem_BVALID, and_ln115_reg_534_pp0_iter2_reg)
    begin
                ap_block_state9_pp0_stage2_iter2 <= ((ap_const_lv1_1 = and_ln115_reg_534_pp0_iter2_reg) and (m_axi_gmem_BVALID = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, and_ln115_reg_534, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_lv1_0 = and_ln115_reg_534) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (not(((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0) and (ap_loop_exit_ready = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_phi_mux_started_phi_fu_220_p4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, started_reg_215, and_ln115_reg_534_pp0_iter1_reg)
    begin
        if (((ap_const_lv1_1 = and_ln115_reg_534_pp0_iter1_reg) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            ap_phi_mux_started_phi_fu_220_p4 <= ap_const_lv1_1;
        else 
            ap_phi_mux_started_phi_fu_220_p4 <= started_reg_215;
        end if; 
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_p_elapsed_V_5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, p_elapsed_V_fu_130)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_p_elapsed_V_5 <= ap_const_lv16_0;
        else 
            ap_sig_allocacmp_p_elapsed_V_5 <= p_elapsed_V_fu_130;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem_AWREADY, and_ln115_reg_534, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
        if (((ap_const_lv1_1 = and_ln115_reg_534) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, m_axi_gmem_BVALID, and_ln115_reg_534_pp0_iter2_reg, ap_block_pp0_stage2)
    begin
        if (((ap_const_lv1_1 = and_ln115_reg_534_pp0_iter2_reg) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, m_axi_gmem_WREADY, and_ln115_reg_534, ap_block_pp0_stage2, ap_block_pp0_stage0, icmp_ln132_reg_543)
    begin
        if ((((ap_const_lv1_1 = and_ln115_reg_534) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln132_reg_543 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln1073_1_fu_259_p2 <= "1" when (unsigned(ap_sig_allocacmp_p_elapsed_V_5) < unsigned(ap_const_lv16_1F4)) else "0";
    icmp_ln1073_fu_253_p2 <= "0" when (p_n_photons_V_fu_134 = ap_const_lv13_1FFF) else "1";
    icmp_ln1081_fu_394_p2 <= "1" when (unsigned(p_start_V_fu_126) > unsigned(photon_time_V_fu_390_p1)) else "0";
    icmp_ln132_fu_337_p2 <= "1" when (unsigned(add_ln132_2_fu_321_p2) > unsigned(ap_const_lv3_2)) else "0";
    idxprom_cast_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idxprom),64));
    m_axi_gmem_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_ARVALID <= ap_const_logic_0;
    m_axi_gmem_AWADDR <= sext_ln132_fu_468_p1;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= select_ln132_reg_552;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter0, and_ln115_reg_534, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_lv1_1 = and_ln115_reg_534) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, and_ln115_reg_534_pp0_iter2_reg, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_lv1_1 = and_ln115_reg_534_pp0_iter2_reg) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_RREADY <= ap_const_logic_0;

    m_axi_gmem_WDATA_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, and_ln115_reg_534, icmp_ln132_reg_543, trunc_ln132_2_reg_574, ap_block_pp0_stage2_01001, zext_ln132_6_fu_506_p1, ap_block_pp0_stage0_01001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln132_reg_543 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then 
            m_axi_gmem_WDATA <= zext_ln132_6_fu_506_p1;
        elsif (((ap_const_lv1_1 = and_ln115_reg_534) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_01001))) then 
            m_axi_gmem_WDATA <= trunc_ln132_2_reg_574;
        else 
            m_axi_gmem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;

    m_axi_gmem_WSTRB_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, and_ln115_reg_534, icmp_ln132_reg_543, trunc_ln132_1_reg_557, ap_block_pp0_stage2_01001, ap_block_pp0_stage0_01001, zext_ln132_5_fu_502_p1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln132_reg_543 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then 
            m_axi_gmem_WSTRB <= zext_ln132_5_fu_502_p1;
        elsif (((ap_const_lv1_1 = and_ln115_reg_534) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_01001))) then 
            m_axi_gmem_WSTRB <= trunc_ln132_1_reg_557;
        else 
            m_axi_gmem_WSTRB <= "XXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, and_ln115_reg_534, icmp_ln132_reg_543, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_lv1_1 = and_ln115_reg_534) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln132_reg_543 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    n_photons_address0 <= idxprom_cast_fu_237_p1(1 - 1 downto 0);

    n_photons_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            n_photons_ce0 <= ap_const_logic_1;
        else 
            n_photons_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    n_photons_d0 <= std_logic_vector(unsigned(p_n_photons_V_fu_134) + unsigned(ap_const_lv13_1));

    n_photons_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, and_ln115_fu_265_p2)
    begin
        if (((ap_const_lv1_1 = and_ln115_fu_265_p2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            n_photons_we0 <= ap_const_logic_1;
        else 
            n_photons_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_elapsed_V_3_fu_432_p3 <= 
        p_elapsed_V_8_fu_424_p3 when (ap_phi_mux_started_phi_fu_220_p4(0) = '1') else 
        p_elapsed_V_5_reg_529;
    p_elapsed_V_6_fu_406_p2 <= std_logic_vector(unsigned(photon_time_V_fu_390_p1) + unsigned(xor_ln232_fu_400_p2));
    p_elapsed_V_7_fu_412_p2 <= std_logic_vector(unsigned(photon_time_V_fu_390_p1) - unsigned(p_start_V_fu_126));
    p_elapsed_V_8_fu_424_p3 <= 
        p_elapsed_V_6_fu_406_p2 when (and_ln1081_fu_418_p2(0) = '1') else 
        p_elapsed_V_7_fu_412_p2;
    p_n_photons_V_3_fu_375_p2 <= std_logic_vector(unsigned(p_n_photons_V_fu_134) + unsigned(ap_const_lv13_1));
    photon_time_V_2_fu_439_p3 <= 
        p_start_V_fu_126 when (ap_phi_mux_started_phi_fu_220_p4(0) = '1') else 
        photon_time_V_fu_390_p1;
    photon_time_V_fu_390_p1 <= photons_TDATA(16 - 1 downto 0);

    photons_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter0, and_ln115_reg_534, photons_TVALID, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
        if (((ap_const_lv1_1 = and_ln115_reg_534) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            photons_TDATA_blk_n <= photons_TVALID;
        else 
            photons_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    photons_TREADY_assign_proc : process(ap_enable_reg_pp0_iter0, and_ln115_reg_534, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_lv1_1 = and_ln115_reg_534) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            photons_TREADY <= ap_const_logic_1;
        else 
            photons_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    select_ln132_fu_353_p3 <= 
        ap_const_lv32_2 when (icmp_ln132_fu_337_p2(0) = '1') else 
        ap_const_lv32_1;
        sext_ln132_1_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln132_fu_295_p2),64));

        sext_ln132_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_reg_547),64));

        sext_ln134_cast_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln134),64));

    shl_ln132_1_fu_451_p3 <= (add_ln132_2_reg_538 & ap_const_lv3_0);
    shl_ln132_2_fu_462_p2 <= std_logic_vector(shift_left(unsigned(zext_ln132_2_fu_447_p1),to_integer(unsigned('0' & zext_ln132_4_fu_458_p1(31-1 downto 0)))));
    shl_ln132_5_fu_271_p3 <= (p_n_photons_V_fu_134 & ap_const_lv3_0);
    shl_ln132_6_fu_283_p3 <= (p_n_photons_V_fu_134 & ap_const_lv1_0);
    shl_ln132_fu_331_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv13_3F),to_integer(unsigned('0' & zext_ln132_3_fu_327_p1(13-1 downto 0)))));
    sub_ln132_fu_295_p2 <= std_logic_vector(unsigned(zext_ln132_fu_279_p1) - unsigned(zext_ln132_1_fu_291_p1));
    trunc_ln132_1_fu_361_p1 <= shl_ln132_fu_331_p2(8 - 1 downto 0);
    trunc_ln132_2_fu_478_p1 <= shl_ln132_2_fu_462_p2(64 - 1 downto 0);
    trunc_ln132_fu_305_p1 <= sub_ln132_fu_295_p2(3 - 1 downto 0);
    xor_ln232_fu_400_p2 <= (p_start_V_fu_126 xor ap_const_lv16_FFFF);
    zext_ln132_1_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln132_6_fu_283_p3),17));
    zext_ln132_2_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(photons_TDATA),104));
    zext_ln132_3_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln132_2_fu_321_p2),13));
    zext_ln132_4_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln132_1_fu_451_p3),104));
    zext_ln132_5_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_562),8));
    zext_ln132_6_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_579),64));
    zext_ln132_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln132_5_fu_271_p3),17));
end behav;
