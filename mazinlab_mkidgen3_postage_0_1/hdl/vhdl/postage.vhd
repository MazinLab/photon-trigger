-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity postage is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    instream_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    instream_TVALID : IN STD_LOGIC;
    instream_TREADY : OUT STD_LOGIC;
    instream_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    instream_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    instream_TUSER : IN STD_LOGIC_VECTOR (12 downto 0);
    instream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    iniq_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    iniq_TVALID : IN STD_LOGIC;
    iniq_TREADY : OUT STD_LOGIC;
    iniq_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
    iniq_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
    iniq_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    iq_out_0_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    iq_out_0_TVALID : OUT STD_LOGIC;
    iq_out_0_TREADY : IN STD_LOGIC;
    iq_out_0_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    iq_out_0_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    iq_out_0_TUSER : OUT STD_LOGIC_VECTOR (2 downto 0);
    iq_out_0_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    iq_out_1_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    iq_out_1_TVALID : OUT STD_LOGIC;
    iq_out_1_TREADY : IN STD_LOGIC;
    iq_out_1_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    iq_out_1_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    iq_out_1_TUSER : OUT STD_LOGIC_VECTOR (2 downto 0);
    iq_out_1_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    iq_out_2_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    iq_out_2_TVALID : OUT STD_LOGIC;
    iq_out_2_TREADY : IN STD_LOGIC;
    iq_out_2_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    iq_out_2_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    iq_out_2_TUSER : OUT STD_LOGIC_VECTOR (2 downto 0);
    iq_out_2_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    iq_out_3_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    iq_out_3_TVALID : OUT STD_LOGIC;
    iq_out_3_TREADY : IN STD_LOGIC;
    iq_out_3_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    iq_out_3_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    iq_out_3_TUSER : OUT STD_LOGIC_VECTOR (2 downto 0);
    iq_out_3_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    iq_out_4_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    iq_out_4_TVALID : OUT STD_LOGIC;
    iq_out_4_TREADY : IN STD_LOGIC;
    iq_out_4_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    iq_out_4_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    iq_out_4_TUSER : OUT STD_LOGIC_VECTOR (2 downto 0);
    iq_out_4_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    iq_out_5_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    iq_out_5_TVALID : OUT STD_LOGIC;
    iq_out_5_TREADY : IN STD_LOGIC;
    iq_out_5_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    iq_out_5_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    iq_out_5_TUSER : OUT STD_LOGIC_VECTOR (2 downto 0);
    iq_out_5_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    iq_out_6_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    iq_out_6_TVALID : OUT STD_LOGIC;
    iq_out_6_TREADY : IN STD_LOGIC;
    iq_out_6_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    iq_out_6_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    iq_out_6_TUSER : OUT STD_LOGIC_VECTOR (2 downto 0);
    iq_out_6_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    iq_out_7_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    iq_out_7_TVALID : OUT STD_LOGIC;
    iq_out_7_TREADY : IN STD_LOGIC;
    iq_out_7_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    iq_out_7_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    iq_out_7_TUSER : OUT STD_LOGIC_VECTOR (2 downto 0);
    iq_out_7_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of postage is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "postage_postage,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.307625,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1091,HLS_SYN_LUT=1594,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv8_5A : STD_LOGIC_VECTOR (7 downto 0) := "01011010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal monitor_0 : STD_LOGIC_VECTOR (11 downto 0);
    signal monitor_1 : STD_LOGIC_VECTOR (11 downto 0);
    signal monitor_2 : STD_LOGIC_VECTOR (11 downto 0);
    signal monitor_3 : STD_LOGIC_VECTOR (11 downto 0);
    signal monitor_4 : STD_LOGIC_VECTOR (11 downto 0);
    signal monitor_5 : STD_LOGIC_VECTOR (11 downto 0);
    signal monitor_6 : STD_LOGIC_VECTOR (11 downto 0);
    signal monitor_7 : STD_LOGIC_VECTOR (11 downto 0);
    signal tocapture_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tocapture_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tocapture_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tocapture_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tocapture_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tocapture_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tocapture_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tocapture_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal iqprereg_Array_0_ce0 : STD_LOGIC;
    signal iqprereg_Array_0_we0 : STD_LOGIC;
    signal iqprereg_Array_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqprereg_Array_1_ce0 : STD_LOGIC;
    signal iqprereg_Array_1_we0 : STD_LOGIC;
    signal iqprereg_Array_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqprereg_Array_2_ce0 : STD_LOGIC;
    signal iqprereg_Array_2_we0 : STD_LOGIC;
    signal iqprereg_Array_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqprereg_Array_3_ce0 : STD_LOGIC;
    signal iqprereg_Array_3_we0 : STD_LOGIC;
    signal iqprereg_Array_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqprereg_Array_4_ce0 : STD_LOGIC;
    signal iqprereg_Array_4_we0 : STD_LOGIC;
    signal iqprereg_Array_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqprereg_Array_5_ce0 : STD_LOGIC;
    signal iqprereg_Array_5_we0 : STD_LOGIC;
    signal iqprereg_Array_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqprereg_Array_6_ce0 : STD_LOGIC;
    signal iqprereg_Array_6_we0 : STD_LOGIC;
    signal iqprereg_Array_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqprereg_Array_7_ce0 : STD_LOGIC;
    signal iqprereg_Array_7_we0 : STD_LOGIC;
    signal iqprereg_Array_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal instream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_nbreadreq_fu_326_p7 : STD_LOGIC_VECTOR (0 downto 0);
    signal iniq_TDATA_blk_n : STD_LOGIC;
    signal iq_out_0_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal icmp_ln1049_reg_1480 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln379_reg_1485 : STD_LOGIC_VECTOR (0 downto 0);
    signal iq_out_1_TDATA_blk_n : STD_LOGIC;
    signal icmp_ln1049_1_reg_1502 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln379_1_reg_1507 : STD_LOGIC_VECTOR (0 downto 0);
    signal iq_out_2_TDATA_blk_n : STD_LOGIC;
    signal icmp_ln1049_2_reg_1524 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln379_2_reg_1529 : STD_LOGIC_VECTOR (0 downto 0);
    signal iq_out_3_TDATA_blk_n : STD_LOGIC;
    signal icmp_ln1049_3_reg_1546 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln379_3_reg_1551 : STD_LOGIC_VECTOR (0 downto 0);
    signal iq_out_4_TDATA_blk_n : STD_LOGIC;
    signal icmp_ln1049_4_reg_1568 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln379_4_reg_1573 : STD_LOGIC_VECTOR (0 downto 0);
    signal iq_out_5_TDATA_blk_n : STD_LOGIC;
    signal icmp_ln1049_5_reg_1590 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln379_5_reg_1595 : STD_LOGIC_VECTOR (0 downto 0);
    signal iq_out_6_TDATA_blk_n : STD_LOGIC;
    signal icmp_ln1049_6_reg_1612 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln379_6_reg_1617 : STD_LOGIC_VECTOR (0 downto 0);
    signal iq_out_7_TDATA_blk_n : STD_LOGIC;
    signal icmp_ln1049_7_reg_1634 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln379_7_reg_1639 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_V_reg_1344 : STD_LOGIC_VECTOR (11 downto 0);
    signal gid_V_reg_1349 : STD_LOGIC_VECTOR (8 downto 0);
    signal m_V_1_reg_1354 : STD_LOGIC_VECTOR (11 downto 0);
    signal gid_V_1_reg_1359 : STD_LOGIC_VECTOR (8 downto 0);
    signal m_V_2_reg_1364 : STD_LOGIC_VECTOR (11 downto 0);
    signal gid_V_2_reg_1369 : STD_LOGIC_VECTOR (8 downto 0);
    signal m_V_3_reg_1374 : STD_LOGIC_VECTOR (11 downto 0);
    signal gid_V_3_reg_1379 : STD_LOGIC_VECTOR (8 downto 0);
    signal m_V_4_reg_1384 : STD_LOGIC_VECTOR (11 downto 0);
    signal gid_V_4_reg_1389 : STD_LOGIC_VECTOR (8 downto 0);
    signal m_V_5_reg_1394 : STD_LOGIC_VECTOR (11 downto 0);
    signal gid_V_5_reg_1399 : STD_LOGIC_VECTOR (8 downto 0);
    signal m_V_6_reg_1404 : STD_LOGIC_VECTOR (11 downto 0);
    signal gid_V_6_reg_1409 : STD_LOGIC_VECTOR (8 downto 0);
    signal m_V_7_reg_1414 : STD_LOGIC_VECTOR (11 downto 0);
    signal gid_V_7_reg_1419 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_0_fu_632_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_0_reg_1427 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op259_write_state3 : BOOLEAN;
    signal ap_predicate_op263_write_state3 : BOOLEAN;
    signal ap_predicate_op267_write_state3 : BOOLEAN;
    signal ap_predicate_op271_write_state3 : BOOLEAN;
    signal ap_predicate_op275_write_state3 : BOOLEAN;
    signal ap_predicate_op279_write_state3 : BOOLEAN;
    signal ap_predicate_op283_write_state3 : BOOLEAN;
    signal ap_predicate_op287_write_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_1_reg_1439 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_2_reg_1451 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_3_reg_1463 : STD_LOGIC_VECTOR (31 downto 0);
    signal lane_V_fu_680_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lane_V_reg_1475 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1049_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln379_fu_692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_1489 : STD_LOGIC_VECTOR (0 downto 0);
    signal lane_V_1_fu_744_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lane_V_1_reg_1497 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1049_1_fu_747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln379_1_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_1_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_1_reg_1511 : STD_LOGIC_VECTOR (0 downto 0);
    signal lane_V_2_fu_808_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lane_V_2_reg_1519 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1049_2_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln379_2_fu_820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_2_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_2_reg_1533 : STD_LOGIC_VECTOR (0 downto 0);
    signal lane_V_3_fu_872_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lane_V_3_reg_1541 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1049_3_fu_875_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln379_3_fu_884_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_3_fu_890_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_3_reg_1555 : STD_LOGIC_VECTOR (0 downto 0);
    signal lane_V_4_fu_936_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lane_V_4_reg_1563 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1049_4_fu_939_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln379_4_fu_948_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_4_fu_954_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_4_reg_1577 : STD_LOGIC_VECTOR (0 downto 0);
    signal lane_V_5_fu_1000_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lane_V_5_reg_1585 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1049_5_fu_1003_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln379_5_fu_1012_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_5_fu_1018_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_5_reg_1599 : STD_LOGIC_VECTOR (0 downto 0);
    signal lane_V_6_fu_1064_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lane_V_6_reg_1607 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1049_6_fu_1067_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln379_6_fu_1076_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_6_fu_1082_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_6_reg_1621 : STD_LOGIC_VECTOR (0 downto 0);
    signal lane_V_7_fu_1128_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lane_V_7_reg_1629 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1049_7_fu_1131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln379_7_fu_1140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_7_fu_1146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_7_reg_1643 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal add_ln407_fu_704_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_fu_732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln407_1_fu_768_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_1_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln407_2_fu_832_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_2_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln407_3_fu_896_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_3_fu_924_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln407_4_fu_960_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_4_fu_988_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln407_5_fu_1024_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_5_fu_1052_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln407_6_fu_1088_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_6_fu_1116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln407_7_fu_1152_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_7_fu_1180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal DataIn_assign_fu_1192_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataIn_assign_1_fu_1211_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataIn_assign_2_fu_1230_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataIn_assign_3_fu_1249_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataIn_assign_4_fu_1268_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataIn_assign_5_fu_1287_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataIn_assign_6_fu_1306_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataIn_assign_7_fu_1325_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal group_V_fu_666_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln819_fu_716_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln819_fu_720_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trigger_V_fu_670_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln819_fu_726_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln819_1_fu_780_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln819_1_fu_784_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln819_1_fu_790_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln819_2_fu_844_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln819_2_fu_848_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln819_2_fu_854_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln819_3_fu_908_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln819_3_fu_912_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln819_3_fu_918_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln819_4_fu_972_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln819_4_fu_976_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln819_4_fu_982_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln819_5_fu_1036_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln819_5_fu_1040_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln819_5_fu_1046_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln819_6_fu_1100_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln819_6_fu_1104_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln819_6_fu_1110_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln819_7_fu_1164_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln819_7_fu_1168_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln819_7_fu_1174_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_949 : BOOLEAN;
    signal ap_condition_960 : BOOLEAN;
    signal ap_condition_971 : BOOLEAN;
    signal ap_condition_982 : BOOLEAN;
    signal ap_condition_993 : BOOLEAN;
    signal ap_condition_1004 : BOOLEAN;
    signal ap_condition_1015 : BOOLEAN;
    signal ap_condition_1026 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component postage_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component postage_iqprereg_Array_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component postage_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        monitor_0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        monitor_1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        monitor_2 : OUT STD_LOGIC_VECTOR (11 downto 0);
        monitor_3 : OUT STD_LOGIC_VECTOR (11 downto 0);
        monitor_4 : OUT STD_LOGIC_VECTOR (11 downto 0);
        monitor_5 : OUT STD_LOGIC_VECTOR (11 downto 0);
        monitor_6 : OUT STD_LOGIC_VECTOR (11 downto 0);
        monitor_7 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    iqprereg_Array_0_U : component postage_iqprereg_Array_0
    generic map (
        DataWidth => 32,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ap_const_lv5_1D,
        ce0 => iqprereg_Array_0_ce0,
        we0 => iqprereg_Array_0_we0,
        d0 => DataIn_assign_fu_1192_p6,
        q0 => iqprereg_Array_0_q0);

    iqprereg_Array_1_U : component postage_iqprereg_Array_0
    generic map (
        DataWidth => 32,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ap_const_lv5_1D,
        ce0 => iqprereg_Array_1_ce0,
        we0 => iqprereg_Array_1_we0,
        d0 => DataIn_assign_1_fu_1211_p6,
        q0 => iqprereg_Array_1_q0);

    iqprereg_Array_2_U : component postage_iqprereg_Array_0
    generic map (
        DataWidth => 32,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ap_const_lv5_1D,
        ce0 => iqprereg_Array_2_ce0,
        we0 => iqprereg_Array_2_we0,
        d0 => DataIn_assign_2_fu_1230_p6,
        q0 => iqprereg_Array_2_q0);

    iqprereg_Array_3_U : component postage_iqprereg_Array_0
    generic map (
        DataWidth => 32,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ap_const_lv5_1D,
        ce0 => iqprereg_Array_3_ce0,
        we0 => iqprereg_Array_3_we0,
        d0 => DataIn_assign_3_fu_1249_p6,
        q0 => iqprereg_Array_3_q0);

    iqprereg_Array_4_U : component postage_iqprereg_Array_0
    generic map (
        DataWidth => 32,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ap_const_lv5_1D,
        ce0 => iqprereg_Array_4_ce0,
        we0 => iqprereg_Array_4_we0,
        d0 => DataIn_assign_4_fu_1268_p6,
        q0 => iqprereg_Array_4_q0);

    iqprereg_Array_5_U : component postage_iqprereg_Array_0
    generic map (
        DataWidth => 32,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ap_const_lv5_1D,
        ce0 => iqprereg_Array_5_ce0,
        we0 => iqprereg_Array_5_we0,
        d0 => DataIn_assign_5_fu_1287_p6,
        q0 => iqprereg_Array_5_q0);

    iqprereg_Array_6_U : component postage_iqprereg_Array_0
    generic map (
        DataWidth => 32,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ap_const_lv5_1D,
        ce0 => iqprereg_Array_6_ce0,
        we0 => iqprereg_Array_6_we0,
        d0 => DataIn_assign_6_fu_1306_p6,
        q0 => iqprereg_Array_6_q0);

    iqprereg_Array_7_U : component postage_iqprereg_Array_0
    generic map (
        DataWidth => 32,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ap_const_lv5_1D,
        ce0 => iqprereg_Array_7_ce0,
        we0 => iqprereg_Array_7_we0,
        d0 => DataIn_assign_7_fu_1325_p6,
        q0 => iqprereg_Array_7_q0);

    control_s_axi_U : component postage_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        monitor_0 => monitor_0,
        monitor_1 => monitor_1,
        monitor_2 => monitor_2,
        monitor_3 => monitor_3,
        monitor_4 => monitor_4,
        monitor_5 => monitor_5,
        monitor_6 => monitor_6,
        monitor_7 => monitor_7);

    mux_42_32_1_1_U1 : component postage_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => x_0_reg_1427,
        din1 => x_1_reg_1439,
        din2 => x_2_reg_1451,
        din3 => x_3_reg_1463,
        din4 => lane_V_reg_1475,
        dout => DataIn_assign_fu_1192_p6);

    mux_42_32_1_1_U2 : component postage_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => x_0_reg_1427,
        din1 => x_1_reg_1439,
        din2 => x_2_reg_1451,
        din3 => x_3_reg_1463,
        din4 => lane_V_1_reg_1497,
        dout => DataIn_assign_1_fu_1211_p6);

    mux_42_32_1_1_U3 : component postage_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => x_0_reg_1427,
        din1 => x_1_reg_1439,
        din2 => x_2_reg_1451,
        din3 => x_3_reg_1463,
        din4 => lane_V_2_reg_1519,
        dout => DataIn_assign_2_fu_1230_p6);

    mux_42_32_1_1_U4 : component postage_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => x_0_reg_1427,
        din1 => x_1_reg_1439,
        din2 => x_2_reg_1451,
        din3 => x_3_reg_1463,
        din4 => lane_V_3_reg_1541,
        dout => DataIn_assign_3_fu_1249_p6);

    mux_42_32_1_1_U5 : component postage_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => x_0_reg_1427,
        din1 => x_1_reg_1439,
        din2 => x_2_reg_1451,
        din3 => x_3_reg_1463,
        din4 => lane_V_4_reg_1563,
        dout => DataIn_assign_4_fu_1268_p6);

    mux_42_32_1_1_U6 : component postage_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => x_0_reg_1427,
        din1 => x_1_reg_1439,
        din2 => x_2_reg_1451,
        din3 => x_3_reg_1463,
        din4 => lane_V_5_reg_1585,
        dout => DataIn_assign_5_fu_1287_p6);

    mux_42_32_1_1_U7 : component postage_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => x_0_reg_1427,
        din1 => x_1_reg_1439,
        din2 => x_2_reg_1451,
        din3 => x_3_reg_1463,
        din4 => lane_V_6_reg_1607,
        dout => DataIn_assign_6_fu_1306_p6);

    mux_42_32_1_1_U8 : component postage_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => x_0_reg_1427,
        din1 => x_1_reg_1439,
        din2 => x_2_reg_1451,
        din3 => x_3_reg_1463,
        din4 => lane_V_7_reg_1629,
        dout => DataIn_assign_7_fu_1325_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    tocapture_0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_949)) then
                if (((p_Result_s_fu_732_p2 = ap_const_lv1_0) and (icmp_ln379_fu_692_p2 = ap_const_lv1_1))) then 
                    tocapture_0 <= ap_const_lv8_5A;
                elsif ((icmp_ln379_fu_692_p2 = ap_const_lv1_0)) then 
                    tocapture_0 <= add_ln407_fu_704_p2;
                end if;
            end if; 
        end if;
    end process;

    tocapture_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_960)) then
                if (((p_Result_1_fu_796_p2 = ap_const_lv1_0) and (icmp_ln379_1_fu_756_p2 = ap_const_lv1_1))) then 
                    tocapture_1 <= ap_const_lv8_5A;
                elsif ((icmp_ln379_1_fu_756_p2 = ap_const_lv1_0)) then 
                    tocapture_1 <= add_ln407_1_fu_768_p2;
                end if;
            end if; 
        end if;
    end process;

    tocapture_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_971)) then
                if (((p_Result_2_fu_860_p2 = ap_const_lv1_0) and (icmp_ln379_2_fu_820_p2 = ap_const_lv1_1))) then 
                    tocapture_2 <= ap_const_lv8_5A;
                elsif ((icmp_ln379_2_fu_820_p2 = ap_const_lv1_0)) then 
                    tocapture_2 <= add_ln407_2_fu_832_p2;
                end if;
            end if; 
        end if;
    end process;

    tocapture_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_982)) then
                if (((p_Result_3_fu_924_p2 = ap_const_lv1_0) and (icmp_ln379_3_fu_884_p2 = ap_const_lv1_1))) then 
                    tocapture_3 <= ap_const_lv8_5A;
                elsif ((icmp_ln379_3_fu_884_p2 = ap_const_lv1_0)) then 
                    tocapture_3 <= add_ln407_3_fu_896_p2;
                end if;
            end if; 
        end if;
    end process;

    tocapture_4_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_993)) then
                if (((p_Result_4_fu_988_p2 = ap_const_lv1_0) and (icmp_ln379_4_fu_948_p2 = ap_const_lv1_1))) then 
                    tocapture_4 <= ap_const_lv8_5A;
                elsif ((icmp_ln379_4_fu_948_p2 = ap_const_lv1_0)) then 
                    tocapture_4 <= add_ln407_4_fu_960_p2;
                end if;
            end if; 
        end if;
    end process;

    tocapture_5_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_1004)) then
                if (((p_Result_5_fu_1052_p2 = ap_const_lv1_0) and (icmp_ln379_5_fu_1012_p2 = ap_const_lv1_1))) then 
                    tocapture_5 <= ap_const_lv8_5A;
                elsif ((icmp_ln379_5_fu_1012_p2 = ap_const_lv1_0)) then 
                    tocapture_5 <= add_ln407_5_fu_1024_p2;
                end if;
            end if; 
        end if;
    end process;

    tocapture_6_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_1015)) then
                if (((p_Result_6_fu_1116_p2 = ap_const_lv1_0) and (icmp_ln379_6_fu_1076_p2 = ap_const_lv1_1))) then 
                    tocapture_6 <= ap_const_lv8_5A;
                elsif ((icmp_ln379_6_fu_1076_p2 = ap_const_lv1_0)) then 
                    tocapture_6 <= add_ln407_6_fu_1088_p2;
                end if;
            end if; 
        end if;
    end process;

    tocapture_7_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_1026)) then
                if (((p_Result_7_fu_1180_p2 = ap_const_lv1_0) and (icmp_ln379_7_fu_1140_p2 = ap_const_lv1_1))) then 
                    tocapture_7 <= ap_const_lv8_5A;
                elsif ((icmp_ln379_7_fu_1140_p2 = ap_const_lv1_0)) then 
                    tocapture_7 <= add_ln407_7_fu_1152_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                gid_V_1_reg_1359 <= monitor_1(10 downto 2);
                gid_V_2_reg_1369 <= monitor_2(10 downto 2);
                gid_V_3_reg_1379 <= monitor_3(10 downto 2);
                gid_V_4_reg_1389 <= monitor_4(10 downto 2);
                gid_V_5_reg_1399 <= monitor_5(10 downto 2);
                gid_V_6_reg_1409 <= monitor_6(10 downto 2);
                gid_V_7_reg_1419 <= monitor_7(10 downto 2);
                gid_V_reg_1349 <= monitor_0(10 downto 2);
                m_V_1_reg_1354 <= monitor_1;
                m_V_2_reg_1364 <= monitor_2;
                m_V_3_reg_1374 <= monitor_3;
                m_V_4_reg_1384 <= monitor_4;
                m_V_5_reg_1394 <= monitor_5;
                m_V_6_reg_1404 <= monitor_6;
                m_V_7_reg_1414 <= monitor_7;
                m_V_reg_1344 <= monitor_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln1049_1_reg_1502 <= icmp_ln1049_1_fu_747_p2;
                icmp_ln1049_2_reg_1524 <= icmp_ln1049_2_fu_811_p2;
                icmp_ln1049_3_reg_1546 <= icmp_ln1049_3_fu_875_p2;
                icmp_ln1049_4_reg_1568 <= icmp_ln1049_4_fu_939_p2;
                icmp_ln1049_5_reg_1590 <= icmp_ln1049_5_fu_1003_p2;
                icmp_ln1049_6_reg_1612 <= icmp_ln1049_6_fu_1067_p2;
                icmp_ln1049_7_reg_1634 <= icmp_ln1049_7_fu_1131_p2;
                icmp_ln1049_reg_1480 <= icmp_ln1049_fu_683_p2;
                lane_V_1_reg_1497 <= lane_V_1_fu_744_p1;
                lane_V_2_reg_1519 <= lane_V_2_fu_808_p1;
                lane_V_3_reg_1541 <= lane_V_3_fu_872_p1;
                lane_V_4_reg_1563 <= lane_V_4_fu_936_p1;
                lane_V_5_reg_1585 <= lane_V_5_fu_1000_p1;
                lane_V_6_reg_1607 <= lane_V_6_fu_1064_p1;
                lane_V_7_reg_1629 <= lane_V_7_fu_1128_p1;
                lane_V_reg_1475 <= lane_V_fu_680_p1;
                x_0_reg_1427 <= x_0_fu_632_p1;
                x_1_reg_1439 <= iniq_TDATA(63 downto 32);
                x_2_reg_1451 <= iniq_TDATA(95 downto 64);
                x_3_reg_1463 <= iniq_TDATA(127 downto 96);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1049_1_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln379_1_reg_1507 <= icmp_ln379_1_fu_756_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1049_2_fu_811_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln379_2_reg_1529 <= icmp_ln379_2_fu_820_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1049_3_fu_875_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln379_3_reg_1551 <= icmp_ln379_3_fu_884_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1049_4_fu_939_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln379_4_reg_1573 <= icmp_ln379_4_fu_948_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1049_5_fu_1003_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln379_5_reg_1595 <= icmp_ln379_5_fu_1012_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1049_6_fu_1067_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln379_6_reg_1617 <= icmp_ln379_6_fu_1076_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1049_7_fu_1131_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln379_7_reg_1639 <= icmp_ln379_7_fu_1140_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1049_fu_683_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln379_reg_1485 <= icmp_ln379_fu_692_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln379_1_fu_756_p2 = ap_const_lv1_0) and (icmp_ln1049_1_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_last_V_1_reg_1511 <= tmp_last_V_1_fu_762_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln379_2_fu_820_p2 = ap_const_lv1_0) and (icmp_ln1049_2_fu_811_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_last_V_2_reg_1533 <= tmp_last_V_2_fu_826_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln379_3_fu_884_p2 = ap_const_lv1_0) and (icmp_ln1049_3_fu_875_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_last_V_3_reg_1555 <= tmp_last_V_3_fu_890_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln379_4_fu_948_p2 = ap_const_lv1_0) and (icmp_ln1049_4_fu_939_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_last_V_4_reg_1577 <= tmp_last_V_4_fu_954_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln379_5_fu_1012_p2 = ap_const_lv1_0) and (icmp_ln1049_5_fu_1003_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_last_V_5_reg_1599 <= tmp_last_V_5_fu_1018_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln379_6_fu_1076_p2 = ap_const_lv1_0) and (icmp_ln1049_6_fu_1067_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_last_V_6_reg_1621 <= tmp_last_V_6_fu_1082_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln379_7_fu_1140_p2 = ap_const_lv1_0) and (icmp_ln1049_7_fu_1131_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_last_V_7_reg_1643 <= tmp_last_V_7_fu_1146_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln379_fu_692_p2 = ap_const_lv1_0) and (icmp_ln1049_fu_683_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_last_V_reg_1489 <= tmp_last_V_fu_698_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, tmp_nbreadreq_fu_326_p7, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((tmp_nbreadreq_fu_326_p7 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((tmp_nbreadreq_fu_326_p7 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln407_1_fu_768_p2 <= std_logic_vector(unsigned(tocapture_1) + unsigned(ap_const_lv8_FF));
    add_ln407_2_fu_832_p2 <= std_logic_vector(unsigned(tocapture_2) + unsigned(ap_const_lv8_FF));
    add_ln407_3_fu_896_p2 <= std_logic_vector(unsigned(tocapture_3) + unsigned(ap_const_lv8_FF));
    add_ln407_4_fu_960_p2 <= std_logic_vector(unsigned(tocapture_4) + unsigned(ap_const_lv8_FF));
    add_ln407_5_fu_1024_p2 <= std_logic_vector(unsigned(tocapture_5) + unsigned(ap_const_lv8_FF));
    add_ln407_6_fu_1088_p2 <= std_logic_vector(unsigned(tocapture_6) + unsigned(ap_const_lv8_FF));
    add_ln407_7_fu_1152_p2 <= std_logic_vector(unsigned(tocapture_7) + unsigned(ap_const_lv8_FF));
    add_ln407_fu_704_p2 <= std_logic_vector(unsigned(tocapture_0) + unsigned(ap_const_lv8_FF));
    and_ln819_1_fu_790_p2 <= (trigger_V_fu_670_p4 and shl_ln819_1_fu_784_p2);
    and_ln819_2_fu_854_p2 <= (trigger_V_fu_670_p4 and shl_ln819_2_fu_848_p2);
    and_ln819_3_fu_918_p2 <= (trigger_V_fu_670_p4 and shl_ln819_3_fu_912_p2);
    and_ln819_4_fu_982_p2 <= (trigger_V_fu_670_p4 and shl_ln819_4_fu_976_p2);
    and_ln819_5_fu_1046_p2 <= (trigger_V_fu_670_p4 and shl_ln819_5_fu_1040_p2);
    and_ln819_6_fu_1110_p2 <= (trigger_V_fu_670_p4 and shl_ln819_6_fu_1104_p2);
    and_ln819_7_fu_1174_p2 <= (trigger_V_fu_670_p4 and shl_ln819_7_fu_1168_p2);
    and_ln819_fu_726_p2 <= (trigger_V_fu_670_p4 and shl_ln819_fu_720_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(instream_TVALID, iniq_TVALID, iq_out_0_TREADY, iq_out_1_TREADY, iq_out_2_TREADY, iq_out_3_TREADY, iq_out_4_TREADY, iq_out_5_TREADY, iq_out_6_TREADY, iq_out_7_TREADY, ap_enable_reg_pp0_iter0, tmp_nbreadreq_fu_326_p7, ap_enable_reg_pp0_iter1, ap_predicate_op259_write_state3, ap_predicate_op263_write_state3, ap_predicate_op267_write_state3, ap_predicate_op271_write_state3, ap_predicate_op275_write_state3, ap_predicate_op279_write_state3, ap_predicate_op283_write_state3, ap_predicate_op287_write_state3)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((iq_out_7_TREADY = ap_const_logic_0) and (ap_predicate_op287_write_state3 = ap_const_boolean_1)) or ((iq_out_6_TREADY = ap_const_logic_0) and (ap_predicate_op283_write_state3 = ap_const_boolean_1)) or ((iq_out_5_TREADY = ap_const_logic_0) and (ap_predicate_op279_write_state3 = ap_const_boolean_1)) or ((iq_out_4_TREADY = ap_const_logic_0) and (ap_predicate_op275_write_state3 = ap_const_boolean_1)) or ((iq_out_3_TREADY = ap_const_logic_0) and (ap_predicate_op271_write_state3 = ap_const_boolean_1)) or ((iq_out_2_TREADY = ap_const_logic_0) and (ap_predicate_op267_write_state3 = ap_const_boolean_1)) or ((iq_out_1_TREADY = ap_const_logic_0) and (ap_predicate_op263_write_state3 = ap_const_boolean_1)) or ((iq_out_0_TREADY = ap_const_logic_0) and (ap_predicate_op259_write_state3 = ap_const_boolean_1)))) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((iniq_TVALID = ap_const_logic_0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1)) or ((instream_TVALID = ap_const_logic_0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(instream_TVALID, iniq_TVALID, iq_out_0_TREADY, iq_out_1_TREADY, iq_out_2_TREADY, iq_out_3_TREADY, iq_out_4_TREADY, iq_out_5_TREADY, iq_out_6_TREADY, iq_out_7_TREADY, ap_enable_reg_pp0_iter0, tmp_nbreadreq_fu_326_p7, ap_enable_reg_pp0_iter1, ap_predicate_op259_write_state3, ap_predicate_op263_write_state3, ap_predicate_op267_write_state3, ap_predicate_op271_write_state3, ap_predicate_op275_write_state3, ap_predicate_op279_write_state3, ap_predicate_op283_write_state3, ap_predicate_op287_write_state3, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((iq_out_7_TREADY = ap_const_logic_0) and (ap_predicate_op287_write_state3 = ap_const_boolean_1)) or ((iq_out_6_TREADY = ap_const_logic_0) and (ap_predicate_op283_write_state3 = ap_const_boolean_1)) or ((iq_out_5_TREADY = ap_const_logic_0) and (ap_predicate_op279_write_state3 = ap_const_boolean_1)) or ((iq_out_4_TREADY = ap_const_logic_0) and (ap_predicate_op275_write_state3 = ap_const_boolean_1)) or ((iq_out_3_TREADY = ap_const_logic_0) and (ap_predicate_op271_write_state3 = ap_const_boolean_1)) or ((iq_out_2_TREADY = ap_const_logic_0) and (ap_predicate_op267_write_state3 = ap_const_boolean_1)) or ((iq_out_1_TREADY = ap_const_logic_0) and (ap_predicate_op263_write_state3 = ap_const_boolean_1)) or ((iq_out_0_TREADY = ap_const_logic_0) and (ap_predicate_op259_write_state3 = ap_const_boolean_1)))) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((iniq_TVALID = ap_const_logic_0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1)) or ((instream_TVALID = ap_const_logic_0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(instream_TVALID, iniq_TVALID, iq_out_0_TREADY, iq_out_1_TREADY, iq_out_2_TREADY, iq_out_3_TREADY, iq_out_4_TREADY, iq_out_5_TREADY, iq_out_6_TREADY, iq_out_7_TREADY, ap_enable_reg_pp0_iter0, tmp_nbreadreq_fu_326_p7, ap_enable_reg_pp0_iter1, ap_predicate_op259_write_state3, ap_predicate_op263_write_state3, ap_predicate_op267_write_state3, ap_predicate_op271_write_state3, ap_predicate_op275_write_state3, ap_predicate_op279_write_state3, ap_predicate_op283_write_state3, ap_predicate_op287_write_state3, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((iq_out_7_TREADY = ap_const_logic_0) and (ap_predicate_op287_write_state3 = ap_const_boolean_1)) or ((iq_out_6_TREADY = ap_const_logic_0) and (ap_predicate_op283_write_state3 = ap_const_boolean_1)) or ((iq_out_5_TREADY = ap_const_logic_0) and (ap_predicate_op279_write_state3 = ap_const_boolean_1)) or ((iq_out_4_TREADY = ap_const_logic_0) and (ap_predicate_op275_write_state3 = ap_const_boolean_1)) or ((iq_out_3_TREADY = ap_const_logic_0) and (ap_predicate_op271_write_state3 = ap_const_boolean_1)) or ((iq_out_2_TREADY = ap_const_logic_0) and (ap_predicate_op267_write_state3 = ap_const_boolean_1)) or ((iq_out_1_TREADY = ap_const_logic_0) and (ap_predicate_op263_write_state3 = ap_const_boolean_1)) or ((iq_out_0_TREADY = ap_const_logic_0) and (ap_predicate_op259_write_state3 = ap_const_boolean_1)))) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((iniq_TVALID = ap_const_logic_0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1)) or ((instream_TVALID = ap_const_logic_0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1)))));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(instream_TVALID, iniq_TVALID, tmp_nbreadreq_fu_326_p7)
    begin
                ap_block_state2_pp0_stage0_iter0 <= (((iniq_TVALID = ap_const_logic_0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1)) or ((instream_TVALID = ap_const_logic_0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1)));
    end process;


    ap_block_state3_io_assign_proc : process(iq_out_0_TREADY, iq_out_1_TREADY, iq_out_2_TREADY, iq_out_3_TREADY, iq_out_4_TREADY, iq_out_5_TREADY, iq_out_6_TREADY, iq_out_7_TREADY, ap_predicate_op259_write_state3, ap_predicate_op263_write_state3, ap_predicate_op267_write_state3, ap_predicate_op271_write_state3, ap_predicate_op275_write_state3, ap_predicate_op279_write_state3, ap_predicate_op283_write_state3, ap_predicate_op287_write_state3)
    begin
                ap_block_state3_io <= (((iq_out_7_TREADY = ap_const_logic_0) and (ap_predicate_op287_write_state3 = ap_const_boolean_1)) or ((iq_out_6_TREADY = ap_const_logic_0) and (ap_predicate_op283_write_state3 = ap_const_boolean_1)) or ((iq_out_5_TREADY = ap_const_logic_0) and (ap_predicate_op279_write_state3 = ap_const_boolean_1)) or ((iq_out_4_TREADY = ap_const_logic_0) and (ap_predicate_op275_write_state3 = ap_const_boolean_1)) or ((iq_out_3_TREADY = ap_const_logic_0) and (ap_predicate_op271_write_state3 = ap_const_boolean_1)) or ((iq_out_2_TREADY = ap_const_logic_0) and (ap_predicate_op267_write_state3 = ap_const_boolean_1)) or ((iq_out_1_TREADY = ap_const_logic_0) and (ap_predicate_op263_write_state3 = ap_const_boolean_1)) or ((iq_out_0_TREADY = ap_const_logic_0) and (ap_predicate_op259_write_state3 = ap_const_boolean_1)));
    end process;


    ap_block_state3_pp0_stage0_iter1_assign_proc : process(iq_out_0_TREADY, iq_out_1_TREADY, iq_out_2_TREADY, iq_out_3_TREADY, iq_out_4_TREADY, iq_out_5_TREADY, iq_out_6_TREADY, iq_out_7_TREADY, ap_predicate_op259_write_state3, ap_predicate_op263_write_state3, ap_predicate_op267_write_state3, ap_predicate_op271_write_state3, ap_predicate_op275_write_state3, ap_predicate_op279_write_state3, ap_predicate_op283_write_state3, ap_predicate_op287_write_state3)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((iq_out_7_TREADY = ap_const_logic_0) and (ap_predicate_op287_write_state3 = ap_const_boolean_1)) or ((iq_out_6_TREADY = ap_const_logic_0) and (ap_predicate_op283_write_state3 = ap_const_boolean_1)) or ((iq_out_5_TREADY = ap_const_logic_0) and (ap_predicate_op279_write_state3 = ap_const_boolean_1)) or ((iq_out_4_TREADY = ap_const_logic_0) and (ap_predicate_op275_write_state3 = ap_const_boolean_1)) or ((iq_out_3_TREADY = ap_const_logic_0) and (ap_predicate_op271_write_state3 = ap_const_boolean_1)) or ((iq_out_2_TREADY = ap_const_logic_0) and (ap_predicate_op267_write_state3 = ap_const_boolean_1)) or ((iq_out_1_TREADY = ap_const_logic_0) and (ap_predicate_op263_write_state3 = ap_const_boolean_1)) or ((iq_out_0_TREADY = ap_const_logic_0) and (ap_predicate_op259_write_state3 = ap_const_boolean_1)));
    end process;


    ap_condition_1004_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_nbreadreq_fu_326_p7, ap_block_pp0_stage0_11001, icmp_ln1049_5_fu_1003_p2)
    begin
                ap_condition_1004 <= ((icmp_ln1049_5_fu_1003_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_condition_1015_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_nbreadreq_fu_326_p7, ap_block_pp0_stage0_11001, icmp_ln1049_6_fu_1067_p2)
    begin
                ap_condition_1015 <= ((icmp_ln1049_6_fu_1067_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_condition_1026_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_nbreadreq_fu_326_p7, ap_block_pp0_stage0_11001, icmp_ln1049_7_fu_1131_p2)
    begin
                ap_condition_1026 <= ((icmp_ln1049_7_fu_1131_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_condition_949_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_nbreadreq_fu_326_p7, ap_block_pp0_stage0_11001, icmp_ln1049_fu_683_p2)
    begin
                ap_condition_949 <= ((icmp_ln1049_fu_683_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_condition_960_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_nbreadreq_fu_326_p7, ap_block_pp0_stage0_11001, icmp_ln1049_1_fu_747_p2)
    begin
                ap_condition_960 <= ((icmp_ln1049_1_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_condition_971_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_nbreadreq_fu_326_p7, ap_block_pp0_stage0_11001, icmp_ln1049_2_fu_811_p2)
    begin
                ap_condition_971 <= ((icmp_ln1049_2_fu_811_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_condition_982_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_nbreadreq_fu_326_p7, ap_block_pp0_stage0_11001, icmp_ln1049_3_fu_875_p2)
    begin
                ap_condition_982 <= ((icmp_ln1049_3_fu_875_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_condition_993_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_nbreadreq_fu_326_p7, ap_block_pp0_stage0_11001, icmp_ln1049_4_fu_939_p2)
    begin
                ap_condition_993 <= ((icmp_ln1049_4_fu_939_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(tmp_nbreadreq_fu_326_p7)
    begin
        if ((tmp_nbreadreq_fu_326_p7 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op259_write_state3_assign_proc : process(icmp_ln1049_reg_1480, icmp_ln379_reg_1485)
    begin
                ap_predicate_op259_write_state3 <= ((icmp_ln379_reg_1485 = ap_const_lv1_0) and (icmp_ln1049_reg_1480 = ap_const_lv1_1));
    end process;


    ap_predicate_op263_write_state3_assign_proc : process(icmp_ln1049_1_reg_1502, icmp_ln379_1_reg_1507)
    begin
                ap_predicate_op263_write_state3 <= ((icmp_ln379_1_reg_1507 = ap_const_lv1_0) and (icmp_ln1049_1_reg_1502 = ap_const_lv1_1));
    end process;


    ap_predicate_op267_write_state3_assign_proc : process(icmp_ln1049_2_reg_1524, icmp_ln379_2_reg_1529)
    begin
                ap_predicate_op267_write_state3 <= ((icmp_ln379_2_reg_1529 = ap_const_lv1_0) and (icmp_ln1049_2_reg_1524 = ap_const_lv1_1));
    end process;


    ap_predicate_op271_write_state3_assign_proc : process(icmp_ln1049_3_reg_1546, icmp_ln379_3_reg_1551)
    begin
                ap_predicate_op271_write_state3 <= ((icmp_ln379_3_reg_1551 = ap_const_lv1_0) and (icmp_ln1049_3_reg_1546 = ap_const_lv1_1));
    end process;


    ap_predicate_op275_write_state3_assign_proc : process(icmp_ln1049_4_reg_1568, icmp_ln379_4_reg_1573)
    begin
                ap_predicate_op275_write_state3 <= ((icmp_ln379_4_reg_1573 = ap_const_lv1_0) and (icmp_ln1049_4_reg_1568 = ap_const_lv1_1));
    end process;


    ap_predicate_op279_write_state3_assign_proc : process(icmp_ln1049_5_reg_1590, icmp_ln379_5_reg_1595)
    begin
                ap_predicate_op279_write_state3 <= ((icmp_ln379_5_reg_1595 = ap_const_lv1_0) and (icmp_ln1049_5_reg_1590 = ap_const_lv1_1));
    end process;


    ap_predicate_op283_write_state3_assign_proc : process(icmp_ln1049_6_reg_1612, icmp_ln379_6_reg_1617)
    begin
                ap_predicate_op283_write_state3 <= ((icmp_ln379_6_reg_1617 = ap_const_lv1_0) and (icmp_ln1049_6_reg_1612 = ap_const_lv1_1));
    end process;


    ap_predicate_op287_write_state3_assign_proc : process(icmp_ln1049_7_reg_1634, icmp_ln379_7_reg_1639)
    begin
                ap_predicate_op287_write_state3 <= ((icmp_ln379_7_reg_1639 = ap_const_lv1_0) and (icmp_ln1049_7_reg_1634 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    group_V_fu_666_p1 <= instream_TUSER(9 - 1 downto 0);
    icmp_ln1049_1_fu_747_p2 <= "1" when (gid_V_1_reg_1359 = group_V_fu_666_p1) else "0";
    icmp_ln1049_2_fu_811_p2 <= "1" when (gid_V_2_reg_1369 = group_V_fu_666_p1) else "0";
    icmp_ln1049_3_fu_875_p2 <= "1" when (gid_V_3_reg_1379 = group_V_fu_666_p1) else "0";
    icmp_ln1049_4_fu_939_p2 <= "1" when (gid_V_4_reg_1389 = group_V_fu_666_p1) else "0";
    icmp_ln1049_5_fu_1003_p2 <= "1" when (gid_V_5_reg_1399 = group_V_fu_666_p1) else "0";
    icmp_ln1049_6_fu_1067_p2 <= "1" when (gid_V_6_reg_1409 = group_V_fu_666_p1) else "0";
    icmp_ln1049_7_fu_1131_p2 <= "1" when (gid_V_7_reg_1419 = group_V_fu_666_p1) else "0";
    icmp_ln1049_fu_683_p2 <= "1" when (gid_V_reg_1349 = group_V_fu_666_p1) else "0";
    icmp_ln379_1_fu_756_p2 <= "1" when (tocapture_1 = ap_const_lv8_0) else "0";
    icmp_ln379_2_fu_820_p2 <= "1" when (tocapture_2 = ap_const_lv8_0) else "0";
    icmp_ln379_3_fu_884_p2 <= "1" when (tocapture_3 = ap_const_lv8_0) else "0";
    icmp_ln379_4_fu_948_p2 <= "1" when (tocapture_4 = ap_const_lv8_0) else "0";
    icmp_ln379_5_fu_1012_p2 <= "1" when (tocapture_5 = ap_const_lv8_0) else "0";
    icmp_ln379_6_fu_1076_p2 <= "1" when (tocapture_6 = ap_const_lv8_0) else "0";
    icmp_ln379_7_fu_1140_p2 <= "1" when (tocapture_7 = ap_const_lv8_0) else "0";
    icmp_ln379_fu_692_p2 <= "1" when (tocapture_0 = ap_const_lv8_0) else "0";

    iniq_TDATA_blk_n_assign_proc : process(iniq_TVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, tmp_nbreadreq_fu_326_p7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            iniq_TDATA_blk_n <= iniq_TVALID;
        else 
            iniq_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iniq_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_nbreadreq_fu_326_p7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            iniq_TREADY <= ap_const_logic_1;
        else 
            iniq_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    instream_TDATA_blk_n_assign_proc : process(instream_TVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, tmp_nbreadreq_fu_326_p7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            instream_TDATA_blk_n <= instream_TVALID;
        else 
            instream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    instream_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_nbreadreq_fu_326_p7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_326_p7 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            instream_TREADY <= ap_const_logic_1;
        else 
            instream_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    iq_out_0_TDATA <= iqprereg_Array_0_q0;

    iq_out_0_TDATA_blk_n_assign_proc : process(iq_out_0_TREADY, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1049_reg_1480, icmp_ln379_reg_1485)
    begin
        if (((icmp_ln379_reg_1485 = ap_const_lv1_0) and (icmp_ln1049_reg_1480 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iq_out_0_TDATA_blk_n <= iq_out_0_TREADY;
        else 
            iq_out_0_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iq_out_0_TKEEP <= ap_const_lv4_0;
    iq_out_0_TLAST <= tmp_last_V_reg_1489;
    iq_out_0_TSTRB <= ap_const_lv4_0;
    iq_out_0_TUSER <= ap_const_lv3_0;

    iq_out_0_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op259_write_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op259_write_state3 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            iq_out_0_TVALID <= ap_const_logic_1;
        else 
            iq_out_0_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    iq_out_1_TDATA <= iqprereg_Array_1_q0;

    iq_out_1_TDATA_blk_n_assign_proc : process(iq_out_1_TREADY, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1049_1_reg_1502, icmp_ln379_1_reg_1507)
    begin
        if (((icmp_ln379_1_reg_1507 = ap_const_lv1_0) and (icmp_ln1049_1_reg_1502 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iq_out_1_TDATA_blk_n <= iq_out_1_TREADY;
        else 
            iq_out_1_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iq_out_1_TKEEP <= ap_const_lv4_0;
    iq_out_1_TLAST <= tmp_last_V_1_reg_1511;
    iq_out_1_TSTRB <= ap_const_lv4_0;
    iq_out_1_TUSER <= ap_const_lv3_1;

    iq_out_1_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op263_write_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op263_write_state3 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            iq_out_1_TVALID <= ap_const_logic_1;
        else 
            iq_out_1_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    iq_out_2_TDATA <= iqprereg_Array_2_q0;

    iq_out_2_TDATA_blk_n_assign_proc : process(iq_out_2_TREADY, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1049_2_reg_1524, icmp_ln379_2_reg_1529)
    begin
        if (((icmp_ln379_2_reg_1529 = ap_const_lv1_0) and (icmp_ln1049_2_reg_1524 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iq_out_2_TDATA_blk_n <= iq_out_2_TREADY;
        else 
            iq_out_2_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iq_out_2_TKEEP <= ap_const_lv4_0;
    iq_out_2_TLAST <= tmp_last_V_2_reg_1533;
    iq_out_2_TSTRB <= ap_const_lv4_0;
    iq_out_2_TUSER <= ap_const_lv3_2;

    iq_out_2_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op267_write_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op267_write_state3 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            iq_out_2_TVALID <= ap_const_logic_1;
        else 
            iq_out_2_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    iq_out_3_TDATA <= iqprereg_Array_3_q0;

    iq_out_3_TDATA_blk_n_assign_proc : process(iq_out_3_TREADY, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1049_3_reg_1546, icmp_ln379_3_reg_1551)
    begin
        if (((icmp_ln379_3_reg_1551 = ap_const_lv1_0) and (icmp_ln1049_3_reg_1546 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iq_out_3_TDATA_blk_n <= iq_out_3_TREADY;
        else 
            iq_out_3_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iq_out_3_TKEEP <= ap_const_lv4_0;
    iq_out_3_TLAST <= tmp_last_V_3_reg_1555;
    iq_out_3_TSTRB <= ap_const_lv4_0;
    iq_out_3_TUSER <= ap_const_lv3_3;

    iq_out_3_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op271_write_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op271_write_state3 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            iq_out_3_TVALID <= ap_const_logic_1;
        else 
            iq_out_3_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    iq_out_4_TDATA <= iqprereg_Array_4_q0;

    iq_out_4_TDATA_blk_n_assign_proc : process(iq_out_4_TREADY, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1049_4_reg_1568, icmp_ln379_4_reg_1573)
    begin
        if (((icmp_ln379_4_reg_1573 = ap_const_lv1_0) and (icmp_ln1049_4_reg_1568 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iq_out_4_TDATA_blk_n <= iq_out_4_TREADY;
        else 
            iq_out_4_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iq_out_4_TKEEP <= ap_const_lv4_0;
    iq_out_4_TLAST <= tmp_last_V_4_reg_1577;
    iq_out_4_TSTRB <= ap_const_lv4_0;
    iq_out_4_TUSER <= ap_const_lv3_4;

    iq_out_4_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op275_write_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op275_write_state3 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            iq_out_4_TVALID <= ap_const_logic_1;
        else 
            iq_out_4_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    iq_out_5_TDATA <= iqprereg_Array_5_q0;

    iq_out_5_TDATA_blk_n_assign_proc : process(iq_out_5_TREADY, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1049_5_reg_1590, icmp_ln379_5_reg_1595)
    begin
        if (((icmp_ln379_5_reg_1595 = ap_const_lv1_0) and (icmp_ln1049_5_reg_1590 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iq_out_5_TDATA_blk_n <= iq_out_5_TREADY;
        else 
            iq_out_5_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iq_out_5_TKEEP <= ap_const_lv4_0;
    iq_out_5_TLAST <= tmp_last_V_5_reg_1599;
    iq_out_5_TSTRB <= ap_const_lv4_0;
    iq_out_5_TUSER <= ap_const_lv3_5;

    iq_out_5_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op279_write_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op279_write_state3 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            iq_out_5_TVALID <= ap_const_logic_1;
        else 
            iq_out_5_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    iq_out_6_TDATA <= iqprereg_Array_6_q0;

    iq_out_6_TDATA_blk_n_assign_proc : process(iq_out_6_TREADY, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1049_6_reg_1612, icmp_ln379_6_reg_1617)
    begin
        if (((icmp_ln379_6_reg_1617 = ap_const_lv1_0) and (icmp_ln1049_6_reg_1612 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iq_out_6_TDATA_blk_n <= iq_out_6_TREADY;
        else 
            iq_out_6_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iq_out_6_TKEEP <= ap_const_lv4_0;
    iq_out_6_TLAST <= tmp_last_V_6_reg_1621;
    iq_out_6_TSTRB <= ap_const_lv4_0;
    iq_out_6_TUSER <= ap_const_lv3_6;

    iq_out_6_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op283_write_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op283_write_state3 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            iq_out_6_TVALID <= ap_const_logic_1;
        else 
            iq_out_6_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    iq_out_7_TDATA <= iqprereg_Array_7_q0;

    iq_out_7_TDATA_blk_n_assign_proc : process(iq_out_7_TREADY, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1049_7_reg_1634, icmp_ln379_7_reg_1639)
    begin
        if (((icmp_ln379_7_reg_1639 = ap_const_lv1_0) and (icmp_ln1049_7_reg_1634 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iq_out_7_TDATA_blk_n <= iq_out_7_TREADY;
        else 
            iq_out_7_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iq_out_7_TKEEP <= ap_const_lv4_0;
    iq_out_7_TLAST <= tmp_last_V_7_reg_1643;
    iq_out_7_TSTRB <= ap_const_lv4_0;
    iq_out_7_TUSER <= ap_const_lv3_7;

    iq_out_7_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op287_write_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op287_write_state3 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            iq_out_7_TVALID <= ap_const_logic_1;
        else 
            iq_out_7_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    iqprereg_Array_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1049_reg_1480, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            iqprereg_Array_0_ce0 <= icmp_ln1049_reg_1480(0);
        else 
            iqprereg_Array_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iqprereg_Array_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1049_reg_1480, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            iqprereg_Array_0_we0 <= icmp_ln1049_reg_1480(0);
        else 
            iqprereg_Array_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    iqprereg_Array_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1049_1_reg_1502, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            iqprereg_Array_1_ce0 <= icmp_ln1049_1_reg_1502(0);
        else 
            iqprereg_Array_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iqprereg_Array_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1049_1_reg_1502, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            iqprereg_Array_1_we0 <= icmp_ln1049_1_reg_1502(0);
        else 
            iqprereg_Array_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    iqprereg_Array_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1049_2_reg_1524, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            iqprereg_Array_2_ce0 <= icmp_ln1049_2_reg_1524(0);
        else 
            iqprereg_Array_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iqprereg_Array_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1049_2_reg_1524, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            iqprereg_Array_2_we0 <= icmp_ln1049_2_reg_1524(0);
        else 
            iqprereg_Array_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    iqprereg_Array_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1049_3_reg_1546, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            iqprereg_Array_3_ce0 <= icmp_ln1049_3_reg_1546(0);
        else 
            iqprereg_Array_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iqprereg_Array_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1049_3_reg_1546, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            iqprereg_Array_3_we0 <= icmp_ln1049_3_reg_1546(0);
        else 
            iqprereg_Array_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    iqprereg_Array_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1049_4_reg_1568, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            iqprereg_Array_4_ce0 <= icmp_ln1049_4_reg_1568(0);
        else 
            iqprereg_Array_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iqprereg_Array_4_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1049_4_reg_1568, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            iqprereg_Array_4_we0 <= icmp_ln1049_4_reg_1568(0);
        else 
            iqprereg_Array_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    iqprereg_Array_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1049_5_reg_1590, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            iqprereg_Array_5_ce0 <= icmp_ln1049_5_reg_1590(0);
        else 
            iqprereg_Array_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iqprereg_Array_5_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1049_5_reg_1590, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            iqprereg_Array_5_we0 <= icmp_ln1049_5_reg_1590(0);
        else 
            iqprereg_Array_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    iqprereg_Array_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1049_6_reg_1612, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            iqprereg_Array_6_ce0 <= icmp_ln1049_6_reg_1612(0);
        else 
            iqprereg_Array_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iqprereg_Array_6_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1049_6_reg_1612, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            iqprereg_Array_6_we0 <= icmp_ln1049_6_reg_1612(0);
        else 
            iqprereg_Array_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    iqprereg_Array_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1049_7_reg_1634, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            iqprereg_Array_7_ce0 <= icmp_ln1049_7_reg_1634(0);
        else 
            iqprereg_Array_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iqprereg_Array_7_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1049_7_reg_1634, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            iqprereg_Array_7_we0 <= icmp_ln1049_7_reg_1634(0);
        else 
            iqprereg_Array_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    lane_V_1_fu_744_p1 <= m_V_1_reg_1354(2 - 1 downto 0);
    lane_V_2_fu_808_p1 <= m_V_2_reg_1364(2 - 1 downto 0);
    lane_V_3_fu_872_p1 <= m_V_3_reg_1374(2 - 1 downto 0);
    lane_V_4_fu_936_p1 <= m_V_4_reg_1384(2 - 1 downto 0);
    lane_V_5_fu_1000_p1 <= m_V_5_reg_1394(2 - 1 downto 0);
    lane_V_6_fu_1064_p1 <= m_V_6_reg_1404(2 - 1 downto 0);
    lane_V_7_fu_1128_p1 <= m_V_7_reg_1414(2 - 1 downto 0);
    lane_V_fu_680_p1 <= m_V_reg_1344(2 - 1 downto 0);
    p_Result_1_fu_796_p2 <= "1" when (and_ln819_1_fu_790_p2 = ap_const_lv4_0) else "0";
    p_Result_2_fu_860_p2 <= "1" when (and_ln819_2_fu_854_p2 = ap_const_lv4_0) else "0";
    p_Result_3_fu_924_p2 <= "1" when (and_ln819_3_fu_918_p2 = ap_const_lv4_0) else "0";
    p_Result_4_fu_988_p2 <= "1" when (and_ln819_4_fu_982_p2 = ap_const_lv4_0) else "0";
    p_Result_5_fu_1052_p2 <= "1" when (and_ln819_5_fu_1046_p2 = ap_const_lv4_0) else "0";
    p_Result_6_fu_1116_p2 <= "1" when (and_ln819_6_fu_1110_p2 = ap_const_lv4_0) else "0";
    p_Result_7_fu_1180_p2 <= "1" when (and_ln819_7_fu_1174_p2 = ap_const_lv4_0) else "0";
    p_Result_s_fu_732_p2 <= "1" when (and_ln819_fu_726_p2 = ap_const_lv4_0) else "0";
    shl_ln819_1_fu_784_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & zext_ln819_1_fu_780_p1(4-1 downto 0)))));
    shl_ln819_2_fu_848_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & zext_ln819_2_fu_844_p1(4-1 downto 0)))));
    shl_ln819_3_fu_912_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & zext_ln819_3_fu_908_p1(4-1 downto 0)))));
    shl_ln819_4_fu_976_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & zext_ln819_4_fu_972_p1(4-1 downto 0)))));
    shl_ln819_5_fu_1040_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & zext_ln819_5_fu_1036_p1(4-1 downto 0)))));
    shl_ln819_6_fu_1104_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & zext_ln819_6_fu_1100_p1(4-1 downto 0)))));
    shl_ln819_7_fu_1168_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & zext_ln819_7_fu_1164_p1(4-1 downto 0)))));
    shl_ln819_fu_720_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & zext_ln819_fu_716_p1(4-1 downto 0)))));
    tmp_last_V_1_fu_762_p2 <= "1" when (tocapture_1 = ap_const_lv8_1) else "0";
    tmp_last_V_2_fu_826_p2 <= "1" when (tocapture_2 = ap_const_lv8_1) else "0";
    tmp_last_V_3_fu_890_p2 <= "1" when (tocapture_3 = ap_const_lv8_1) else "0";
    tmp_last_V_4_fu_954_p2 <= "1" when (tocapture_4 = ap_const_lv8_1) else "0";
    tmp_last_V_5_fu_1018_p2 <= "1" when (tocapture_5 = ap_const_lv8_1) else "0";
    tmp_last_V_6_fu_1082_p2 <= "1" when (tocapture_6 = ap_const_lv8_1) else "0";
    tmp_last_V_7_fu_1146_p2 <= "1" when (tocapture_7 = ap_const_lv8_1) else "0";
    tmp_last_V_fu_698_p2 <= "1" when (tocapture_0 = ap_const_lv8_1) else "0";
    tmp_nbreadreq_fu_326_p7 <= (0=>(instream_TVALID), others=>'-');
    trigger_V_fu_670_p4 <= instream_TUSER(12 downto 9);
    x_0_fu_632_p1 <= iniq_TDATA(32 - 1 downto 0);
    zext_ln819_1_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lane_V_1_fu_744_p1),4));
    zext_ln819_2_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lane_V_2_fu_808_p1),4));
    zext_ln819_3_fu_908_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lane_V_3_fu_872_p1),4));
    zext_ln819_4_fu_972_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lane_V_4_fu_936_p1),4));
    zext_ln819_5_fu_1036_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lane_V_5_fu_1000_p1),4));
    zext_ln819_6_fu_1100_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lane_V_6_fu_1064_p1),4));
    zext_ln819_7_fu_1164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lane_V_7_fu_1128_p1),4));
    zext_ln819_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lane_V_fu_680_p1),4));
end behav;
