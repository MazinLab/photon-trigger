// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="postage_postage,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.307625,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1091,HLS_SYN_LUT=1594,HLS_VERSION=2021_1}" *)

module postage (
// synthesis translate_off
    kernel_block,
// synthesis translate_on
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        instream_TDATA,
        instream_TVALID,
        instream_TREADY,
        instream_TKEEP,
        instream_TSTRB,
        instream_TUSER,
        instream_TLAST,
        iniq_TDATA,
        iniq_TVALID,
        iniq_TREADY,
        iniq_TKEEP,
        iniq_TSTRB,
        iniq_TLAST,
        iq_out_0_TDATA,
        iq_out_0_TVALID,
        iq_out_0_TREADY,
        iq_out_0_TKEEP,
        iq_out_0_TSTRB,
        iq_out_0_TUSER,
        iq_out_0_TLAST,
        iq_out_1_TDATA,
        iq_out_1_TVALID,
        iq_out_1_TREADY,
        iq_out_1_TKEEP,
        iq_out_1_TSTRB,
        iq_out_1_TUSER,
        iq_out_1_TLAST,
        iq_out_2_TDATA,
        iq_out_2_TVALID,
        iq_out_2_TREADY,
        iq_out_2_TKEEP,
        iq_out_2_TSTRB,
        iq_out_2_TUSER,
        iq_out_2_TLAST,
        iq_out_3_TDATA,
        iq_out_3_TVALID,
        iq_out_3_TREADY,
        iq_out_3_TKEEP,
        iq_out_3_TSTRB,
        iq_out_3_TUSER,
        iq_out_3_TLAST,
        iq_out_4_TDATA,
        iq_out_4_TVALID,
        iq_out_4_TREADY,
        iq_out_4_TKEEP,
        iq_out_4_TSTRB,
        iq_out_4_TUSER,
        iq_out_4_TLAST,
        iq_out_5_TDATA,
        iq_out_5_TVALID,
        iq_out_5_TREADY,
        iq_out_5_TKEEP,
        iq_out_5_TSTRB,
        iq_out_5_TUSER,
        iq_out_5_TLAST,
        iq_out_6_TDATA,
        iq_out_6_TVALID,
        iq_out_6_TREADY,
        iq_out_6_TKEEP,
        iq_out_6_TSTRB,
        iq_out_6_TUSER,
        iq_out_6_TLAST,
        iq_out_7_TDATA,
        iq_out_7_TVALID,
        iq_out_7_TREADY,
        iq_out_7_TKEEP,
        iq_out_7_TSTRB,
        iq_out_7_TUSER,
        iq_out_7_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

// synthesis translate_off
output kernel_block;
// synthesis translate_on
input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] instream_TDATA;
input   instream_TVALID;
output   instream_TREADY;
input  [7:0] instream_TKEEP;
input  [7:0] instream_TSTRB;
input  [12:0] instream_TUSER;
input  [0:0] instream_TLAST;
input  [127:0] iniq_TDATA;
input   iniq_TVALID;
output   iniq_TREADY;
input  [15:0] iniq_TKEEP;
input  [15:0] iniq_TSTRB;
input  [0:0] iniq_TLAST;
output  [31:0] iq_out_0_TDATA;
output   iq_out_0_TVALID;
input   iq_out_0_TREADY;
output  [3:0] iq_out_0_TKEEP;
output  [3:0] iq_out_0_TSTRB;
output  [2:0] iq_out_0_TUSER;
output  [0:0] iq_out_0_TLAST;
output  [31:0] iq_out_1_TDATA;
output   iq_out_1_TVALID;
input   iq_out_1_TREADY;
output  [3:0] iq_out_1_TKEEP;
output  [3:0] iq_out_1_TSTRB;
output  [2:0] iq_out_1_TUSER;
output  [0:0] iq_out_1_TLAST;
output  [31:0] iq_out_2_TDATA;
output   iq_out_2_TVALID;
input   iq_out_2_TREADY;
output  [3:0] iq_out_2_TKEEP;
output  [3:0] iq_out_2_TSTRB;
output  [2:0] iq_out_2_TUSER;
output  [0:0] iq_out_2_TLAST;
output  [31:0] iq_out_3_TDATA;
output   iq_out_3_TVALID;
input   iq_out_3_TREADY;
output  [3:0] iq_out_3_TKEEP;
output  [3:0] iq_out_3_TSTRB;
output  [2:0] iq_out_3_TUSER;
output  [0:0] iq_out_3_TLAST;
output  [31:0] iq_out_4_TDATA;
output   iq_out_4_TVALID;
input   iq_out_4_TREADY;
output  [3:0] iq_out_4_TKEEP;
output  [3:0] iq_out_4_TSTRB;
output  [2:0] iq_out_4_TUSER;
output  [0:0] iq_out_4_TLAST;
output  [31:0] iq_out_5_TDATA;
output   iq_out_5_TVALID;
input   iq_out_5_TREADY;
output  [3:0] iq_out_5_TKEEP;
output  [3:0] iq_out_5_TSTRB;
output  [2:0] iq_out_5_TUSER;
output  [0:0] iq_out_5_TLAST;
output  [31:0] iq_out_6_TDATA;
output   iq_out_6_TVALID;
input   iq_out_6_TREADY;
output  [3:0] iq_out_6_TKEEP;
output  [3:0] iq_out_6_TSTRB;
output  [2:0] iq_out_6_TUSER;
output  [0:0] iq_out_6_TLAST;
output  [31:0] iq_out_7_TDATA;
output   iq_out_7_TVALID;
input   iq_out_7_TREADY;
output  [3:0] iq_out_7_TKEEP;
output  [3:0] iq_out_7_TSTRB;
output  [2:0] iq_out_7_TUSER;
output  [0:0] iq_out_7_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg instream_TREADY;
reg iniq_TREADY;
reg iq_out_0_TVALID;
reg iq_out_1_TVALID;
reg iq_out_2_TVALID;
reg iq_out_3_TVALID;
reg iq_out_4_TVALID;
reg iq_out_5_TVALID;
reg iq_out_6_TVALID;
reg iq_out_7_TVALID;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [11:0] monitor_0;
wire   [11:0] monitor_1;
wire   [11:0] monitor_2;
wire   [11:0] monitor_3;
wire   [11:0] monitor_4;
wire   [11:0] monitor_5;
wire   [11:0] monitor_6;
wire   [11:0] monitor_7;
reg   [7:0] tocapture_0;
reg   [7:0] tocapture_1;
reg   [7:0] tocapture_2;
reg   [7:0] tocapture_3;
reg   [7:0] tocapture_4;
reg   [7:0] tocapture_5;
reg   [7:0] tocapture_6;
reg   [7:0] tocapture_7;
reg    iqprereg_Array_0_ce0;
reg    iqprereg_Array_0_we0;
wire   [31:0] iqprereg_Array_0_q0;
reg    iqprereg_Array_1_ce0;
reg    iqprereg_Array_1_we0;
wire   [31:0] iqprereg_Array_1_q0;
reg    iqprereg_Array_2_ce0;
reg    iqprereg_Array_2_we0;
wire   [31:0] iqprereg_Array_2_q0;
reg    iqprereg_Array_3_ce0;
reg    iqprereg_Array_3_we0;
wire   [31:0] iqprereg_Array_3_q0;
reg    iqprereg_Array_4_ce0;
reg    iqprereg_Array_4_we0;
wire   [31:0] iqprereg_Array_4_q0;
reg    iqprereg_Array_5_ce0;
reg    iqprereg_Array_5_we0;
wire   [31:0] iqprereg_Array_5_q0;
reg    iqprereg_Array_6_ce0;
reg    iqprereg_Array_6_we0;
wire   [31:0] iqprereg_Array_6_q0;
reg    iqprereg_Array_7_ce0;
reg    iqprereg_Array_7_we0;
wire   [31:0] iqprereg_Array_7_q0;
reg    instream_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] tmp_nbreadreq_fu_326_p7;
reg    iniq_TDATA_blk_n;
reg    iq_out_0_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln1049_reg_1480;
reg   [0:0] icmp_ln379_reg_1485;
reg    iq_out_1_TDATA_blk_n;
reg   [0:0] icmp_ln1049_1_reg_1502;
reg   [0:0] icmp_ln379_1_reg_1507;
reg    iq_out_2_TDATA_blk_n;
reg   [0:0] icmp_ln1049_2_reg_1524;
reg   [0:0] icmp_ln379_2_reg_1529;
reg    iq_out_3_TDATA_blk_n;
reg   [0:0] icmp_ln1049_3_reg_1546;
reg   [0:0] icmp_ln379_3_reg_1551;
reg    iq_out_4_TDATA_blk_n;
reg   [0:0] icmp_ln1049_4_reg_1568;
reg   [0:0] icmp_ln379_4_reg_1573;
reg    iq_out_5_TDATA_blk_n;
reg   [0:0] icmp_ln1049_5_reg_1590;
reg   [0:0] icmp_ln379_5_reg_1595;
reg    iq_out_6_TDATA_blk_n;
reg   [0:0] icmp_ln1049_6_reg_1612;
reg   [0:0] icmp_ln379_6_reg_1617;
reg    iq_out_7_TDATA_blk_n;
reg   [0:0] icmp_ln1049_7_reg_1634;
reg   [0:0] icmp_ln379_7_reg_1639;
reg   [11:0] m_V_reg_1344;
reg   [8:0] gid_V_reg_1349;
reg   [11:0] m_V_1_reg_1354;
reg   [8:0] gid_V_1_reg_1359;
reg   [11:0] m_V_2_reg_1364;
reg   [8:0] gid_V_2_reg_1369;
reg   [11:0] m_V_3_reg_1374;
reg   [8:0] gid_V_3_reg_1379;
reg   [11:0] m_V_4_reg_1384;
reg   [8:0] gid_V_4_reg_1389;
reg   [11:0] m_V_5_reg_1394;
reg   [8:0] gid_V_5_reg_1399;
reg   [11:0] m_V_6_reg_1404;
reg   [8:0] gid_V_6_reg_1409;
reg   [11:0] m_V_7_reg_1414;
reg   [8:0] gid_V_7_reg_1419;
wire   [31:0] x_0_fu_632_p1;
reg   [31:0] x_0_reg_1427;
reg    ap_block_state2_pp0_stage0_iter0;
reg    ap_predicate_op259_write_state3;
reg    ap_predicate_op263_write_state3;
reg    ap_predicate_op267_write_state3;
reg    ap_predicate_op271_write_state3;
reg    ap_predicate_op275_write_state3;
reg    ap_predicate_op279_write_state3;
reg    ap_predicate_op283_write_state3;
reg    ap_predicate_op287_write_state3;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] x_1_reg_1439;
reg   [31:0] x_2_reg_1451;
reg   [31:0] x_3_reg_1463;
wire   [1:0] lane_V_fu_680_p1;
reg   [1:0] lane_V_reg_1475;
wire   [0:0] icmp_ln1049_fu_683_p2;
wire   [0:0] icmp_ln379_fu_692_p2;
wire   [0:0] tmp_last_V_fu_698_p2;
reg   [0:0] tmp_last_V_reg_1489;
wire   [1:0] lane_V_1_fu_744_p1;
reg   [1:0] lane_V_1_reg_1497;
wire   [0:0] icmp_ln1049_1_fu_747_p2;
wire   [0:0] icmp_ln379_1_fu_756_p2;
wire   [0:0] tmp_last_V_1_fu_762_p2;
reg   [0:0] tmp_last_V_1_reg_1511;
wire   [1:0] lane_V_2_fu_808_p1;
reg   [1:0] lane_V_2_reg_1519;
wire   [0:0] icmp_ln1049_2_fu_811_p2;
wire   [0:0] icmp_ln379_2_fu_820_p2;
wire   [0:0] tmp_last_V_2_fu_826_p2;
reg   [0:0] tmp_last_V_2_reg_1533;
wire   [1:0] lane_V_3_fu_872_p1;
reg   [1:0] lane_V_3_reg_1541;
wire   [0:0] icmp_ln1049_3_fu_875_p2;
wire   [0:0] icmp_ln379_3_fu_884_p2;
wire   [0:0] tmp_last_V_3_fu_890_p2;
reg   [0:0] tmp_last_V_3_reg_1555;
wire   [1:0] lane_V_4_fu_936_p1;
reg   [1:0] lane_V_4_reg_1563;
wire   [0:0] icmp_ln1049_4_fu_939_p2;
wire   [0:0] icmp_ln379_4_fu_948_p2;
wire   [0:0] tmp_last_V_4_fu_954_p2;
reg   [0:0] tmp_last_V_4_reg_1577;
wire   [1:0] lane_V_5_fu_1000_p1;
reg   [1:0] lane_V_5_reg_1585;
wire   [0:0] icmp_ln1049_5_fu_1003_p2;
wire   [0:0] icmp_ln379_5_fu_1012_p2;
wire   [0:0] tmp_last_V_5_fu_1018_p2;
reg   [0:0] tmp_last_V_5_reg_1599;
wire   [1:0] lane_V_6_fu_1064_p1;
reg   [1:0] lane_V_6_reg_1607;
wire   [0:0] icmp_ln1049_6_fu_1067_p2;
wire   [0:0] icmp_ln379_6_fu_1076_p2;
wire   [0:0] tmp_last_V_6_fu_1082_p2;
reg   [0:0] tmp_last_V_6_reg_1621;
wire   [1:0] lane_V_7_fu_1128_p1;
reg   [1:0] lane_V_7_reg_1629;
wire   [0:0] icmp_ln1049_7_fu_1131_p2;
wire   [0:0] icmp_ln379_7_fu_1140_p2;
wire   [0:0] tmp_last_V_7_fu_1146_p2;
reg   [0:0] tmp_last_V_7_reg_1643;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire   [7:0] add_ln407_fu_704_p2;
wire   [0:0] p_Result_s_fu_732_p2;
wire   [7:0] add_ln407_1_fu_768_p2;
wire   [0:0] p_Result_1_fu_796_p2;
wire   [7:0] add_ln407_2_fu_832_p2;
wire   [0:0] p_Result_2_fu_860_p2;
wire   [7:0] add_ln407_3_fu_896_p2;
wire   [0:0] p_Result_3_fu_924_p2;
wire   [7:0] add_ln407_4_fu_960_p2;
wire   [0:0] p_Result_4_fu_988_p2;
wire   [7:0] add_ln407_5_fu_1024_p2;
wire   [0:0] p_Result_5_fu_1052_p2;
wire   [7:0] add_ln407_6_fu_1088_p2;
wire   [0:0] p_Result_6_fu_1116_p2;
wire   [7:0] add_ln407_7_fu_1152_p2;
wire   [0:0] p_Result_7_fu_1180_p2;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] DataIn_assign_fu_1192_p6;
wire   [31:0] DataIn_assign_1_fu_1211_p6;
wire   [31:0] DataIn_assign_2_fu_1230_p6;
wire   [31:0] DataIn_assign_3_fu_1249_p6;
wire   [31:0] DataIn_assign_4_fu_1268_p6;
wire   [31:0] DataIn_assign_5_fu_1287_p6;
wire   [31:0] DataIn_assign_6_fu_1306_p6;
wire   [31:0] DataIn_assign_7_fu_1325_p6;
wire   [8:0] group_V_fu_666_p1;
wire   [3:0] zext_ln819_fu_716_p1;
wire   [3:0] shl_ln819_fu_720_p2;
wire   [3:0] trigger_V_fu_670_p4;
wire   [3:0] and_ln819_fu_726_p2;
wire   [3:0] zext_ln819_1_fu_780_p1;
wire   [3:0] shl_ln819_1_fu_784_p2;
wire   [3:0] and_ln819_1_fu_790_p2;
wire   [3:0] zext_ln819_2_fu_844_p1;
wire   [3:0] shl_ln819_2_fu_848_p2;
wire   [3:0] and_ln819_2_fu_854_p2;
wire   [3:0] zext_ln819_3_fu_908_p1;
wire   [3:0] shl_ln819_3_fu_912_p2;
wire   [3:0] and_ln819_3_fu_918_p2;
wire   [3:0] zext_ln819_4_fu_972_p1;
wire   [3:0] shl_ln819_4_fu_976_p2;
wire   [3:0] and_ln819_4_fu_982_p2;
wire   [3:0] zext_ln819_5_fu_1036_p1;
wire   [3:0] shl_ln819_5_fu_1040_p2;
wire   [3:0] and_ln819_5_fu_1046_p2;
wire   [3:0] zext_ln819_6_fu_1100_p1;
wire   [3:0] shl_ln819_6_fu_1104_p2;
wire   [3:0] and_ln819_6_fu_1110_p2;
wire   [3:0] zext_ln819_7_fu_1164_p1;
wire   [3:0] shl_ln819_7_fu_1168_p2;
wire   [3:0] and_ln819_7_fu_1174_p2;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_949;
reg    ap_condition_960;
reg    ap_condition_971;
reg    ap_condition_982;
reg    ap_condition_993;
reg    ap_condition_1004;
reg    ap_condition_1015;
reg    ap_condition_1026;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 tocapture_0 = 8'd0;
#0 tocapture_1 = 8'd0;
#0 tocapture_2 = 8'd0;
#0 tocapture_3 = 8'd0;
#0 tocapture_4 = 8'd0;
#0 tocapture_5 = 8'd0;
#0 tocapture_6 = 8'd0;
#0 tocapture_7 = 8'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

postage_iqprereg_Array_0 #(
    .DataWidth( 32 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
iqprereg_Array_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(5'd29),
    .ce0(iqprereg_Array_0_ce0),
    .we0(iqprereg_Array_0_we0),
    .d0(DataIn_assign_fu_1192_p6),
    .q0(iqprereg_Array_0_q0)
);

postage_iqprereg_Array_0 #(
    .DataWidth( 32 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
iqprereg_Array_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(5'd29),
    .ce0(iqprereg_Array_1_ce0),
    .we0(iqprereg_Array_1_we0),
    .d0(DataIn_assign_1_fu_1211_p6),
    .q0(iqprereg_Array_1_q0)
);

postage_iqprereg_Array_0 #(
    .DataWidth( 32 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
iqprereg_Array_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(5'd29),
    .ce0(iqprereg_Array_2_ce0),
    .we0(iqprereg_Array_2_we0),
    .d0(DataIn_assign_2_fu_1230_p6),
    .q0(iqprereg_Array_2_q0)
);

postage_iqprereg_Array_0 #(
    .DataWidth( 32 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
iqprereg_Array_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(5'd29),
    .ce0(iqprereg_Array_3_ce0),
    .we0(iqprereg_Array_3_we0),
    .d0(DataIn_assign_3_fu_1249_p6),
    .q0(iqprereg_Array_3_q0)
);

postage_iqprereg_Array_0 #(
    .DataWidth( 32 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
iqprereg_Array_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(5'd29),
    .ce0(iqprereg_Array_4_ce0),
    .we0(iqprereg_Array_4_we0),
    .d0(DataIn_assign_4_fu_1268_p6),
    .q0(iqprereg_Array_4_q0)
);

postage_iqprereg_Array_0 #(
    .DataWidth( 32 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
iqprereg_Array_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(5'd29),
    .ce0(iqprereg_Array_5_ce0),
    .we0(iqprereg_Array_5_we0),
    .d0(DataIn_assign_5_fu_1287_p6),
    .q0(iqprereg_Array_5_q0)
);

postage_iqprereg_Array_0 #(
    .DataWidth( 32 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
iqprereg_Array_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(5'd29),
    .ce0(iqprereg_Array_6_ce0),
    .we0(iqprereg_Array_6_we0),
    .d0(DataIn_assign_6_fu_1306_p6),
    .q0(iqprereg_Array_6_q0)
);

postage_iqprereg_Array_0 #(
    .DataWidth( 32 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
iqprereg_Array_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(5'd29),
    .ce0(iqprereg_Array_7_ce0),
    .we0(iqprereg_Array_7_we0),
    .d0(DataIn_assign_7_fu_1325_p6),
    .q0(iqprereg_Array_7_q0)
);

postage_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .monitor_0(monitor_0),
    .monitor_1(monitor_1),
    .monitor_2(monitor_2),
    .monitor_3(monitor_3),
    .monitor_4(monitor_4),
    .monitor_5(monitor_5),
    .monitor_6(monitor_6),
    .monitor_7(monitor_7)
);

postage_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U1(
    .din0(x_0_reg_1427),
    .din1(x_1_reg_1439),
    .din2(x_2_reg_1451),
    .din3(x_3_reg_1463),
    .din4(lane_V_reg_1475),
    .dout(DataIn_assign_fu_1192_p6)
);

postage_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U2(
    .din0(x_0_reg_1427),
    .din1(x_1_reg_1439),
    .din2(x_2_reg_1451),
    .din3(x_3_reg_1463),
    .din4(lane_V_1_reg_1497),
    .dout(DataIn_assign_1_fu_1211_p6)
);

postage_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U3(
    .din0(x_0_reg_1427),
    .din1(x_1_reg_1439),
    .din2(x_2_reg_1451),
    .din3(x_3_reg_1463),
    .din4(lane_V_2_reg_1519),
    .dout(DataIn_assign_2_fu_1230_p6)
);

postage_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U4(
    .din0(x_0_reg_1427),
    .din1(x_1_reg_1439),
    .din2(x_2_reg_1451),
    .din3(x_3_reg_1463),
    .din4(lane_V_3_reg_1541),
    .dout(DataIn_assign_3_fu_1249_p6)
);

postage_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U5(
    .din0(x_0_reg_1427),
    .din1(x_1_reg_1439),
    .din2(x_2_reg_1451),
    .din3(x_3_reg_1463),
    .din4(lane_V_4_reg_1563),
    .dout(DataIn_assign_4_fu_1268_p6)
);

postage_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U6(
    .din0(x_0_reg_1427),
    .din1(x_1_reg_1439),
    .din2(x_2_reg_1451),
    .din3(x_3_reg_1463),
    .din4(lane_V_5_reg_1585),
    .dout(DataIn_assign_5_fu_1287_p6)
);

postage_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U7(
    .din0(x_0_reg_1427),
    .din1(x_1_reg_1439),
    .din2(x_2_reg_1451),
    .din3(x_3_reg_1463),
    .din4(lane_V_6_reg_1607),
    .dout(DataIn_assign_6_fu_1306_p6)
);

postage_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U8(
    .din0(x_0_reg_1427),
    .din1(x_1_reg_1439),
    .din2(x_2_reg_1451),
    .din3(x_3_reg_1463),
    .din4(lane_V_7_reg_1629),
    .dout(DataIn_assign_7_fu_1325_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_949)) begin
        if (((p_Result_s_fu_732_p2 == 1'd0) & (icmp_ln379_fu_692_p2 == 1'd1))) begin
            tocapture_0 <= 8'd90;
        end else if ((icmp_ln379_fu_692_p2 == 1'd0)) begin
            tocapture_0 <= add_ln407_fu_704_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_960)) begin
        if (((p_Result_1_fu_796_p2 == 1'd0) & (icmp_ln379_1_fu_756_p2 == 1'd1))) begin
            tocapture_1 <= 8'd90;
        end else if ((icmp_ln379_1_fu_756_p2 == 1'd0)) begin
            tocapture_1 <= add_ln407_1_fu_768_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_971)) begin
        if (((p_Result_2_fu_860_p2 == 1'd0) & (icmp_ln379_2_fu_820_p2 == 1'd1))) begin
            tocapture_2 <= 8'd90;
        end else if ((icmp_ln379_2_fu_820_p2 == 1'd0)) begin
            tocapture_2 <= add_ln407_2_fu_832_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_982)) begin
        if (((p_Result_3_fu_924_p2 == 1'd0) & (icmp_ln379_3_fu_884_p2 == 1'd1))) begin
            tocapture_3 <= 8'd90;
        end else if ((icmp_ln379_3_fu_884_p2 == 1'd0)) begin
            tocapture_3 <= add_ln407_3_fu_896_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_993)) begin
        if (((p_Result_4_fu_988_p2 == 1'd0) & (icmp_ln379_4_fu_948_p2 == 1'd1))) begin
            tocapture_4 <= 8'd90;
        end else if ((icmp_ln379_4_fu_948_p2 == 1'd0)) begin
            tocapture_4 <= add_ln407_4_fu_960_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1004)) begin
        if (((p_Result_5_fu_1052_p2 == 1'd0) & (icmp_ln379_5_fu_1012_p2 == 1'd1))) begin
            tocapture_5 <= 8'd90;
        end else if ((icmp_ln379_5_fu_1012_p2 == 1'd0)) begin
            tocapture_5 <= add_ln407_5_fu_1024_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1015)) begin
        if (((p_Result_6_fu_1116_p2 == 1'd0) & (icmp_ln379_6_fu_1076_p2 == 1'd1))) begin
            tocapture_6 <= 8'd90;
        end else if ((icmp_ln379_6_fu_1076_p2 == 1'd0)) begin
            tocapture_6 <= add_ln407_6_fu_1088_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1026)) begin
        if (((p_Result_7_fu_1180_p2 == 1'd0) & (icmp_ln379_7_fu_1140_p2 == 1'd1))) begin
            tocapture_7 <= 8'd90;
        end else if ((icmp_ln379_7_fu_1140_p2 == 1'd0)) begin
            tocapture_7 <= add_ln407_7_fu_1152_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        gid_V_1_reg_1359 <= {{monitor_1[10:2]}};
        gid_V_2_reg_1369 <= {{monitor_2[10:2]}};
        gid_V_3_reg_1379 <= {{monitor_3[10:2]}};
        gid_V_4_reg_1389 <= {{monitor_4[10:2]}};
        gid_V_5_reg_1399 <= {{monitor_5[10:2]}};
        gid_V_6_reg_1409 <= {{monitor_6[10:2]}};
        gid_V_7_reg_1419 <= {{monitor_7[10:2]}};
        gid_V_reg_1349 <= {{monitor_0[10:2]}};
        m_V_1_reg_1354 <= monitor_1;
        m_V_2_reg_1364 <= monitor_2;
        m_V_3_reg_1374 <= monitor_3;
        m_V_4_reg_1384 <= monitor_4;
        m_V_5_reg_1394 <= monitor_5;
        m_V_6_reg_1404 <= monitor_6;
        m_V_7_reg_1414 <= monitor_7;
        m_V_reg_1344 <= monitor_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_326_p7 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln1049_1_reg_1502 <= icmp_ln1049_1_fu_747_p2;
        icmp_ln1049_2_reg_1524 <= icmp_ln1049_2_fu_811_p2;
        icmp_ln1049_3_reg_1546 <= icmp_ln1049_3_fu_875_p2;
        icmp_ln1049_4_reg_1568 <= icmp_ln1049_4_fu_939_p2;
        icmp_ln1049_5_reg_1590 <= icmp_ln1049_5_fu_1003_p2;
        icmp_ln1049_6_reg_1612 <= icmp_ln1049_6_fu_1067_p2;
        icmp_ln1049_7_reg_1634 <= icmp_ln1049_7_fu_1131_p2;
        icmp_ln1049_reg_1480 <= icmp_ln1049_fu_683_p2;
        lane_V_1_reg_1497 <= lane_V_1_fu_744_p1;
        lane_V_2_reg_1519 <= lane_V_2_fu_808_p1;
        lane_V_3_reg_1541 <= lane_V_3_fu_872_p1;
        lane_V_4_reg_1563 <= lane_V_4_fu_936_p1;
        lane_V_5_reg_1585 <= lane_V_5_fu_1000_p1;
        lane_V_6_reg_1607 <= lane_V_6_fu_1064_p1;
        lane_V_7_reg_1629 <= lane_V_7_fu_1128_p1;
        lane_V_reg_1475 <= lane_V_fu_680_p1;
        x_0_reg_1427 <= x_0_fu_632_p1;
        x_1_reg_1439 <= {{iniq_TDATA[63:32]}};
        x_2_reg_1451 <= {{iniq_TDATA[95:64]}};
        x_3_reg_1463 <= {{iniq_TDATA[127:96]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1049_1_fu_747_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_326_p7 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln379_1_reg_1507 <= icmp_ln379_1_fu_756_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1049_2_fu_811_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_326_p7 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln379_2_reg_1529 <= icmp_ln379_2_fu_820_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1049_3_fu_875_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_326_p7 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln379_3_reg_1551 <= icmp_ln379_3_fu_884_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1049_4_fu_939_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_326_p7 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln379_4_reg_1573 <= icmp_ln379_4_fu_948_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1049_5_fu_1003_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_326_p7 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln379_5_reg_1595 <= icmp_ln379_5_fu_1012_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1049_6_fu_1067_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_326_p7 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln379_6_reg_1617 <= icmp_ln379_6_fu_1076_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1049_7_fu_1131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_326_p7 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln379_7_reg_1639 <= icmp_ln379_7_fu_1140_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1049_fu_683_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_326_p7 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln379_reg_1485 <= icmp_ln379_fu_692_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln379_1_fu_756_p2 == 1'd0) & (icmp_ln1049_1_fu_747_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_326_p7 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_last_V_1_reg_1511 <= tmp_last_V_1_fu_762_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln379_2_fu_820_p2 == 1'd0) & (icmp_ln1049_2_fu_811_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_326_p7 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_last_V_2_reg_1533 <= tmp_last_V_2_fu_826_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln379_3_fu_884_p2 == 1'd0) & (icmp_ln1049_3_fu_875_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_326_p7 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_last_V_3_reg_1555 <= tmp_last_V_3_fu_890_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln379_4_fu_948_p2 == 1'd0) & (icmp_ln1049_4_fu_939_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_326_p7 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_last_V_4_reg_1577 <= tmp_last_V_4_fu_954_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln379_5_fu_1012_p2 == 1'd0) & (icmp_ln1049_5_fu_1003_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_326_p7 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_last_V_5_reg_1599 <= tmp_last_V_5_fu_1018_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln379_6_fu_1076_p2 == 1'd0) & (icmp_ln1049_6_fu_1067_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_326_p7 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_last_V_6_reg_1621 <= tmp_last_V_6_fu_1082_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln379_7_fu_1140_p2 == 1'd0) & (icmp_ln1049_7_fu_1131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_326_p7 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_last_V_7_reg_1643 <= tmp_last_V_7_fu_1146_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln379_fu_692_p2 == 1'd0) & (icmp_ln1049_fu_683_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_326_p7 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_last_V_reg_1489 <= tmp_last_V_fu_698_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((tmp_nbreadreq_fu_326_p7 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_326_p7 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        iniq_TDATA_blk_n = iniq_TVALID;
    end else begin
        iniq_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_326_p7 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        iniq_TREADY = 1'b1;
    end else begin
        iniq_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_326_p7 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        instream_TDATA_blk_n = instream_TVALID;
    end else begin
        instream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_326_p7 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        instream_TREADY = 1'b1;
    end else begin
        instream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln379_reg_1485 == 1'd0) & (icmp_ln1049_reg_1480 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        iq_out_0_TDATA_blk_n = iq_out_0_TREADY;
    end else begin
        iq_out_0_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op259_write_state3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iq_out_0_TVALID = 1'b1;
    end else begin
        iq_out_0_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln379_1_reg_1507 == 1'd0) & (icmp_ln1049_1_reg_1502 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        iq_out_1_TDATA_blk_n = iq_out_1_TREADY;
    end else begin
        iq_out_1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op263_write_state3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iq_out_1_TVALID = 1'b1;
    end else begin
        iq_out_1_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln379_2_reg_1529 == 1'd0) & (icmp_ln1049_2_reg_1524 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        iq_out_2_TDATA_blk_n = iq_out_2_TREADY;
    end else begin
        iq_out_2_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op267_write_state3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iq_out_2_TVALID = 1'b1;
    end else begin
        iq_out_2_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln379_3_reg_1551 == 1'd0) & (icmp_ln1049_3_reg_1546 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        iq_out_3_TDATA_blk_n = iq_out_3_TREADY;
    end else begin
        iq_out_3_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op271_write_state3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iq_out_3_TVALID = 1'b1;
    end else begin
        iq_out_3_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln379_4_reg_1573 == 1'd0) & (icmp_ln1049_4_reg_1568 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        iq_out_4_TDATA_blk_n = iq_out_4_TREADY;
    end else begin
        iq_out_4_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op275_write_state3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iq_out_4_TVALID = 1'b1;
    end else begin
        iq_out_4_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln379_5_reg_1595 == 1'd0) & (icmp_ln1049_5_reg_1590 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        iq_out_5_TDATA_blk_n = iq_out_5_TREADY;
    end else begin
        iq_out_5_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op279_write_state3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iq_out_5_TVALID = 1'b1;
    end else begin
        iq_out_5_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln379_6_reg_1617 == 1'd0) & (icmp_ln1049_6_reg_1612 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        iq_out_6_TDATA_blk_n = iq_out_6_TREADY;
    end else begin
        iq_out_6_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op283_write_state3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iq_out_6_TVALID = 1'b1;
    end else begin
        iq_out_6_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln379_7_reg_1639 == 1'd0) & (icmp_ln1049_7_reg_1634 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        iq_out_7_TDATA_blk_n = iq_out_7_TREADY;
    end else begin
        iq_out_7_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op287_write_state3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iq_out_7_TVALID = 1'b1;
    end else begin
        iq_out_7_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iqprereg_Array_0_ce0 = icmp_ln1049_reg_1480;
    end else begin
        iqprereg_Array_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iqprereg_Array_0_we0 = icmp_ln1049_reg_1480;
    end else begin
        iqprereg_Array_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iqprereg_Array_1_ce0 = icmp_ln1049_1_reg_1502;
    end else begin
        iqprereg_Array_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iqprereg_Array_1_we0 = icmp_ln1049_1_reg_1502;
    end else begin
        iqprereg_Array_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iqprereg_Array_2_ce0 = icmp_ln1049_2_reg_1524;
    end else begin
        iqprereg_Array_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iqprereg_Array_2_we0 = icmp_ln1049_2_reg_1524;
    end else begin
        iqprereg_Array_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iqprereg_Array_3_ce0 = icmp_ln1049_3_reg_1546;
    end else begin
        iqprereg_Array_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iqprereg_Array_3_we0 = icmp_ln1049_3_reg_1546;
    end else begin
        iqprereg_Array_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iqprereg_Array_4_ce0 = icmp_ln1049_4_reg_1568;
    end else begin
        iqprereg_Array_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iqprereg_Array_4_we0 = icmp_ln1049_4_reg_1568;
    end else begin
        iqprereg_Array_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iqprereg_Array_5_ce0 = icmp_ln1049_5_reg_1590;
    end else begin
        iqprereg_Array_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iqprereg_Array_5_we0 = icmp_ln1049_5_reg_1590;
    end else begin
        iqprereg_Array_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iqprereg_Array_6_ce0 = icmp_ln1049_6_reg_1612;
    end else begin
        iqprereg_Array_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iqprereg_Array_6_we0 = icmp_ln1049_6_reg_1612;
    end else begin
        iqprereg_Array_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iqprereg_Array_7_ce0 = icmp_ln1049_7_reg_1634;
    end else begin
        iqprereg_Array_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iqprereg_Array_7_we0 = icmp_ln1049_7_reg_1634;
    end else begin
        iqprereg_Array_7_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((tmp_nbreadreq_fu_326_p7 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((tmp_nbreadreq_fu_326_p7 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln407_1_fu_768_p2 = ($signed(tocapture_1) + $signed(8'd255));

assign add_ln407_2_fu_832_p2 = ($signed(tocapture_2) + $signed(8'd255));

assign add_ln407_3_fu_896_p2 = ($signed(tocapture_3) + $signed(8'd255));

assign add_ln407_4_fu_960_p2 = ($signed(tocapture_4) + $signed(8'd255));

assign add_ln407_5_fu_1024_p2 = ($signed(tocapture_5) + $signed(8'd255));

assign add_ln407_6_fu_1088_p2 = ($signed(tocapture_6) + $signed(8'd255));

assign add_ln407_7_fu_1152_p2 = ($signed(tocapture_7) + $signed(8'd255));

assign add_ln407_fu_704_p2 = ($signed(tocapture_0) + $signed(8'd255));

assign and_ln819_1_fu_790_p2 = (trigger_V_fu_670_p4 & shl_ln819_1_fu_784_p2);

assign and_ln819_2_fu_854_p2 = (trigger_V_fu_670_p4 & shl_ln819_2_fu_848_p2);

assign and_ln819_3_fu_918_p2 = (trigger_V_fu_670_p4 & shl_ln819_3_fu_912_p2);

assign and_ln819_4_fu_982_p2 = (trigger_V_fu_670_p4 & shl_ln819_4_fu_976_p2);

assign and_ln819_5_fu_1046_p2 = (trigger_V_fu_670_p4 & shl_ln819_5_fu_1040_p2);

assign and_ln819_6_fu_1110_p2 = (trigger_V_fu_670_p4 & shl_ln819_6_fu_1104_p2);

assign and_ln819_7_fu_1174_p2 = (trigger_V_fu_670_p4 & shl_ln819_7_fu_1168_p2);

assign and_ln819_fu_726_p2 = (trigger_V_fu_670_p4 & shl_ln819_fu_720_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((iq_out_7_TREADY == 1'b0) & (ap_predicate_op287_write_state3 == 1'b1)) | ((iq_out_6_TREADY == 1'b0) & (ap_predicate_op283_write_state3 == 1'b1)) | ((iq_out_5_TREADY == 1'b0) & (ap_predicate_op279_write_state3 == 1'b1)) | ((iq_out_4_TREADY == 1'b0) & (ap_predicate_op275_write_state3 == 1'b1)) | ((iq_out_3_TREADY == 1'b0) & (ap_predicate_op271_write_state3 == 1'b1)) | ((iq_out_2_TREADY == 1'b0) & (ap_predicate_op267_write_state3 == 1'b1)) | ((iq_out_1_TREADY == 1'b0) & (ap_predicate_op263_write_state3 == 1'b1)) | ((iq_out_0_TREADY == 1'b0) & (ap_predicate_op259_write_state3 == 1'b1)))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((iniq_TVALID == 1'b0) & (tmp_nbreadreq_fu_326_p7 == 1'd1)) | ((instream_TVALID == 1'b0) & (tmp_nbreadreq_fu_326_p7 == 1'd1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((iq_out_7_TREADY == 1'b0) & (ap_predicate_op287_write_state3 == 1'b1)) | ((iq_out_6_TREADY == 1'b0) & (ap_predicate_op283_write_state3 == 1'b1)) | ((iq_out_5_TREADY == 1'b0) & (ap_predicate_op279_write_state3 == 1'b1)) | ((iq_out_4_TREADY == 1'b0) & (ap_predicate_op275_write_state3 == 1'b1)) | ((iq_out_3_TREADY == 1'b0) & (ap_predicate_op271_write_state3 == 1'b1)) | ((iq_out_2_TREADY == 1'b0) & (ap_predicate_op267_write_state3 == 1'b1)) | ((iq_out_1_TREADY == 1'b0) & (ap_predicate_op263_write_state3 == 1'b1)) | ((iq_out_0_TREADY == 1'b0) & (ap_predicate_op259_write_state3 == 1'b1)))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((iniq_TVALID == 1'b0) & (tmp_nbreadreq_fu_326_p7 == 1'd1)) | ((instream_TVALID == 1'b0) & (tmp_nbreadreq_fu_326_p7 == 1'd1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((iq_out_7_TREADY == 1'b0) & (ap_predicate_op287_write_state3 == 1'b1)) | ((iq_out_6_TREADY == 1'b0) & (ap_predicate_op283_write_state3 == 1'b1)) | ((iq_out_5_TREADY == 1'b0) & (ap_predicate_op279_write_state3 == 1'b1)) | ((iq_out_4_TREADY == 1'b0) & (ap_predicate_op275_write_state3 == 1'b1)) | ((iq_out_3_TREADY == 1'b0) & (ap_predicate_op271_write_state3 == 1'b1)) | ((iq_out_2_TREADY == 1'b0) & (ap_predicate_op267_write_state3 == 1'b1)) | ((iq_out_1_TREADY == 1'b0) & (ap_predicate_op263_write_state3 == 1'b1)) | ((iq_out_0_TREADY == 1'b0) & (ap_predicate_op259_write_state3 == 1'b1)))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((iniq_TVALID == 1'b0) & (tmp_nbreadreq_fu_326_p7 == 1'd1)) | ((instream_TVALID == 1'b0) & (tmp_nbreadreq_fu_326_p7 == 1'd1)))));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = (((iniq_TVALID == 1'b0) & (tmp_nbreadreq_fu_326_p7 == 1'd1)) | ((instream_TVALID == 1'b0) & (tmp_nbreadreq_fu_326_p7 == 1'd1)));
end

always @ (*) begin
    ap_block_state3_io = (((iq_out_7_TREADY == 1'b0) & (ap_predicate_op287_write_state3 == 1'b1)) | ((iq_out_6_TREADY == 1'b0) & (ap_predicate_op283_write_state3 == 1'b1)) | ((iq_out_5_TREADY == 1'b0) & (ap_predicate_op279_write_state3 == 1'b1)) | ((iq_out_4_TREADY == 1'b0) & (ap_predicate_op275_write_state3 == 1'b1)) | ((iq_out_3_TREADY == 1'b0) & (ap_predicate_op271_write_state3 == 1'b1)) | ((iq_out_2_TREADY == 1'b0) & (ap_predicate_op267_write_state3 == 1'b1)) | ((iq_out_1_TREADY == 1'b0) & (ap_predicate_op263_write_state3 == 1'b1)) | ((iq_out_0_TREADY == 1'b0) & (ap_predicate_op259_write_state3 == 1'b1)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((iq_out_7_TREADY == 1'b0) & (ap_predicate_op287_write_state3 == 1'b1)) | ((iq_out_6_TREADY == 1'b0) & (ap_predicate_op283_write_state3 == 1'b1)) | ((iq_out_5_TREADY == 1'b0) & (ap_predicate_op279_write_state3 == 1'b1)) | ((iq_out_4_TREADY == 1'b0) & (ap_predicate_op275_write_state3 == 1'b1)) | ((iq_out_3_TREADY == 1'b0) & (ap_predicate_op271_write_state3 == 1'b1)) | ((iq_out_2_TREADY == 1'b0) & (ap_predicate_op267_write_state3 == 1'b1)) | ((iq_out_1_TREADY == 1'b0) & (ap_predicate_op263_write_state3 == 1'b1)) | ((iq_out_0_TREADY == 1'b0) & (ap_predicate_op259_write_state3 == 1'b1)));
end

always @ (*) begin
    ap_condition_1004 = ((icmp_ln1049_5_fu_1003_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_326_p7 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_condition_1015 = ((icmp_ln1049_6_fu_1067_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_326_p7 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_condition_1026 = ((icmp_ln1049_7_fu_1131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_326_p7 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_condition_949 = ((icmp_ln1049_fu_683_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_326_p7 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_condition_960 = ((icmp_ln1049_1_fu_747_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_326_p7 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_condition_971 = ((icmp_ln1049_2_fu_811_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_326_p7 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_condition_982 = ((icmp_ln1049_3_fu_875_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_326_p7 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_condition_993 = ((icmp_ln1049_4_fu_939_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_326_p7 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op259_write_state3 = ((icmp_ln379_reg_1485 == 1'd0) & (icmp_ln1049_reg_1480 == 1'd1));
end

always @ (*) begin
    ap_predicate_op263_write_state3 = ((icmp_ln379_1_reg_1507 == 1'd0) & (icmp_ln1049_1_reg_1502 == 1'd1));
end

always @ (*) begin
    ap_predicate_op267_write_state3 = ((icmp_ln379_2_reg_1529 == 1'd0) & (icmp_ln1049_2_reg_1524 == 1'd1));
end

always @ (*) begin
    ap_predicate_op271_write_state3 = ((icmp_ln379_3_reg_1551 == 1'd0) & (icmp_ln1049_3_reg_1546 == 1'd1));
end

always @ (*) begin
    ap_predicate_op275_write_state3 = ((icmp_ln379_4_reg_1573 == 1'd0) & (icmp_ln1049_4_reg_1568 == 1'd1));
end

always @ (*) begin
    ap_predicate_op279_write_state3 = ((icmp_ln379_5_reg_1595 == 1'd0) & (icmp_ln1049_5_reg_1590 == 1'd1));
end

always @ (*) begin
    ap_predicate_op283_write_state3 = ((icmp_ln379_6_reg_1617 == 1'd0) & (icmp_ln1049_6_reg_1612 == 1'd1));
end

always @ (*) begin
    ap_predicate_op287_write_state3 = ((icmp_ln379_7_reg_1639 == 1'd0) & (icmp_ln1049_7_reg_1634 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign group_V_fu_666_p1 = instream_TUSER[8:0];

assign icmp_ln1049_1_fu_747_p2 = ((gid_V_1_reg_1359 == group_V_fu_666_p1) ? 1'b1 : 1'b0);

assign icmp_ln1049_2_fu_811_p2 = ((gid_V_2_reg_1369 == group_V_fu_666_p1) ? 1'b1 : 1'b0);

assign icmp_ln1049_3_fu_875_p2 = ((gid_V_3_reg_1379 == group_V_fu_666_p1) ? 1'b1 : 1'b0);

assign icmp_ln1049_4_fu_939_p2 = ((gid_V_4_reg_1389 == group_V_fu_666_p1) ? 1'b1 : 1'b0);

assign icmp_ln1049_5_fu_1003_p2 = ((gid_V_5_reg_1399 == group_V_fu_666_p1) ? 1'b1 : 1'b0);

assign icmp_ln1049_6_fu_1067_p2 = ((gid_V_6_reg_1409 == group_V_fu_666_p1) ? 1'b1 : 1'b0);

assign icmp_ln1049_7_fu_1131_p2 = ((gid_V_7_reg_1419 == group_V_fu_666_p1) ? 1'b1 : 1'b0);

assign icmp_ln1049_fu_683_p2 = ((gid_V_reg_1349 == group_V_fu_666_p1) ? 1'b1 : 1'b0);

assign icmp_ln379_1_fu_756_p2 = ((tocapture_1 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln379_2_fu_820_p2 = ((tocapture_2 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln379_3_fu_884_p2 = ((tocapture_3 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln379_4_fu_948_p2 = ((tocapture_4 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln379_5_fu_1012_p2 = ((tocapture_5 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln379_6_fu_1076_p2 = ((tocapture_6 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln379_7_fu_1140_p2 = ((tocapture_7 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln379_fu_692_p2 = ((tocapture_0 == 8'd0) ? 1'b1 : 1'b0);

assign iq_out_0_TDATA = iqprereg_Array_0_q0;

assign iq_out_0_TKEEP = 4'd0;

assign iq_out_0_TLAST = tmp_last_V_reg_1489;

assign iq_out_0_TSTRB = 4'd0;

assign iq_out_0_TUSER = 3'd0;

assign iq_out_1_TDATA = iqprereg_Array_1_q0;

assign iq_out_1_TKEEP = 4'd0;

assign iq_out_1_TLAST = tmp_last_V_1_reg_1511;

assign iq_out_1_TSTRB = 4'd0;

assign iq_out_1_TUSER = 3'd1;

assign iq_out_2_TDATA = iqprereg_Array_2_q0;

assign iq_out_2_TKEEP = 4'd0;

assign iq_out_2_TLAST = tmp_last_V_2_reg_1533;

assign iq_out_2_TSTRB = 4'd0;

assign iq_out_2_TUSER = 3'd2;

assign iq_out_3_TDATA = iqprereg_Array_3_q0;

assign iq_out_3_TKEEP = 4'd0;

assign iq_out_3_TLAST = tmp_last_V_3_reg_1555;

assign iq_out_3_TSTRB = 4'd0;

assign iq_out_3_TUSER = 3'd3;

assign iq_out_4_TDATA = iqprereg_Array_4_q0;

assign iq_out_4_TKEEP = 4'd0;

assign iq_out_4_TLAST = tmp_last_V_4_reg_1577;

assign iq_out_4_TSTRB = 4'd0;

assign iq_out_4_TUSER = 3'd4;

assign iq_out_5_TDATA = iqprereg_Array_5_q0;

assign iq_out_5_TKEEP = 4'd0;

assign iq_out_5_TLAST = tmp_last_V_5_reg_1599;

assign iq_out_5_TSTRB = 4'd0;

assign iq_out_5_TUSER = 3'd5;

assign iq_out_6_TDATA = iqprereg_Array_6_q0;

assign iq_out_6_TKEEP = 4'd0;

assign iq_out_6_TLAST = tmp_last_V_6_reg_1621;

assign iq_out_6_TSTRB = 4'd0;

assign iq_out_6_TUSER = 3'd6;

assign iq_out_7_TDATA = iqprereg_Array_7_q0;

assign iq_out_7_TKEEP = 4'd0;

assign iq_out_7_TLAST = tmp_last_V_7_reg_1643;

assign iq_out_7_TSTRB = 4'd0;

assign iq_out_7_TUSER = 3'd7;

assign lane_V_1_fu_744_p1 = m_V_1_reg_1354[1:0];

assign lane_V_2_fu_808_p1 = m_V_2_reg_1364[1:0];

assign lane_V_3_fu_872_p1 = m_V_3_reg_1374[1:0];

assign lane_V_4_fu_936_p1 = m_V_4_reg_1384[1:0];

assign lane_V_5_fu_1000_p1 = m_V_5_reg_1394[1:0];

assign lane_V_6_fu_1064_p1 = m_V_6_reg_1404[1:0];

assign lane_V_7_fu_1128_p1 = m_V_7_reg_1414[1:0];

assign lane_V_fu_680_p1 = m_V_reg_1344[1:0];

assign p_Result_1_fu_796_p2 = ((and_ln819_1_fu_790_p2 == 4'd0) ? 1'b1 : 1'b0);

assign p_Result_2_fu_860_p2 = ((and_ln819_2_fu_854_p2 == 4'd0) ? 1'b1 : 1'b0);

assign p_Result_3_fu_924_p2 = ((and_ln819_3_fu_918_p2 == 4'd0) ? 1'b1 : 1'b0);

assign p_Result_4_fu_988_p2 = ((and_ln819_4_fu_982_p2 == 4'd0) ? 1'b1 : 1'b0);

assign p_Result_5_fu_1052_p2 = ((and_ln819_5_fu_1046_p2 == 4'd0) ? 1'b1 : 1'b0);

assign p_Result_6_fu_1116_p2 = ((and_ln819_6_fu_1110_p2 == 4'd0) ? 1'b1 : 1'b0);

assign p_Result_7_fu_1180_p2 = ((and_ln819_7_fu_1174_p2 == 4'd0) ? 1'b1 : 1'b0);

assign p_Result_s_fu_732_p2 = ((and_ln819_fu_726_p2 == 4'd0) ? 1'b1 : 1'b0);

assign shl_ln819_1_fu_784_p2 = 4'd1 << zext_ln819_1_fu_780_p1;

assign shl_ln819_2_fu_848_p2 = 4'd1 << zext_ln819_2_fu_844_p1;

assign shl_ln819_3_fu_912_p2 = 4'd1 << zext_ln819_3_fu_908_p1;

assign shl_ln819_4_fu_976_p2 = 4'd1 << zext_ln819_4_fu_972_p1;

assign shl_ln819_5_fu_1040_p2 = 4'd1 << zext_ln819_5_fu_1036_p1;

assign shl_ln819_6_fu_1104_p2 = 4'd1 << zext_ln819_6_fu_1100_p1;

assign shl_ln819_7_fu_1168_p2 = 4'd1 << zext_ln819_7_fu_1164_p1;

assign shl_ln819_fu_720_p2 = 4'd1 << zext_ln819_fu_716_p1;

assign tmp_last_V_1_fu_762_p2 = ((tocapture_1 == 8'd1) ? 1'b1 : 1'b0);

assign tmp_last_V_2_fu_826_p2 = ((tocapture_2 == 8'd1) ? 1'b1 : 1'b0);

assign tmp_last_V_3_fu_890_p2 = ((tocapture_3 == 8'd1) ? 1'b1 : 1'b0);

assign tmp_last_V_4_fu_954_p2 = ((tocapture_4 == 8'd1) ? 1'b1 : 1'b0);

assign tmp_last_V_5_fu_1018_p2 = ((tocapture_5 == 8'd1) ? 1'b1 : 1'b0);

assign tmp_last_V_6_fu_1082_p2 = ((tocapture_6 == 8'd1) ? 1'b1 : 1'b0);

assign tmp_last_V_7_fu_1146_p2 = ((tocapture_7 == 8'd1) ? 1'b1 : 1'b0);

assign tmp_last_V_fu_698_p2 = ((tocapture_0 == 8'd1) ? 1'b1 : 1'b0);

assign tmp_nbreadreq_fu_326_p7 = instream_TVALID;

assign trigger_V_fu_670_p4 = {{instream_TUSER[12:9]}};

assign x_0_fu_632_p1 = iniq_TDATA[31:0];

assign zext_ln819_1_fu_780_p1 = lane_V_1_fu_744_p1;

assign zext_ln819_2_fu_844_p1 = lane_V_2_fu_808_p1;

assign zext_ln819_3_fu_908_p1 = lane_V_3_fu_872_p1;

assign zext_ln819_4_fu_972_p1 = lane_V_4_fu_936_p1;

assign zext_ln819_5_fu_1036_p1 = lane_V_5_fu_1000_p1;

assign zext_ln819_6_fu_1100_p1 = lane_V_6_fu_1064_p1;

assign zext_ln819_7_fu_1164_p1 = lane_V_7_fu_1128_p1;

assign zext_ln819_fu_716_p1 = lane_V_fu_680_p1;


// synthesis translate_off
`include "postage_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //postage

