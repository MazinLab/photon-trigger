// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="postage_maxi_postage_maxi,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=3.906000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.851380,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1407,HLS_SYN_LUT=3082,HLS_VERSION=2022_1}" *)

module postage_maxi (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        postage_TDATA,
        postage_TVALID,
        postage_TREADY,
        postage_TKEEP,
        postage_TSTRB,
        postage_TUSER,
        postage_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 20'd1;
parameter    ap_ST_fsm_state2 = 20'd2;
parameter    ap_ST_fsm_state3 = 20'd4;
parameter    ap_ST_fsm_state4 = 20'd8;
parameter    ap_ST_fsm_state5 = 20'd16;
parameter    ap_ST_fsm_state6 = 20'd32;
parameter    ap_ST_fsm_state7 = 20'd64;
parameter    ap_ST_fsm_state8 = 20'd128;
parameter    ap_ST_fsm_state9 = 20'd256;
parameter    ap_ST_fsm_state10 = 20'd512;
parameter    ap_ST_fsm_state11 = 20'd1024;
parameter    ap_ST_fsm_state12 = 20'd2048;
parameter    ap_ST_fsm_state13 = 20'd4096;
parameter    ap_ST_fsm_state14 = 20'd8192;
parameter    ap_ST_fsm_state15 = 20'd16384;
parameter    ap_ST_fsm_state16 = 20'd32768;
parameter    ap_ST_fsm_state17 = 20'd65536;
parameter    ap_ST_fsm_state18 = 20'd131072;
parameter    ap_ST_fsm_state19 = 20'd262144;
parameter    ap_ST_fsm_state20 = 20'd524288;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 128;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (128 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input  [31:0] postage_TDATA;
input   postage_TVALID;
output   postage_TREADY;
input  [3:0] postage_TKEEP;
input  [3:0] postage_TSTRB;
input  [2:0] postage_TUSER;
input  [0:0] postage_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [19:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] iq;
reg    event_count_ap_vld;
wire   [15:0] max_events;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state10;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state17;
reg    postage_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln341_fu_283_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
reg   [31:0] reg_275;
reg   [31:0] reg_279;
reg   [15:0] max_events_read_reg_422;
reg   [63:0] iq_read_reg_427;
reg   [0:0] icmp_ln341_reg_437;
reg   [2:0] tmp_user_V_reg_441;
reg   [0:0] tmp_last_V_4_reg_446;
reg   [0:0] tmp_last_V_reg_451;
reg   [31:0] tmp_data_V_5_reg_456;
reg   [0:0] tmp_last_V_1_reg_461;
reg   [0:0] tmp_last_V_2_reg_466;
wire   [4:0] trunc_ln372_fu_335_p1;
reg   [59:0] trunc_ln_reg_479;
wire   [0:0] desync_fu_400_p2;
reg   [0:0] desync_reg_485;
wire   [15:0] p_count_2_fu_416_p2;
wire    ap_CS_fsm_state18;
reg   [4:0] buf_V_address0;
reg    buf_V_ce0;
reg    buf_V_we0;
reg   [127:0] buf_V_d0;
wire   [127:0] buf_V_q0;
wire    grp_postage_maxi_Pipeline_burst_fu_245_ap_start;
wire    grp_postage_maxi_Pipeline_burst_fu_245_ap_done;
wire    grp_postage_maxi_Pipeline_burst_fu_245_ap_idle;
wire    grp_postage_maxi_Pipeline_burst_fu_245_ap_ready;
wire    grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_AWVALID;
wire   [63:0] grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_AWADDR;
wire   [0:0] grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_AWID;
wire   [31:0] grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_AWLEN;
wire   [2:0] grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_AWSIZE;
wire   [1:0] grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_AWBURST;
wire   [1:0] grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_AWLOCK;
wire   [3:0] grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_AWCACHE;
wire   [2:0] grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_AWPROT;
wire   [3:0] grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_AWQOS;
wire   [3:0] grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_AWREGION;
wire   [0:0] grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_AWUSER;
wire    grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_WVALID;
wire   [127:0] grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_WDATA;
wire   [15:0] grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_WSTRB;
wire    grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_WLAST;
wire   [0:0] grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_WID;
wire   [0:0] grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_WUSER;
wire    grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_ARVALID;
wire   [63:0] grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_ARADDR;
wire   [0:0] grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_ARID;
wire   [31:0] grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_ARLEN;
wire   [2:0] grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_ARSIZE;
wire   [1:0] grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_ARBURST;
wire   [1:0] grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_ARLOCK;
wire   [3:0] grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_ARCACHE;
wire   [2:0] grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_ARPROT;
wire   [3:0] grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_ARQOS;
wire   [3:0] grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_ARREGION;
wire   [0:0] grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_ARUSER;
wire    grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_RREADY;
wire    grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_BREADY;
wire   [4:0] grp_postage_maxi_Pipeline_burst_fu_245_buf_V_address0;
wire    grp_postage_maxi_Pipeline_burst_fu_245_buf_V_ce0;
wire    grp_postage_maxi_Pipeline_VITIS_LOOP_402_1_fu_253_ap_start;
wire    grp_postage_maxi_Pipeline_VITIS_LOOP_402_1_fu_253_ap_done;
wire    grp_postage_maxi_Pipeline_VITIS_LOOP_402_1_fu_253_ap_idle;
wire    grp_postage_maxi_Pipeline_VITIS_LOOP_402_1_fu_253_ap_ready;
wire    grp_postage_maxi_Pipeline_VITIS_LOOP_402_1_fu_253_postage_TREADY;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg   [63:0] gmem_AWADDR;
reg   [31:0] gmem_AWLEN;
reg    gmem_WVALID;
wire    gmem_WREADY;
wire    gmem_ARREADY;
wire    gmem_RVALID;
wire   [127:0] gmem_RDATA;
wire   [8:0] gmem_RFIFONUM;
wire    gmem_BVALID;
reg    gmem_BREADY;
reg   [15:0] p_count_reg_209;
reg   [15:0] ap_phi_mux_p_count_1_phi_fu_236_p4;
wire    ap_CS_fsm_state20;
wire   [0:0] tmp_nbreadreq_fu_173_p7;
reg   [4:0] i1_reg_221;
wire   [0:0] icmp_ln370_fu_339_p2;
reg   [15:0] p_count_1_reg_232;
reg    grp_postage_maxi_Pipeline_burst_fu_245_ap_start_reg;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
reg    grp_postage_maxi_Pipeline_VITIS_LOOP_402_1_fu_253_ap_start_reg;
wire    ap_CS_fsm_state19;
wire   [63:0] zext_ln370_fu_312_p1;
wire  signed [63:0] sext_ln397_fu_406_p1;
reg    ap_block_state2;
wire   [127:0] p_Result_s_fu_295_p5;
wire   [127:0] p_Result_1_fu_317_p5;
wire   [31:0] zext_ln388_fu_292_p1;
wire   [5:0] i1_cast_fu_308_p1;
wire   [5:0] i_fu_329_p2;
wire   [12:0] trunc_ln397_fu_349_p1;
wire   [21:0] shl_ln_fu_353_p3;
wire   [63:0] zext_ln397_fu_361_p1;
wire   [63:0] add_ln397_fu_365_p2;
wire   [0:0] xor_ln947_fu_380_p2;
wire   [0:0] or_ln394_1_fu_390_p2;
wire   [0:0] or_ln394_2_fu_395_p2;
wire   [0:0] or_ln394_fu_386_p2;
reg   [19:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
reg    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
reg    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    regslice_both_postage_V_data_V_U_apdone_blk;
wire   [31:0] postage_TDATA_int_regslice;
wire    postage_TVALID_int_regslice;
reg    postage_TREADY_int_regslice;
wire    regslice_both_postage_V_data_V_U_ack_in;
wire    regslice_both_postage_V_keep_V_U_apdone_blk;
wire   [3:0] postage_TKEEP_int_regslice;
wire    regslice_both_postage_V_keep_V_U_vld_out;
wire    regslice_both_postage_V_keep_V_U_ack_in;
wire    regslice_both_postage_V_strb_V_U_apdone_blk;
wire   [3:0] postage_TSTRB_int_regslice;
wire    regslice_both_postage_V_strb_V_U_vld_out;
wire    regslice_both_postage_V_strb_V_U_ack_in;
wire    regslice_both_postage_V_user_V_U_apdone_blk;
wire   [2:0] postage_TUSER_int_regslice;
wire    regslice_both_postage_V_user_V_U_vld_out;
wire    regslice_both_postage_V_user_V_U_ack_in;
wire    regslice_both_postage_V_last_V_U_apdone_blk;
wire   [0:0] postage_TLAST_int_regslice;
wire    regslice_both_postage_V_last_V_U_vld_out;
wire    regslice_both_postage_V_last_V_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 20'd1;
#0 grp_postage_maxi_Pipeline_burst_fu_245_ap_start_reg = 1'b0;
#0 grp_postage_maxi_Pipeline_VITIS_LOOP_402_1_fu_253_ap_start_reg = 1'b0;
end

postage_maxi_buf_V_RAM_AUTO_1R1W #(
    .DataWidth( 128 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
buf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buf_V_address0),
    .ce0(buf_V_ce0),
    .we0(buf_V_we0),
    .d0(buf_V_d0),
    .q0(buf_V_q0)
);

postage_maxi_postage_maxi_Pipeline_burst grp_postage_maxi_Pipeline_burst_fu_245(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_postage_maxi_Pipeline_burst_fu_245_ap_start),
    .ap_done(grp_postage_maxi_Pipeline_burst_fu_245_ap_done),
    .ap_idle(grp_postage_maxi_Pipeline_burst_fu_245_ap_idle),
    .ap_ready(grp_postage_maxi_Pipeline_burst_fu_245_ap_ready),
    .m_axi_gmem_AWVALID(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_AWVALID),
    .m_axi_gmem_AWREADY(gmem_AWREADY),
    .m_axi_gmem_AWADDR(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_AWADDR),
    .m_axi_gmem_AWID(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_AWID),
    .m_axi_gmem_AWLEN(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_AWLEN),
    .m_axi_gmem_AWSIZE(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_AWSIZE),
    .m_axi_gmem_AWBURST(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_AWBURST),
    .m_axi_gmem_AWLOCK(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_AWLOCK),
    .m_axi_gmem_AWCACHE(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_AWCACHE),
    .m_axi_gmem_AWPROT(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_AWPROT),
    .m_axi_gmem_AWQOS(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_AWQOS),
    .m_axi_gmem_AWREGION(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_AWREGION),
    .m_axi_gmem_AWUSER(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_AWUSER),
    .m_axi_gmem_WVALID(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_WVALID),
    .m_axi_gmem_WREADY(gmem_WREADY),
    .m_axi_gmem_WDATA(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_WDATA),
    .m_axi_gmem_WSTRB(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_WSTRB),
    .m_axi_gmem_WLAST(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_WLAST),
    .m_axi_gmem_WID(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_WID),
    .m_axi_gmem_WUSER(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_WUSER),
    .m_axi_gmem_ARVALID(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_ARVALID),
    .m_axi_gmem_ARREADY(1'b0),
    .m_axi_gmem_ARADDR(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_ARADDR),
    .m_axi_gmem_ARID(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_ARID),
    .m_axi_gmem_ARLEN(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_ARLEN),
    .m_axi_gmem_ARSIZE(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_ARSIZE),
    .m_axi_gmem_ARBURST(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_ARBURST),
    .m_axi_gmem_ARLOCK(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_ARLOCK),
    .m_axi_gmem_ARCACHE(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_ARCACHE),
    .m_axi_gmem_ARPROT(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_ARPROT),
    .m_axi_gmem_ARQOS(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_ARQOS),
    .m_axi_gmem_ARREGION(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_ARREGION),
    .m_axi_gmem_ARUSER(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_ARUSER),
    .m_axi_gmem_RVALID(1'b0),
    .m_axi_gmem_RREADY(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_RREADY),
    .m_axi_gmem_RDATA(128'd0),
    .m_axi_gmem_RLAST(1'b0),
    .m_axi_gmem_RID(1'd0),
    .m_axi_gmem_RFIFONUM(9'd0),
    .m_axi_gmem_RUSER(1'd0),
    .m_axi_gmem_RRESP(2'd0),
    .m_axi_gmem_BVALID(gmem_BVALID),
    .m_axi_gmem_BREADY(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_BREADY),
    .m_axi_gmem_BRESP(2'd0),
    .m_axi_gmem_BID(1'd0),
    .m_axi_gmem_BUSER(1'd0),
    .sext_ln397(trunc_ln_reg_479),
    .buf_V_address0(grp_postage_maxi_Pipeline_burst_fu_245_buf_V_address0),
    .buf_V_ce0(grp_postage_maxi_Pipeline_burst_fu_245_buf_V_ce0),
    .buf_V_q0(buf_V_q0)
);

postage_maxi_postage_maxi_Pipeline_VITIS_LOOP_402_1 grp_postage_maxi_Pipeline_VITIS_LOOP_402_1_fu_253(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_postage_maxi_Pipeline_VITIS_LOOP_402_1_fu_253_ap_start),
    .ap_done(grp_postage_maxi_Pipeline_VITIS_LOOP_402_1_fu_253_ap_done),
    .ap_idle(grp_postage_maxi_Pipeline_VITIS_LOOP_402_1_fu_253_ap_idle),
    .ap_ready(grp_postage_maxi_Pipeline_VITIS_LOOP_402_1_fu_253_ap_ready),
    .postage_TVALID(postage_TVALID_int_regslice),
    .postage_TDATA(postage_TDATA_int_regslice),
    .postage_TREADY(grp_postage_maxi_Pipeline_VITIS_LOOP_402_1_fu_253_postage_TREADY),
    .postage_TKEEP(postage_TKEEP_int_regslice),
    .postage_TSTRB(postage_TSTRB_int_regslice),
    .postage_TUSER(postage_TUSER_int_regslice),
    .postage_TLAST(postage_TLAST_int_regslice)
);

postage_maxi_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .iq(iq),
    .event_count(ap_phi_mux_p_count_1_phi_fu_236_p4),
    .event_count_ap_vld(event_count_ap_vld),
    .max_events(max_events),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

postage_maxi_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 256 ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ),
    .USER_DW( 128 ),
    .USER_AW( 64 ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARLEN(32'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(gmem_RDATA),
    .I_RFIFONUM(gmem_RFIFONUM),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_AWADDR),
    .I_AWLEN(gmem_AWLEN),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_WDATA),
    .I_WSTRB(grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_WSTRB),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY)
);

postage_maxi_regslice_both #(
    .DataWidth( 32 ))
regslice_both_postage_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(postage_TDATA),
    .vld_in(postage_TVALID),
    .ack_in(regslice_both_postage_V_data_V_U_ack_in),
    .data_out(postage_TDATA_int_regslice),
    .vld_out(postage_TVALID_int_regslice),
    .ack_out(postage_TREADY_int_regslice),
    .apdone_blk(regslice_both_postage_V_data_V_U_apdone_blk)
);

postage_maxi_regslice_both #(
    .DataWidth( 4 ))
regslice_both_postage_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(postage_TKEEP),
    .vld_in(postage_TVALID),
    .ack_in(regslice_both_postage_V_keep_V_U_ack_in),
    .data_out(postage_TKEEP_int_regslice),
    .vld_out(regslice_both_postage_V_keep_V_U_vld_out),
    .ack_out(postage_TREADY_int_regslice),
    .apdone_blk(regslice_both_postage_V_keep_V_U_apdone_blk)
);

postage_maxi_regslice_both #(
    .DataWidth( 4 ))
regslice_both_postage_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(postage_TSTRB),
    .vld_in(postage_TVALID),
    .ack_in(regslice_both_postage_V_strb_V_U_ack_in),
    .data_out(postage_TSTRB_int_regslice),
    .vld_out(regslice_both_postage_V_strb_V_U_vld_out),
    .ack_out(postage_TREADY_int_regslice),
    .apdone_blk(regslice_both_postage_V_strb_V_U_apdone_blk)
);

postage_maxi_regslice_both #(
    .DataWidth( 3 ))
regslice_both_postage_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(postage_TUSER),
    .vld_in(postage_TVALID),
    .ack_in(regslice_both_postage_V_user_V_U_ack_in),
    .data_out(postage_TUSER_int_regslice),
    .vld_out(regslice_both_postage_V_user_V_U_vld_out),
    .ack_out(postage_TREADY_int_regslice),
    .apdone_blk(regslice_both_postage_V_user_V_U_apdone_blk)
);

postage_maxi_regslice_both #(
    .DataWidth( 1 ))
regslice_both_postage_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(postage_TLAST),
    .vld_in(postage_TVALID),
    .ack_in(regslice_both_postage_V_last_V_U_ack_in),
    .data_out(postage_TLAST_int_regslice),
    .vld_out(regslice_both_postage_V_last_V_U_vld_out),
    .ack_out(postage_TREADY_int_regslice),
    .apdone_blk(regslice_both_postage_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_postage_maxi_Pipeline_VITIS_LOOP_402_1_fu_253_ap_start_reg <= 1'b0;
    end else begin
        if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17) & (desync_reg_485 == 1'd1))) begin
            grp_postage_maxi_Pipeline_VITIS_LOOP_402_1_fu_253_ap_start_reg <= 1'b1;
        end else if ((grp_postage_maxi_Pipeline_VITIS_LOOP_402_1_fu_253_ap_ready == 1'b1)) begin
            grp_postage_maxi_Pipeline_VITIS_LOOP_402_1_fu_253_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_postage_maxi_Pipeline_burst_fu_245_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_postage_maxi_Pipeline_burst_fu_245_ap_start_reg <= 1'b1;
        end else if ((grp_postage_maxi_Pipeline_burst_fu_245_ap_ready == 1'b1)) begin
            grp_postage_maxi_Pipeline_burst_fu_245_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((postage_TVALID_int_regslice == 1'b1)) begin
        if (((icmp_ln370_fu_339_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
            i1_reg_221 <= trunc_ln372_fu_335_p1;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            i1_reg_221 <= 5'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (desync_reg_485 == 1'd1) & (icmp_ln341_reg_437 == 1'd1))) begin
        p_count_1_reg_232 <= p_count_reg_209;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        p_count_1_reg_232 <= p_count_2_fu_416_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_173_p7 == 1'd1) & (1'b1 == ap_CS_fsm_state20) & (icmp_ln341_reg_437 == 1'd1))) begin
        p_count_reg_209 <= ap_phi_mux_p_count_1_phi_fu_236_p4;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_count_reg_209 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        desync_reg_485 <= desync_fu_400_p2;
        trunc_ln_reg_479 <= {{add_ln397_fu_365_p2[63:4]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln341_reg_437 <= icmp_ln341_fu_283_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        iq_read_reg_427 <= iq;
        max_events_read_reg_422 <= max_events;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln341_fu_283_p2 == 1'd1)))) begin
        reg_275 <= postage_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_279 <= postage_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_data_V_5_reg_456 <= postage_TDATA_int_regslice;
        tmp_last_V_1_reg_461 <= postage_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_last_V_2_reg_466 <= postage_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_last_V_4_reg_446 <= postage_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_last_V_reg_451 <= postage_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln341_fu_283_p2 == 1'd1))) begin
        tmp_user_V_reg_441 <= postage_TUSER_int_regslice;
    end
end

always @ (*) begin
    if ((gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((grp_postage_maxi_Pipeline_burst_fu_245_ap_done == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

always @ (*) begin
    if ((gmem_BVALID == 1'b0)) begin
        ap_ST_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_fsm_state17_blk = 1'b0;
    end
end

assign ap_ST_fsm_state18_blk = 1'b0;

always @ (*) begin
    if ((grp_postage_maxi_Pipeline_VITIS_LOOP_402_1_fu_253_ap_done == 1'b0)) begin
        ap_ST_fsm_state19_blk = 1'b1;
    end else begin
        ap_ST_fsm_state19_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

always @ (*) begin
    if (((postage_TVALID_int_regslice == 1'b0) & (icmp_ln341_fu_283_p2 == 1'd1))) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((postage_TVALID_int_regslice == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((postage_TVALID_int_regslice == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((postage_TVALID_int_regslice == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((postage_TVALID_int_regslice == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((postage_TVALID_int_regslice == 1'b0)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if ((postage_TVALID_int_regslice == 1'b0)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

always @ (*) begin
    if ((postage_TVALID_int_regslice == 1'b0)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) & ((tmp_nbreadreq_fu_173_p7 == 1'd0) | (icmp_ln341_reg_437 == 1'd0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) & (desync_reg_485 == 1'd1) & (icmp_ln341_reg_437 == 1'd1))) begin
        ap_phi_mux_p_count_1_phi_fu_236_p4 = p_count_reg_209;
    end else begin
        ap_phi_mux_p_count_1_phi_fu_236_p4 = p_count_1_reg_232;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) & ((tmp_nbreadreq_fu_173_p7 == 1'd0) | (icmp_ln341_reg_437 == 1'd0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buf_V_address0 = zext_ln370_fu_312_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_V_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        buf_V_address0 = grp_postage_maxi_Pipeline_burst_fu_245_buf_V_address0;
    end else begin
        buf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((postage_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((postage_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
        buf_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        buf_V_ce0 = grp_postage_maxi_Pipeline_burst_fu_245_buf_V_ce0;
    end else begin
        buf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buf_V_d0 = p_Result_1_fu_317_p5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_V_d0 = p_Result_s_fu_295_p5;
    end else begin
        buf_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((postage_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((postage_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
        buf_V_we0 = 1'b1;
    end else begin
        buf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln341_reg_437 == 1'd1))) begin
        event_count_ap_vld = 1'b1;
    end else begin
        event_count_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        gmem_AWADDR = sext_ln397_fu_406_p1;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        gmem_AWADDR = grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_AWADDR;
    end else begin
        gmem_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        gmem_AWLEN = 32'd32;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        gmem_AWLEN = grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_AWLEN;
    end else begin
        gmem_AWLEN = 'bx;
    end
end

always @ (*) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        gmem_AWVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        gmem_AWVALID = grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_AWVALID;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        gmem_BREADY = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        gmem_BREADY = grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_BREADY;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        gmem_WVALID = grp_postage_maxi_Pipeline_burst_fu_245_m_axi_gmem_WVALID;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln341_fu_283_p2 == 1'd1)))) begin
        postage_TDATA_blk_n = postage_TVALID_int_regslice;
    end else begin
        postage_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((postage_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((postage_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((postage_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((postage_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((postage_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((postage_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((postage_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | (~((postage_TVALID_int_regslice == 1'b0) & (icmp_ln341_fu_283_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln341_fu_283_p2 == 1'd1)))) begin
        postage_TREADY_int_regslice = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        postage_TREADY_int_regslice = grp_postage_maxi_Pipeline_VITIS_LOOP_402_1_fu_253_postage_TREADY;
    end else begin
        postage_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((postage_TVALID_int_regslice == 1'b0) & (icmp_ln341_fu_283_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln341_fu_283_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else if ((~((postage_TVALID_int_regslice == 1'b0) & (icmp_ln341_fu_283_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln341_fu_283_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((postage_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((postage_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((postage_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((postage_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((postage_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((postage_TVALID_int_regslice == 1'b1) & (icmp_ln370_fu_339_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if (((postage_TVALID_int_regslice == 1'b1) & (icmp_ln370_fu_339_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((postage_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((grp_postage_maxi_Pipeline_burst_fu_245_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17) & (desync_reg_485 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17) & (desync_reg_485 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state19 : begin
            if (((grp_postage_maxi_Pipeline_VITIS_LOOP_402_1_fu_253_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & ((tmp_nbreadreq_fu_173_p7 == 1'd0) | (icmp_ln341_reg_437 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln397_fu_365_p2 = (zext_ln397_fu_361_p1 + iq_read_reg_427);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state2 = ((postage_TVALID_int_regslice == 1'b0) & (icmp_ln341_fu_283_p2 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign desync_fu_400_p2 = (or_ln394_fu_386_p2 | or_ln394_2_fu_395_p2);

assign grp_postage_maxi_Pipeline_VITIS_LOOP_402_1_fu_253_ap_start = grp_postage_maxi_Pipeline_VITIS_LOOP_402_1_fu_253_ap_start_reg;

assign grp_postage_maxi_Pipeline_burst_fu_245_ap_start = grp_postage_maxi_Pipeline_burst_fu_245_ap_start_reg;

assign i1_cast_fu_308_p1 = i1_reg_221;

assign i_fu_329_p2 = (i1_cast_fu_308_p1 + 6'd1);

assign icmp_ln341_fu_283_p2 = ((p_count_reg_209 < max_events_read_reg_422) ? 1'b1 : 1'b0);

assign icmp_ln370_fu_339_p2 = ((i_fu_329_p2 == 6'd32) ? 1'b1 : 1'b0);

assign or_ln394_1_fu_390_p2 = (xor_ln947_fu_380_p2 | tmp_last_V_2_reg_466);

assign or_ln394_2_fu_395_p2 = (tmp_last_V_1_reg_461 | or_ln394_1_fu_390_p2);

assign or_ln394_fu_386_p2 = (tmp_last_V_reg_451 | tmp_last_V_4_reg_446);

assign p_Result_1_fu_317_p5 = {{{{postage_TDATA_int_regslice}, {tmp_data_V_5_reg_456}}, {reg_279}}, {reg_275}};

assign p_Result_s_fu_295_p5 = {{{{postage_TDATA_int_regslice}, {reg_279}}, {reg_275}}, {zext_ln388_fu_292_p1}};

assign p_count_2_fu_416_p2 = (p_count_reg_209 + 16'd1);

assign postage_TREADY = regslice_both_postage_V_data_V_U_ack_in;

assign sext_ln397_fu_406_p1 = $signed(trunc_ln_reg_479);

assign shl_ln_fu_353_p3 = {{trunc_ln397_fu_349_p1}, {9'd0}};

assign tmp_nbreadreq_fu_173_p7 = postage_TVALID_int_regslice;

assign trunc_ln372_fu_335_p1 = i_fu_329_p2[4:0];

assign trunc_ln397_fu_349_p1 = p_count_reg_209[12:0];

assign xor_ln947_fu_380_p2 = (postage_TLAST_int_regslice ^ 1'd1);

assign zext_ln370_fu_312_p1 = i1_reg_221;

assign zext_ln388_fu_292_p1 = tmp_user_V_reg_441;

assign zext_ln397_fu_361_p1 = shl_ln_fu_353_p3;


reg find_kernel_block = 0;
// synthesis translate_off
`include "postage_maxi_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //postage_maxi

