-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity postage_maxi is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 128;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    postage_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    postage_TVALID : IN STD_LOGIC;
    postage_TREADY : OUT STD_LOGIC;
    postage_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    postage_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    postage_TUSER : IN STD_LOGIC_VECTOR (2 downto 0);
    postage_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of postage_maxi is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "postage_maxi_postage_maxi,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=3.906000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.851380,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1405,HLS_SYN_LUT=3085,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal iq : STD_LOGIC_VECTOR (63 downto 0);
    signal event_count_ap_vld : STD_LOGIC;
    signal max_events : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal postage_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_265 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_events_read_reg_418 : STD_LOGIC_VECTOR (15 downto 0);
    signal iq_read_reg_423 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln345_1_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln345_1_reg_433 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_reg_437 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_last_V_4_reg_442 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_447 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_V_5_reg_452 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_last_V_1_reg_457 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_2_reg_462 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln376_fu_326_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln_reg_475 : STD_LOGIC_VECTOR (59 downto 0);
    signal desync_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal desync_reg_481 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_count_1_fu_407_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_V_ce0 : STD_LOGIC;
    signal buf_V_we0 : STD_LOGIC;
    signal buf_V_d0 : STD_LOGIC_VECTOR (127 downto 0);
    signal buf_V_q0 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_postage_maxi_Pipeline_burst_fu_231_ap_start : STD_LOGIC;
    signal grp_postage_maxi_Pipeline_burst_fu_231_ap_done : STD_LOGIC;
    signal grp_postage_maxi_Pipeline_burst_fu_231_ap_idle : STD_LOGIC;
    signal grp_postage_maxi_Pipeline_burst_fu_231_ap_ready : STD_LOGIC;
    signal grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_postage_maxi_Pipeline_burst_fu_231_buf_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_postage_maxi_Pipeline_burst_fu_231_buf_V_ce0 : STD_LOGIC;
    signal grp_postage_maxi_Pipeline_VITIS_LOOP_406_1_fu_239_ap_start : STD_LOGIC;
    signal grp_postage_maxi_Pipeline_VITIS_LOOP_406_1_fu_239_ap_done : STD_LOGIC;
    signal grp_postage_maxi_Pipeline_VITIS_LOOP_406_1_fu_239_ap_idle : STD_LOGIC;
    signal grp_postage_maxi_Pipeline_VITIS_LOOP_406_1_fu_239_ap_ready : STD_LOGIC;
    signal grp_postage_maxi_Pipeline_VITIS_LOOP_406_1_fu_239_postage_TREADY : STD_LOGIC;
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal ap_phi_mux_p_count_phi_fu_222_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_count7_reg_195 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_predicate_op111_call_state18 : BOOLEAN;
    signal ap_block_state18_on_subcall_done : BOOLEAN;
    signal icmp_ln345_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_reg_207 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln374_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_count_reg_218 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_postage_maxi_Pipeline_burst_fu_231_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_postage_maxi_Pipeline_VITIS_LOOP_406_1_fu_239_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln374_fu_303_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln401_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_286_p5 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Result_1_fu_308_p5 : STD_LOGIC_VECTOR (127 downto 0);
    signal empty_fu_269_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln388_fu_283_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_cast_fu_299_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_fu_320_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln401_fu_340_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln_fu_344_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln401_fu_352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln401_fu_356_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln947_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln398_1_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln398_2_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln398_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal regslice_both_postage_V_data_V_U_apdone_blk : STD_LOGIC;
    signal postage_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal postage_TVALID_int_regslice : STD_LOGIC;
    signal postage_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_postage_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_postage_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal postage_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_postage_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_postage_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_postage_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal postage_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_postage_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_postage_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_postage_V_user_V_U_apdone_blk : STD_LOGIC;
    signal postage_TUSER_int_regslice : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_postage_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_postage_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_postage_V_last_V_U_apdone_blk : STD_LOGIC;
    signal postage_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_postage_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_postage_V_last_V_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component postage_maxi_postage_maxi_Pipeline_burst IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln401 : IN STD_LOGIC_VECTOR (59 downto 0);
        buf_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        buf_V_ce0 : OUT STD_LOGIC;
        buf_V_q0 : IN STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component postage_maxi_postage_maxi_Pipeline_VITIS_LOOP_406_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        postage_TVALID : IN STD_LOGIC;
        postage_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        postage_TREADY : OUT STD_LOGIC;
        postage_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        postage_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        postage_TUSER : IN STD_LOGIC_VECTOR (2 downto 0);
        postage_TLAST : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component postage_maxi_buf_V_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (127 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component postage_maxi_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        iq : OUT STD_LOGIC_VECTOR (63 downto 0);
        event_count : IN STD_LOGIC_VECTOR (15 downto 0);
        event_count_ap_vld : IN STD_LOGIC;
        max_events : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component postage_maxi_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component postage_maxi_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    buf_V_U : component postage_maxi_buf_V_RAM_AUTO_1R1W
    generic map (
        DataWidth => 128,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buf_V_address0,
        ce0 => buf_V_ce0,
        we0 => buf_V_we0,
        d0 => buf_V_d0,
        q0 => buf_V_q0);

    grp_postage_maxi_Pipeline_burst_fu_231 : component postage_maxi_postage_maxi_Pipeline_burst
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_postage_maxi_Pipeline_burst_fu_231_ap_start,
        ap_done => grp_postage_maxi_Pipeline_burst_fu_231_ap_done,
        ap_idle => grp_postage_maxi_Pipeline_burst_fu_231_ap_idle,
        ap_ready => grp_postage_maxi_Pipeline_burst_fu_231_ap_ready,
        m_axi_gmem_AWVALID => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => gmem_AWREADY,
        m_axi_gmem_AWADDR => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => gmem_WREADY,
        m_axi_gmem_WDATA => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => ap_const_logic_0,
        m_axi_gmem_ARADDR => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => ap_const_logic_0,
        m_axi_gmem_RREADY => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => ap_const_lv128_lc_1,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => ap_const_lv9_0,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => gmem_BVALID,
        m_axi_gmem_BREADY => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        sext_ln401 => trunc_ln_reg_475,
        buf_V_address0 => grp_postage_maxi_Pipeline_burst_fu_231_buf_V_address0,
        buf_V_ce0 => grp_postage_maxi_Pipeline_burst_fu_231_buf_V_ce0,
        buf_V_q0 => buf_V_q0);

    grp_postage_maxi_Pipeline_VITIS_LOOP_406_1_fu_239 : component postage_maxi_postage_maxi_Pipeline_VITIS_LOOP_406_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_postage_maxi_Pipeline_VITIS_LOOP_406_1_fu_239_ap_start,
        ap_done => grp_postage_maxi_Pipeline_VITIS_LOOP_406_1_fu_239_ap_done,
        ap_idle => grp_postage_maxi_Pipeline_VITIS_LOOP_406_1_fu_239_ap_idle,
        ap_ready => grp_postage_maxi_Pipeline_VITIS_LOOP_406_1_fu_239_ap_ready,
        postage_TVALID => postage_TVALID_int_regslice,
        postage_TDATA => postage_TDATA_int_regslice,
        postage_TREADY => grp_postage_maxi_Pipeline_VITIS_LOOP_406_1_fu_239_postage_TREADY,
        postage_TKEEP => postage_TKEEP_int_regslice,
        postage_TSTRB => postage_TSTRB_int_regslice,
        postage_TUSER => postage_TUSER_int_regslice,
        postage_TLAST => postage_TLAST_int_regslice);

    control_s_axi_U : component postage_maxi_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        iq => iq,
        event_count => ap_phi_mux_p_count_phi_fu_222_p4,
        event_count_ap_vld => event_count_ap_vld,
        max_events => max_events,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem_m_axi_U : component postage_maxi_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 256,
        USER_RFIFONUM_WIDTH => 9,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        USER_DW => 128,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_AWADDR,
        I_AWLEN => gmem_AWLEN,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_WDATA,
        I_WSTRB => grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY);

    regslice_both_postage_V_data_V_U : component postage_maxi_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => postage_TDATA,
        vld_in => postage_TVALID,
        ack_in => regslice_both_postage_V_data_V_U_ack_in,
        data_out => postage_TDATA_int_regslice,
        vld_out => postage_TVALID_int_regslice,
        ack_out => postage_TREADY_int_regslice,
        apdone_blk => regslice_both_postage_V_data_V_U_apdone_blk);

    regslice_both_postage_V_keep_V_U : component postage_maxi_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => postage_TKEEP,
        vld_in => postage_TVALID,
        ack_in => regslice_both_postage_V_keep_V_U_ack_in,
        data_out => postage_TKEEP_int_regslice,
        vld_out => regslice_both_postage_V_keep_V_U_vld_out,
        ack_out => postage_TREADY_int_regslice,
        apdone_blk => regslice_both_postage_V_keep_V_U_apdone_blk);

    regslice_both_postage_V_strb_V_U : component postage_maxi_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => postage_TSTRB,
        vld_in => postage_TVALID,
        ack_in => regslice_both_postage_V_strb_V_U_ack_in,
        data_out => postage_TSTRB_int_regslice,
        vld_out => regslice_both_postage_V_strb_V_U_vld_out,
        ack_out => postage_TREADY_int_regslice,
        apdone_blk => regslice_both_postage_V_strb_V_U_apdone_blk);

    regslice_both_postage_V_user_V_U : component postage_maxi_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => postage_TUSER,
        vld_in => postage_TVALID,
        ack_in => regslice_both_postage_V_user_V_U_ack_in,
        data_out => postage_TUSER_int_regslice,
        vld_out => regslice_both_postage_V_user_V_U_vld_out,
        ack_out => postage_TREADY_int_regslice,
        apdone_blk => regslice_both_postage_V_user_V_U_apdone_blk);

    regslice_both_postage_V_last_V_U : component postage_maxi_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => postage_TLAST,
        vld_in => postage_TVALID,
        ack_in => regslice_both_postage_V_last_V_U_ack_in,
        data_out => postage_TLAST_int_regslice,
        vld_out => regslice_both_postage_V_last_V_U_vld_out,
        ack_out => postage_TREADY_int_regslice,
        apdone_blk => regslice_both_postage_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_postage_maxi_Pipeline_VITIS_LOOP_406_1_fu_239_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_postage_maxi_Pipeline_VITIS_LOOP_406_1_fu_239_ap_start_reg <= ap_const_logic_0;
            else
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17) and (desync_reg_481 = ap_const_lv1_1))) then 
                    grp_postage_maxi_Pipeline_VITIS_LOOP_406_1_fu_239_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_postage_maxi_Pipeline_VITIS_LOOP_406_1_fu_239_ap_ready = ap_const_logic_1)) then 
                    grp_postage_maxi_Pipeline_VITIS_LOOP_406_1_fu_239_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_postage_maxi_Pipeline_burst_fu_231_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_postage_maxi_Pipeline_burst_fu_231_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_postage_maxi_Pipeline_burst_fu_231_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_postage_maxi_Pipeline_burst_fu_231_ap_ready = ap_const_logic_1)) then 
                    grp_postage_maxi_Pipeline_burst_fu_231_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((postage_TVALID_int_regslice = ap_const_logic_1)) then
                if (((icmp_ln374_fu_330_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    i1_reg_207 <= trunc_ln376_fu_326_p1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    i1_reg_207 <= ap_const_lv5_1;
                end if;
            end if; 
        end if;
    end process;

    p_count7_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln345_1_fu_273_p2 = ap_const_lv1_0))) then 
                p_count7_reg_195 <= ap_const_lv16_0;
            elsif (((icmp_ln345_fu_413_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln345_1_reg_433 = ap_const_lv1_0))) then 
                p_count7_reg_195 <= ap_phi_mux_p_count_phi_fu_222_p4;
            end if; 
        end if;
    end process;

    p_count_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18) and (desync_reg_481 = ap_const_lv1_1) and (icmp_ln345_1_reg_433 = ap_const_lv1_0))) then 
                p_count_reg_218 <= p_count7_reg_195;
            elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17) and (desync_reg_481 = ap_const_lv1_0))) then 
                p_count_reg_218 <= p_count_1_fu_407_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                desync_reg_481 <= desync_fu_391_p2;
                trunc_ln_reg_475 <= add_ln401_fu_356_p2(63 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln345_1_reg_433 <= icmp_ln345_1_fu_273_p2;
                iq_read_reg_423 <= iq;
                max_events_read_reg_418 <= max_events;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_261 <= postage_TDATA_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_265 <= postage_TDATA_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_data_V_5_reg_452 <= postage_TDATA_int_regslice;
                tmp_last_V_1_reg_457 <= postage_TLAST_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_last_V_2_reg_462 <= postage_TLAST_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_last_V_4_reg_442 <= postage_TLAST_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_last_V_reg_447 <= postage_TLAST_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_user_V_reg_437 <= postage_TUSER_int_regslice;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state10, ap_CS_fsm_state17, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, icmp_ln345_1_fu_273_p2, icmp_ln345_1_reg_433, grp_postage_maxi_Pipeline_burst_fu_231_ap_done, gmem_AWREADY, gmem_BVALID, ap_CS_fsm_state18, ap_block_state18_on_subcall_done, icmp_ln345_fu_413_p2, icmp_ln374_fu_330_p2, ap_CS_fsm_state12, postage_TVALID_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln345_1_fu_273_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln345_1_fu_273_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((postage_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((postage_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((postage_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((postage_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((postage_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((postage_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((postage_TVALID_int_regslice = ap_const_logic_1) and (icmp_ln374_fu_330_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((postage_TVALID_int_regslice = ap_const_logic_1) and (icmp_ln374_fu_330_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((postage_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_postage_maxi_Pipeline_burst_fu_231_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18) and ((icmp_ln345_fu_413_p2 = ap_const_lv1_0) or (icmp_ln345_1_reg_433 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((icmp_ln345_fu_413_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln345_1_reg_433 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln401_fu_356_p2 <= std_logic_vector(unsigned(zext_ln401_fu_352_p1) + unsigned(iq_read_reg_423));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(gmem_AWREADY)
    begin
        if ((gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state12_blk_assign_proc : process(grp_postage_maxi_Pipeline_burst_fu_231_ap_done)
    begin
        if ((grp_postage_maxi_Pipeline_burst_fu_231_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;

    ap_ST_fsm_state17_blk_assign_proc : process(gmem_BVALID)
    begin
        if ((gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state17_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state17_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state18_blk_assign_proc : process(ap_block_state18_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state18_on_subcall_done)) then 
            ap_ST_fsm_state18_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state18_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(postage_TVALID_int_regslice)
    begin
        if ((postage_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(postage_TVALID_int_regslice)
    begin
        if ((postage_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(postage_TVALID_int_regslice)
    begin
        if ((postage_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(postage_TVALID_int_regslice)
    begin
        if ((postage_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(postage_TVALID_int_regslice)
    begin
        if ((postage_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state7_blk_assign_proc : process(postage_TVALID_int_regslice)
    begin
        if ((postage_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state8_blk_assign_proc : process(postage_TVALID_int_regslice)
    begin
        if ((postage_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state9_blk_assign_proc : process(postage_TVALID_int_regslice)
    begin
        if ((postage_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state18_on_subcall_done_assign_proc : process(grp_postage_maxi_Pipeline_VITIS_LOOP_406_1_fu_239_ap_done, ap_predicate_op111_call_state18)
    begin
                ap_block_state18_on_subcall_done <= ((ap_predicate_op111_call_state18 = ap_const_boolean_1) and (grp_postage_maxi_Pipeline_VITIS_LOOP_406_1_fu_239_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(icmp_ln345_1_reg_433, ap_CS_fsm_state18, ap_block_state18_on_subcall_done, icmp_ln345_fu_413_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18) and ((icmp_ln345_fu_413_p2 = ap_const_lv1_0) or (icmp_ln345_1_reg_433 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_count_phi_fu_222_p4_assign_proc : process(icmp_ln345_1_reg_433, desync_reg_481, p_count7_reg_195, ap_CS_fsm_state18, p_count_reg_218)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) and (desync_reg_481 = ap_const_lv1_1) and (icmp_ln345_1_reg_433 = ap_const_lv1_0))) then 
            ap_phi_mux_p_count_phi_fu_222_p4 <= p_count7_reg_195;
        else 
            ap_phi_mux_p_count_phi_fu_222_p4 <= p_count_reg_218;
        end if; 
    end process;


    ap_predicate_op111_call_state18_assign_proc : process(icmp_ln345_1_reg_433, desync_reg_481)
    begin
                ap_predicate_op111_call_state18 <= ((desync_reg_481 = ap_const_lv1_1) and (icmp_ln345_1_reg_433 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(icmp_ln345_1_reg_433, ap_CS_fsm_state18, ap_block_state18_on_subcall_done, icmp_ln345_fu_413_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18) and ((icmp_ln345_fu_413_p2 = ap_const_lv1_0) or (icmp_ln345_1_reg_433 = ap_const_lv1_1)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    buf_V_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, grp_postage_maxi_Pipeline_burst_fu_231_buf_V_address0, ap_CS_fsm_state12, zext_ln374_fu_303_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buf_V_address0 <= zext_ln374_fu_303_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buf_V_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            buf_V_address0 <= grp_postage_maxi_Pipeline_burst_fu_231_buf_V_address0;
        else 
            buf_V_address0 <= "XXXXX";
        end if; 
    end process;


    buf_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, grp_postage_maxi_Pipeline_burst_fu_231_buf_V_ce0, ap_CS_fsm_state12, postage_TVALID_int_regslice)
    begin
        if ((((postage_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((postage_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            buf_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            buf_V_ce0 <= grp_postage_maxi_Pipeline_burst_fu_231_buf_V_ce0;
        else 
            buf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_V_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, p_Result_s_fu_286_p5, p_Result_1_fu_308_p5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buf_V_d0 <= p_Result_1_fu_308_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buf_V_d0 <= p_Result_s_fu_286_p5;
        else 
            buf_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buf_V_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, postage_TVALID_int_regslice)
    begin
        if ((((postage_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((postage_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            buf_V_we0 <= ap_const_logic_1;
        else 
            buf_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    desync_fu_391_p2 <= (or_ln398_fu_377_p2 or or_ln398_2_fu_386_p2);
    empty_fu_269_p1 <= max_events(13 - 1 downto 0);

    event_count_ap_vld_assign_proc : process(icmp_ln345_1_reg_433, ap_CS_fsm_state18, ap_block_state18_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln345_1_reg_433 = ap_const_lv1_0))) then 
            event_count_ap_vld <= ap_const_logic_1;
        else 
            event_count_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWADDR_assign_proc : process(ap_CS_fsm_state10, grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_AWADDR, gmem_AWREADY, ap_CS_fsm_state11, ap_CS_fsm_state12, sext_ln401_fu_397_p1)
    begin
        if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_AWADDR <= sext_ln401_fu_397_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            gmem_AWADDR <= grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_AWADDR;
        else 
            gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_AWLEN_assign_proc : process(ap_CS_fsm_state10, grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_AWLEN, gmem_AWREADY, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_AWLEN <= ap_const_lv32_20;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            gmem_AWLEN <= grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_AWLEN;
        else 
            gmem_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state10, grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_AWVALID, gmem_AWREADY, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_AWVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            gmem_AWVALID <= grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_AWVALID;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state17, grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_BREADY, gmem_BVALID, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            gmem_BREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            gmem_BREADY <= grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_BREADY;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_WVALID, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            gmem_WVALID <= grp_postage_maxi_Pipeline_burst_fu_231_m_axi_gmem_WVALID;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;

    grp_postage_maxi_Pipeline_VITIS_LOOP_406_1_fu_239_ap_start <= grp_postage_maxi_Pipeline_VITIS_LOOP_406_1_fu_239_ap_start_reg;
    grp_postage_maxi_Pipeline_burst_fu_231_ap_start <= grp_postage_maxi_Pipeline_burst_fu_231_ap_start_reg;
    i1_cast_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_207),6));
    i_fu_320_p2 <= std_logic_vector(unsigned(i1_cast_fu_299_p1) + unsigned(ap_const_lv6_1));
    icmp_ln345_1_fu_273_p2 <= "1" when (empty_fu_269_p1 = ap_const_lv13_0) else "0";
    icmp_ln345_fu_413_p2 <= "1" when (unsigned(ap_phi_mux_p_count_phi_fu_222_p4) < unsigned(max_events_read_reg_418)) else "0";
    icmp_ln374_fu_330_p2 <= "1" when (i_fu_320_p2 = ap_const_lv6_20) else "0";
    or_ln398_1_fu_381_p2 <= (xor_ln947_fu_371_p2 or tmp_last_V_2_reg_462);
    or_ln398_2_fu_386_p2 <= (tmp_last_V_1_reg_457 or or_ln398_1_fu_381_p2);
    or_ln398_fu_377_p2 <= (tmp_last_V_reg_447 or tmp_last_V_4_reg_442);
    p_Result_1_fu_308_p5 <= (((postage_TDATA_int_regslice & tmp_data_V_5_reg_452) & reg_265) & reg_261);
    p_Result_s_fu_286_p5 <= (((postage_TDATA_int_regslice & reg_265) & reg_261) & zext_ln388_fu_283_p1);
    p_count_1_fu_407_p2 <= std_logic_vector(unsigned(p_count7_reg_195) + unsigned(ap_const_lv16_1));

    postage_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, postage_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            postage_TDATA_blk_n <= postage_TVALID_int_regslice;
        else 
            postage_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    postage_TREADY <= regslice_both_postage_V_data_V_U_ack_in;

    postage_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, grp_postage_maxi_Pipeline_VITIS_LOOP_406_1_fu_239_postage_TREADY, ap_CS_fsm_state18, ap_predicate_op111_call_state18, postage_TVALID_int_regslice)
    begin
        if ((((postage_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((postage_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((postage_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((postage_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((postage_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((postage_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((postage_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((postage_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            postage_TREADY_int_regslice <= ap_const_logic_1;
        elsif (((ap_predicate_op111_call_state18 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            postage_TREADY_int_regslice <= grp_postage_maxi_Pipeline_VITIS_LOOP_406_1_fu_239_postage_TREADY;
        else 
            postage_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln401_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_475),64));

    shl_ln_fu_344_p3 <= (trunc_ln401_fu_340_p1 & ap_const_lv9_0);
    trunc_ln376_fu_326_p1 <= i_fu_320_p2(5 - 1 downto 0);
    trunc_ln401_fu_340_p1 <= p_count7_reg_195(13 - 1 downto 0);
    xor_ln947_fu_371_p2 <= (postage_TLAST_int_regslice xor ap_const_lv1_1);
    zext_ln374_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_207),64));
    zext_ln388_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_user_V_reg_437),32));
    zext_ln401_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_344_p3),64));
end behav;
