-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity photon_trigger is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 13;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    streamin_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    streamin_TVALID : IN STD_LOGIC;
    streamin_TREADY : OUT STD_LOGIC;
    streamin_TLAST : IN STD_LOGIC;
    events_out_V_V_TDATA : OUT STD_LOGIC_VECTOR (111 downto 0);
    events_out_V_V_TVALID : OUT STD_LOGIC;
    events_out_V_V_TREADY : IN STD_LOGIC;
    timestamp_V : IN STD_LOGIC_VECTOR (63 downto 0);
    timestamp_V_ap_vld : IN STD_LOGIC;
    timestamp_V_ap_ack : OUT STD_LOGIC;
    lane_V : IN STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ctrl_clk : IN STD_LOGIC;
    ap_rst_n_ctrl_clk : IN STD_LOGIC );
end;


architecture behav of photon_trigger is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "photon_trigger,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.953000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.339000,HLS_SYN_LAT=10239,HLS_SYN_TPT=none,HLS_SYN_MEM=194,HLS_SYN_DSP=0,HLS_SYN_FF=9984,HLS_SYN_LUT=9470,HLS_VERSION=2019_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv8_1F : STD_LOGIC_VECTOR (7 downto 0) := "00011111";
    constant ap_const_lv8_20 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_const_lv8_2F : STD_LOGIC_VECTOR (7 downto 0) := "00101111";
    constant ap_const_lv8_30 : STD_LOGIC_VECTOR (7 downto 0) := "00110000";
    constant ap_const_lv8_3F : STD_LOGIC_VECTOR (7 downto 0) := "00111111";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_7C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111100";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_lv97_1000000000000000000000000 : STD_LOGIC_VECTOR (96 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv97_0 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv93_1FFFFFFF0000000000000000 : STD_LOGIC_VECTOR (92 downto 0) := "111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv93_0 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal triggercfg_0_threshold_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal triggercfg_0_threshold_V_ce0 : STD_LOGIC;
    signal triggercfg_0_threshold_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal triggercfg_1_threshold_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal triggercfg_1_threshold_V_ce0 : STD_LOGIC;
    signal triggercfg_1_threshold_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal triggercfg_2_threshold_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal triggercfg_2_threshold_V_ce0 : STD_LOGIC;
    signal triggercfg_2_threshold_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal triggercfg_3_threshold_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal triggercfg_3_threshold_V_ce0 : STD_LOGIC;
    signal triggercfg_3_threshold_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal holdoff_V : STD_LOGIC_VECTOR (9 downto 0);
    signal baseline_shrink_V : STD_LOGIC_VECTOR (8 downto 0);
    signal baseline_grow_V : STD_LOGIC_VECTOR (8 downto 0);
    signal dropped : STD_LOGIC_VECTOR (31 downto 0);
    signal next_out_V : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal streamin_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal events_out_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal empty_n_reg_612 : STD_LOGIC_VECTOR (0 downto 0);
    signal timestamp_V_blk_n : STD_LOGIC;
    signal ap_rst_n_ctrl_clk_inv : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_phi_mux_do_init_phi_fu_464_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln240_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln240_reg_1260 : STD_LOGIC_VECTOR (0 downto 0);
    signal time_V_reg_1266 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal basedata_0_phase_V_reg_1291 : STD_LOGIC_VECTOR (15 downto 0);
    signal basedata_1_phase_V_reg_1296 : STD_LOGIC_VECTOR (15 downto 0);
    signal basedata_2_phase_V_reg_1301 : STD_LOGIC_VECTOR (15 downto 0);
    signal basedata_3_phase_V_reg_1306 : STD_LOGIC_VECTOR (15 downto 0);
    signal basedata_0_baseline_reg_1311 : STD_LOGIC_VECTOR (15 downto 0);
    signal basedata_1_baseline_reg_1316 : STD_LOGIC_VECTOR (15 downto 0);
    signal basedata_2_baseline_reg_1321 : STD_LOGIC_VECTOR (15 downto 0);
    signal basedata_3_baseline_reg_1326 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_V_reg_1331 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal group_fu_993_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal group_reg_1337 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal event_time_V_fu_1055_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal event_time_V_reg_1382 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_phi_mux_empty_n_phi_fu_615_p8 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln851_fu_1065_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln851_reg_1387 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_update_baselines_fu_626_ap_start : STD_LOGIC;
    signal grp_update_baselines_fu_626_ap_done : STD_LOGIC;
    signal grp_update_baselines_fu_626_ap_idle : STD_LOGIC;
    signal grp_update_baselines_fu_626_ap_ready : STD_LOGIC;
    signal grp_update_baselines_fu_626_phases_0_V_read : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_update_baselines_fu_626_phases_1_V_read : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_update_baselines_fu_626_phases_2_V_read : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_update_baselines_fu_626_phases_3_V_read : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_update_baselines_fu_626_grow_n_V : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_update_baselines_fu_626_shrink_n_V : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_update_baselines_fu_626_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_update_baselines_fu_626_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_update_baselines_fu_626_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_update_baselines_fu_626_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_update_baselines_fu_626_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_update_baselines_fu_626_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_update_baselines_fu_626_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_update_baselines_fu_626_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_analyze_pulse_fu_704_ap_start : STD_LOGIC;
    signal grp_analyze_pulse_fu_704_ap_done : STD_LOGIC;
    signal grp_analyze_pulse_fu_704_ap_idle : STD_LOGIC;
    signal grp_analyze_pulse_fu_704_ap_ready : STD_LOGIC;
    signal grp_analyze_pulse_fu_704_trigdata_0_trigger_s : STD_LOGIC;
    signal grp_analyze_pulse_fu_704_trigdata_1_trigger_s : STD_LOGIC;
    signal grp_analyze_pulse_fu_704_trigdata_2_trigger_s : STD_LOGIC;
    signal grp_analyze_pulse_fu_704_trigdata_3_trigger_s : STD_LOGIC;
    signal grp_analyze_pulse_fu_704_pulsedata_V_0_din : STD_LOGIC_VECTOR (124 downto 0);
    signal grp_analyze_pulse_fu_704_pulsedata_V_0_write : STD_LOGIC;
    signal grp_analyze_pulse_fu_704_pulsedata_V_1_din : STD_LOGIC_VECTOR (124 downto 0);
    signal grp_analyze_pulse_fu_704_pulsedata_V_1_write : STD_LOGIC;
    signal grp_analyze_pulse_fu_704_pulsedata_V_2_din : STD_LOGIC_VECTOR (124 downto 0);
    signal grp_analyze_pulse_fu_704_pulsedata_V_2_write : STD_LOGIC;
    signal grp_analyze_pulse_fu_704_pulsedata_V_3_din : STD_LOGIC_VECTOR (124 downto 0);
    signal grp_analyze_pulse_fu_704_pulsedata_V_3_write : STD_LOGIC;
    signal grp_update_triggers_fu_789_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_update_triggers_fu_789_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_update_triggers_fu_789_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_update_triggers_fu_789_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_update_triggers_fu_789_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_update_triggers_fu_789_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_update_triggers_fu_789_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_update_triggers_fu_789_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_update_triggers_fu_789_ap_return_8 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_update_triggers_fu_789_ap_return_9 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_update_triggers_fu_789_ap_return_10 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_update_triggers_fu_789_ap_return_11 : STD_LOGIC_VECTOR (0 downto 0);
    signal do_init_reg_459 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal regslice_both_events_out_V_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state21_io : BOOLEAN;
    signal icmp_ln234_fu_1220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal holdoff_V4_phi_reg_550 : STD_LOGIC_VECTOR (9 downto 0);
    signal holdoff_V4_rewind_reg_475 : STD_LOGIC_VECTOR (9 downto 0);
    signal baseline_shrink_V5_p_reg_562 : STD_LOGIC_VECTOR (8 downto 0);
    signal baseline_shrink_V5_r_reg_490 : STD_LOGIC_VECTOR (8 downto 0);
    signal baseline_grow_V6_phi_reg_574 : STD_LOGIC_VECTOR (8 downto 0);
    signal baseline_grow_V6_rew_reg_505 : STD_LOGIC_VECTOR (8 downto 0);
    signal lane_V7_phi_reg_586 : STD_LOGIC_VECTOR (1 downto 0);
    signal lane_V7_rewind_reg_520 : STD_LOGIC_VECTOR (1 downto 0);
    signal val_assign3_reg_535 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_0_reg_598 : STD_LOGIC_VECTOR (124 downto 0);
    signal grp_update_baselines_fu_626_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_NS_fsm_state3 : STD_LOGIC;
    signal select_ln240_fu_821_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln240_1_fu_829_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_analyze_pulse_fu_704_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_NS_fsm_state13 : STD_LOGIC;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal pulsedata_V_0_full_n : STD_LOGIC;
    signal pulsedata_V_0_write : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal pulsedata_V_1_full_n : STD_LOGIC;
    signal pulsedata_V_1_write : STD_LOGIC;
    signal pulsedata_V_2_full_n : STD_LOGIC;
    signal pulsedata_V_2_write : STD_LOGIC;
    signal pulsedata_V_3_full_n : STD_LOGIC;
    signal pulsedata_V_3_write : STD_LOGIC;
    signal zext_ln238_fu_889_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln700_fu_1209_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_095_05321_fu_330 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_0327_05312_fu_334 : STD_LOGIC_VECTOR (8 downto 0);
    signal pulsedata_V_2_read_nbread_fu_376_p2_0 : STD_LOGIC_VECTOR (0 downto 0);
    signal pulsedata_V_2_dout : STD_LOGIC_VECTOR (124 downto 0);
    signal pulsedata_V_2_empty_n : STD_LOGIC;
    signal pulsedata_V_2_read : STD_LOGIC;
    signal pulsedata_V_1_read_nbread_fu_382_p2_0 : STD_LOGIC_VECTOR (0 downto 0);
    signal pulsedata_V_1_dout : STD_LOGIC_VECTOR (124 downto 0);
    signal pulsedata_V_1_empty_n : STD_LOGIC;
    signal pulsedata_V_1_read : STD_LOGIC;
    signal pulsedata_V_0_read_nbread_fu_388_p2_0 : STD_LOGIC_VECTOR (0 downto 0);
    signal pulsedata_V_0_dout : STD_LOGIC_VECTOR (124 downto 0);
    signal pulsedata_V_0_empty_n : STD_LOGIC;
    signal pulsedata_V_0_read : STD_LOGIC;
    signal pulsedata_V_3_read_nbread_fu_394_p2_0 : STD_LOGIC_VECTOR (0 downto 0);
    signal pulsedata_V_3_dout : STD_LOGIC_VECTOR (124 downto 0);
    signal pulsedata_V_3_empty_n : STD_LOGIC;
    signal pulsedata_V_3_read : STD_LOGIC;
    signal tmp_peak_time_V_load_fu_1041_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln209_fu_1051_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_start_V_load_new_fu_1031_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln851_fu_1061_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_s_fu_1089_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_fu_1081_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln850_fu_1097_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_fu_1124_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_11_fu_1116_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln851_1_fu_1134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_1_fu_1108_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln850_1_fu_1140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln850_1_fu_1146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_1071_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln850_fu_1102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1356_fu_1172_p3 : STD_LOGIC_VECTOR (92 downto 0);
    signal tmp_3_fu_1160_p6 : STD_LOGIC_VECTOR (92 downto 0);
    signal or_ln1356_fu_1180_p2 : STD_LOGIC_VECTOR (92 downto 0);
    signal tmp_9_fu_1186_p3 : STD_LOGIC_VECTOR (93 downto 0);
    signal sext_ln1356_fu_1194_p1 : STD_LOGIC_VECTOR (96 downto 0);
    signal select_ln1503_fu_1152_p3 : STD_LOGIC_VECTOR (96 downto 0);
    signal ret_V_3_fu_1198_p2 : STD_LOGIC_VECTOR (96 downto 0);
    signal regslice_both_streamin_data_V_U_apdone_blk : STD_LOGIC;
    signal streamin_TDATA_int : STD_LOGIC_VECTOR (63 downto 0);
    signal streamin_TVALID_int : STD_LOGIC;
    signal streamin_TREADY_int : STD_LOGIC;
    signal regslice_both_streamin_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_w1_streamin_last_U_apdone_blk : STD_LOGIC;
    signal streamin_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_streamin_last_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_streamin_last_U_ack_in : STD_LOGIC;
    signal events_out_V_V_TDATA_int : STD_LOGIC_VECTOR (111 downto 0);
    signal events_out_V_V_TVALID_int : STD_LOGIC;
    signal events_out_V_V_TREADY_int : STD_LOGIC;
    signal regslice_both_events_out_V_V_U_vld_out : STD_LOGIC;

    component update_baselines IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        group_V : IN STD_LOGIC_VECTOR (8 downto 0);
        phases_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        phases_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        phases_2_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        phases_3_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        grow_n_V : IN STD_LOGIC_VECTOR (8 downto 0);
        shrink_n_V : IN STD_LOGIC_VECTOR (8 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component analyze_pulse IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        group_V : IN STD_LOGIC_VECTOR (8 downto 0);
        trigdata_0_phase_V_s : IN STD_LOGIC_VECTOR (15 downto 0);
        trigdata_1_phase_V_s : IN STD_LOGIC_VECTOR (15 downto 0);
        trigdata_2_phase_V_s : IN STD_LOGIC_VECTOR (15 downto 0);
        trigdata_3_phase_V_s : IN STD_LOGIC_VECTOR (15 downto 0);
        trigdata_0_baseline : IN STD_LOGIC_VECTOR (15 downto 0);
        trigdata_1_baseline : IN STD_LOGIC_VECTOR (15 downto 0);
        trigdata_2_baseline : IN STD_LOGIC_VECTOR (15 downto 0);
        trigdata_3_baseline : IN STD_LOGIC_VECTOR (15 downto 0);
        trigdata_0_trigger_s : IN STD_LOGIC;
        trigdata_1_trigger_s : IN STD_LOGIC;
        trigdata_2_trigger_s : IN STD_LOGIC;
        trigdata_3_trigger_s : IN STD_LOGIC;
        holdoff_V : IN STD_LOGIC_VECTOR (9 downto 0);
        timestamp_V : IN STD_LOGIC_VECTOR (63 downto 0);
        pulsedata_V_0_din : OUT STD_LOGIC_VECTOR (124 downto 0);
        pulsedata_V_0_full_n : IN STD_LOGIC;
        pulsedata_V_0_write : OUT STD_LOGIC;
        pulsedata_V_1_din : OUT STD_LOGIC_VECTOR (124 downto 0);
        pulsedata_V_1_full_n : IN STD_LOGIC;
        pulsedata_V_1_write : OUT STD_LOGIC;
        pulsedata_V_2_din : OUT STD_LOGIC_VECTOR (124 downto 0);
        pulsedata_V_2_full_n : IN STD_LOGIC;
        pulsedata_V_2_write : OUT STD_LOGIC;
        pulsedata_V_3_din : OUT STD_LOGIC_VECTOR (124 downto 0);
        pulsedata_V_3_full_n : IN STD_LOGIC;
        pulsedata_V_3_write : OUT STD_LOGIC );
    end component;


    component update_triggers IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_0_phase_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_1_phase_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_2_phase_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_3_phase_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_0_baseline_V_r : IN STD_LOGIC_VECTOR (15 downto 0);
        data_1_baseline_V_r : IN STD_LOGIC_VECTOR (15 downto 0);
        data_2_baseline_V_r : IN STD_LOGIC_VECTOR (15 downto 0);
        data_3_baseline_V_r : IN STD_LOGIC_VECTOR (15 downto 0);
        trig_cfg_0_threshol : IN STD_LOGIC_VECTOR (15 downto 0);
        trig_cfg_1_threshol : IN STD_LOGIC_VECTOR (15 downto 0);
        trig_cfg_2_threshol : IN STD_LOGIC_VECTOR (15 downto 0);
        trig_cfg_3_threshol : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w125_d64_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (124 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (124 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component photon_trigger_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        triggercfg_0_threshold_V_address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        triggercfg_0_threshold_V_ce0 : IN STD_LOGIC;
        triggercfg_0_threshold_V_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        triggercfg_1_threshold_V_address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        triggercfg_1_threshold_V_ce0 : IN STD_LOGIC;
        triggercfg_1_threshold_V_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        triggercfg_2_threshold_V_address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        triggercfg_2_threshold_V_ce0 : IN STD_LOGIC;
        triggercfg_2_threshold_V_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        triggercfg_3_threshold_V_address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        triggercfg_3_threshold_V_ce0 : IN STD_LOGIC;
        triggercfg_3_threshold_V_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        holdoff_V : OUT STD_LOGIC_VECTOR (9 downto 0);
        baseline_shrink_V : OUT STD_LOGIC_VECTOR (8 downto 0);
        baseline_grow_V : OUT STD_LOGIC_VECTOR (8 downto 0);
        dropped : OUT STD_LOGIC_VECTOR (31 downto 0);
        clk : IN STD_LOGIC;
        rst : IN STD_LOGIC );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;


    component regslice_both_w1 IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC;
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC;
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    photon_trigger_control_s_axi_U : component photon_trigger_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ctrl_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        triggercfg_0_threshold_V_address0 => triggercfg_0_threshold_V_address0,
        triggercfg_0_threshold_V_ce0 => triggercfg_0_threshold_V_ce0,
        triggercfg_0_threshold_V_q0 => triggercfg_0_threshold_V_q0,
        triggercfg_1_threshold_V_address0 => triggercfg_1_threshold_V_address0,
        triggercfg_1_threshold_V_ce0 => triggercfg_1_threshold_V_ce0,
        triggercfg_1_threshold_V_q0 => triggercfg_1_threshold_V_q0,
        triggercfg_2_threshold_V_address0 => triggercfg_2_threshold_V_address0,
        triggercfg_2_threshold_V_ce0 => triggercfg_2_threshold_V_ce0,
        triggercfg_2_threshold_V_q0 => triggercfg_2_threshold_V_q0,
        triggercfg_3_threshold_V_address0 => triggercfg_3_threshold_V_address0,
        triggercfg_3_threshold_V_ce0 => triggercfg_3_threshold_V_ce0,
        triggercfg_3_threshold_V_q0 => triggercfg_3_threshold_V_q0,
        holdoff_V => holdoff_V,
        baseline_shrink_V => baseline_shrink_V,
        baseline_grow_V => baseline_grow_V,
        dropped => dropped,
        clk => ap_clk,
        rst => ap_rst_n_ctrl_clk_inv);

    grp_update_baselines_fu_626 : component update_baselines
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_update_baselines_fu_626_ap_start,
        ap_done => grp_update_baselines_fu_626_ap_done,
        ap_idle => grp_update_baselines_fu_626_ap_idle,
        ap_ready => grp_update_baselines_fu_626_ap_ready,
        group_V => val_assign3_reg_535,
        phases_0_V_read => grp_update_baselines_fu_626_phases_0_V_read,
        phases_1_V_read => grp_update_baselines_fu_626_phases_1_V_read,
        phases_2_V_read => grp_update_baselines_fu_626_phases_2_V_read,
        phases_3_V_read => grp_update_baselines_fu_626_phases_3_V_read,
        grow_n_V => grp_update_baselines_fu_626_grow_n_V,
        shrink_n_V => grp_update_baselines_fu_626_shrink_n_V,
        ap_return_0 => grp_update_baselines_fu_626_ap_return_0,
        ap_return_1 => grp_update_baselines_fu_626_ap_return_1,
        ap_return_2 => grp_update_baselines_fu_626_ap_return_2,
        ap_return_3 => grp_update_baselines_fu_626_ap_return_3,
        ap_return_4 => grp_update_baselines_fu_626_ap_return_4,
        ap_return_5 => grp_update_baselines_fu_626_ap_return_5,
        ap_return_6 => grp_update_baselines_fu_626_ap_return_6,
        ap_return_7 => grp_update_baselines_fu_626_ap_return_7);

    grp_analyze_pulse_fu_704 : component analyze_pulse
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_analyze_pulse_fu_704_ap_start,
        ap_done => grp_analyze_pulse_fu_704_ap_done,
        ap_idle => grp_analyze_pulse_fu_704_ap_idle,
        ap_ready => grp_analyze_pulse_fu_704_ap_ready,
        group_V => val_assign3_reg_535,
        trigdata_0_phase_V_s => grp_update_triggers_fu_789_ap_return_0,
        trigdata_1_phase_V_s => grp_update_triggers_fu_789_ap_return_1,
        trigdata_2_phase_V_s => grp_update_triggers_fu_789_ap_return_2,
        trigdata_3_phase_V_s => grp_update_triggers_fu_789_ap_return_3,
        trigdata_0_baseline => grp_update_triggers_fu_789_ap_return_4,
        trigdata_1_baseline => grp_update_triggers_fu_789_ap_return_5,
        trigdata_2_baseline => grp_update_triggers_fu_789_ap_return_6,
        trigdata_3_baseline => grp_update_triggers_fu_789_ap_return_7,
        trigdata_0_trigger_s => grp_analyze_pulse_fu_704_trigdata_0_trigger_s,
        trigdata_1_trigger_s => grp_analyze_pulse_fu_704_trigdata_1_trigger_s,
        trigdata_2_trigger_s => grp_analyze_pulse_fu_704_trigdata_2_trigger_s,
        trigdata_3_trigger_s => grp_analyze_pulse_fu_704_trigdata_3_trigger_s,
        holdoff_V => holdoff_V4_phi_reg_550,
        timestamp_V => time_V_reg_1266,
        pulsedata_V_0_din => grp_analyze_pulse_fu_704_pulsedata_V_0_din,
        pulsedata_V_0_full_n => pulsedata_V_0_full_n,
        pulsedata_V_0_write => grp_analyze_pulse_fu_704_pulsedata_V_0_write,
        pulsedata_V_1_din => grp_analyze_pulse_fu_704_pulsedata_V_1_din,
        pulsedata_V_1_full_n => pulsedata_V_1_full_n,
        pulsedata_V_1_write => grp_analyze_pulse_fu_704_pulsedata_V_1_write,
        pulsedata_V_2_din => grp_analyze_pulse_fu_704_pulsedata_V_2_din,
        pulsedata_V_2_full_n => pulsedata_V_2_full_n,
        pulsedata_V_2_write => grp_analyze_pulse_fu_704_pulsedata_V_2_write,
        pulsedata_V_3_din => grp_analyze_pulse_fu_704_pulsedata_V_3_din,
        pulsedata_V_3_full_n => pulsedata_V_3_full_n,
        pulsedata_V_3_write => grp_analyze_pulse_fu_704_pulsedata_V_3_write);

    grp_update_triggers_fu_789 : component update_triggers
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_0_phase_V_read => basedata_0_phase_V_reg_1291,
        data_1_phase_V_read => basedata_1_phase_V_reg_1296,
        data_2_phase_V_read => basedata_2_phase_V_reg_1301,
        data_3_phase_V_read => basedata_3_phase_V_reg_1306,
        data_0_baseline_V_r => basedata_0_baseline_reg_1311,
        data_1_baseline_V_r => basedata_1_baseline_reg_1316,
        data_2_baseline_V_r => basedata_2_baseline_reg_1321,
        data_3_baseline_V_r => basedata_3_baseline_reg_1326,
        trig_cfg_0_threshol => triggercfg_0_threshold_V_q0,
        trig_cfg_1_threshol => triggercfg_1_threshold_V_q0,
        trig_cfg_2_threshol => triggercfg_2_threshold_V_q0,
        trig_cfg_3_threshol => triggercfg_3_threshold_V_q0,
        ap_return_0 => grp_update_triggers_fu_789_ap_return_0,
        ap_return_1 => grp_update_triggers_fu_789_ap_return_1,
        ap_return_2 => grp_update_triggers_fu_789_ap_return_2,
        ap_return_3 => grp_update_triggers_fu_789_ap_return_3,
        ap_return_4 => grp_update_triggers_fu_789_ap_return_4,
        ap_return_5 => grp_update_triggers_fu_789_ap_return_5,
        ap_return_6 => grp_update_triggers_fu_789_ap_return_6,
        ap_return_7 => grp_update_triggers_fu_789_ap_return_7,
        ap_return_8 => grp_update_triggers_fu_789_ap_return_8,
        ap_return_9 => grp_update_triggers_fu_789_ap_return_9,
        ap_return_10 => grp_update_triggers_fu_789_ap_return_10,
        ap_return_11 => grp_update_triggers_fu_789_ap_return_11);

    pulsedata_V_0_fifo_U : component fifo_w125_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_analyze_pulse_fu_704_pulsedata_V_0_din,
        if_full_n => pulsedata_V_0_full_n,
        if_write => pulsedata_V_0_write,
        if_dout => pulsedata_V_0_dout,
        if_empty_n => pulsedata_V_0_empty_n,
        if_read => pulsedata_V_0_read);

    pulsedata_V_1_fifo_U : component fifo_w125_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_analyze_pulse_fu_704_pulsedata_V_1_din,
        if_full_n => pulsedata_V_1_full_n,
        if_write => pulsedata_V_1_write,
        if_dout => pulsedata_V_1_dout,
        if_empty_n => pulsedata_V_1_empty_n,
        if_read => pulsedata_V_1_read);

    pulsedata_V_2_fifo_U : component fifo_w125_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_analyze_pulse_fu_704_pulsedata_V_2_din,
        if_full_n => pulsedata_V_2_full_n,
        if_write => pulsedata_V_2_write,
        if_dout => pulsedata_V_2_dout,
        if_empty_n => pulsedata_V_2_empty_n,
        if_read => pulsedata_V_2_read);

    pulsedata_V_3_fifo_U : component fifo_w125_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_analyze_pulse_fu_704_pulsedata_V_3_din,
        if_full_n => pulsedata_V_3_full_n,
        if_write => pulsedata_V_3_write,
        if_dout => pulsedata_V_3_dout,
        if_empty_n => pulsedata_V_3_empty_n,
        if_read => pulsedata_V_3_read);

    regslice_both_streamin_data_V_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => streamin_TDATA,
        vld_in => streamin_TVALID,
        ack_in => regslice_both_streamin_data_V_U_ack_in,
        data_out => streamin_TDATA_int,
        vld_out => streamin_TVALID_int,
        ack_out => streamin_TREADY_int,
        apdone_blk => regslice_both_streamin_data_V_U_apdone_blk);

    regslice_both_w1_streamin_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => streamin_TLAST,
        vld_in => streamin_TVALID,
        ack_in => regslice_both_w1_streamin_last_U_ack_in,
        data_out => streamin_TLAST_int,
        vld_out => regslice_both_w1_streamin_last_U_vld_out,
        ack_out => streamin_TREADY_int,
        apdone_blk => regslice_both_w1_streamin_last_U_apdone_blk);

    regslice_both_events_out_V_V_U : component regslice_both
    generic map (
        DataWidth => 112)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => events_out_V_V_TDATA_int,
        vld_in => events_out_V_V_TVALID_int,
        ack_in => events_out_V_V_TREADY_int,
        data_out => events_out_V_V_TDATA,
        vld_out => regslice_both_events_out_V_V_U_vld_out,
        ack_out => events_out_V_V_TREADY,
        apdone_blk => regslice_both_events_out_V_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_analyze_pulse_fu_704_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_analyze_pulse_fu_704_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state13) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    grp_analyze_pulse_fu_704_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_analyze_pulse_fu_704_ap_ready = ap_const_logic_1)) then 
                    grp_analyze_pulse_fu_704_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_update_baselines_fu_626_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_update_baselines_fu_626_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state3) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_update_baselines_fu_626_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_update_baselines_fu_626_ap_ready = ap_const_logic_1)) then 
                    grp_update_baselines_fu_626_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    baseline_grow_V6_phi_reg_574_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                if ((ap_phi_mux_do_init_phi_fu_464_p6 = ap_const_lv1_0)) then 
                    baseline_grow_V6_phi_reg_574 <= baseline_grow_V6_rew_reg_505;
                elsif ((ap_phi_mux_do_init_phi_fu_464_p6 = ap_const_lv1_1)) then 
                    baseline_grow_V6_phi_reg_574 <= baseline_grow_V;
                end if;
            end if; 
        end if;
    end process;

    baseline_shrink_V5_p_reg_562_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                if ((ap_phi_mux_do_init_phi_fu_464_p6 = ap_const_lv1_0)) then 
                    baseline_shrink_V5_p_reg_562 <= baseline_shrink_V5_r_reg_490;
                elsif ((ap_phi_mux_do_init_phi_fu_464_p6 = ap_const_lv1_1)) then 
                    baseline_shrink_V5_p_reg_562 <= baseline_shrink_V;
                end if;
            end if; 
        end if;
    end process;

    do_init_reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state21_io) or (regslice_both_events_out_V_V_U_apdone_blk = ap_const_logic_1))) and (icmp_ln234_fu_1220_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                do_init_reg_459 <= ap_const_lv1_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (not(((ap_const_boolean_1 = ap_block_state21_io) or (regslice_both_events_out_V_V_U_apdone_blk = ap_const_logic_1))) and (icmp_ln234_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
                do_init_reg_459 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    empty_n_reg_612_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                if ((t_V_reg_1331 = ap_const_lv2_0)) then 
                    empty_n_reg_612 <= pulsedata_V_0_read_nbread_fu_388_p2_0;
                elsif ((t_V_reg_1331 = ap_const_lv2_1)) then 
                    empty_n_reg_612 <= pulsedata_V_1_read_nbread_fu_382_p2_0;
                elsif ((t_V_reg_1331 = ap_const_lv2_2)) then 
                    empty_n_reg_612 <= pulsedata_V_2_read_nbread_fu_376_p2_0;
                elsif ((t_V_reg_1331 = ap_const_lv2_3)) then 
                    empty_n_reg_612 <= pulsedata_V_3_read_nbread_fu_394_p2_0;
                end if;
            end if; 
        end if;
    end process;

    holdoff_V4_phi_reg_550_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                if ((ap_phi_mux_do_init_phi_fu_464_p6 = ap_const_lv1_0)) then 
                    holdoff_V4_phi_reg_550 <= holdoff_V4_rewind_reg_475;
                elsif ((ap_phi_mux_do_init_phi_fu_464_p6 = ap_const_lv1_1)) then 
                    holdoff_V4_phi_reg_550 <= holdoff_V;
                end if;
            end if; 
        end if;
    end process;

    lane_V7_phi_reg_586_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                if ((ap_phi_mux_do_init_phi_fu_464_p6 = ap_const_lv1_0)) then 
                    lane_V7_phi_reg_586 <= lane_V7_rewind_reg_520;
                elsif ((ap_phi_mux_do_init_phi_fu_464_p6 = ap_const_lv1_1)) then 
                    lane_V7_phi_reg_586 <= lane_V;
                end if;
            end if; 
        end if;
    end process;

    tmp_0_reg_598_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                if ((t_V_reg_1331 = ap_const_lv2_0)) then 
                    tmp_0_reg_598 <= pulsedata_V_0_dout;
                elsif ((t_V_reg_1331 = ap_const_lv2_1)) then 
                    tmp_0_reg_598 <= pulsedata_V_1_dout;
                elsif ((t_V_reg_1331 = ap_const_lv2_2)) then 
                    tmp_0_reg_598 <= pulsedata_V_2_dout;
                elsif ((t_V_reg_1331 = ap_const_lv2_3)) then 
                    tmp_0_reg_598 <= pulsedata_V_3_dout;
                end if;
            end if; 
        end if;
    end process;

    val_assign3_reg_535_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state21_io) or (regslice_both_events_out_V_V_U_apdone_blk = ap_const_logic_1))) and (icmp_ln234_fu_1220_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                val_assign3_reg_535 <= group_reg_1337;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (not(((ap_const_boolean_1 = ap_block_state21_io) or (regslice_both_events_out_V_V_U_apdone_blk = ap_const_logic_1))) and (icmp_ln234_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
                val_assign3_reg_535 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                basedata_0_baseline_reg_1311 <= grp_update_baselines_fu_626_ap_return_4;
                basedata_0_phase_V_reg_1291 <= grp_update_baselines_fu_626_ap_return_0;
                basedata_1_baseline_reg_1316 <= grp_update_baselines_fu_626_ap_return_5;
                basedata_1_phase_V_reg_1296 <= grp_update_baselines_fu_626_ap_return_1;
                basedata_2_baseline_reg_1321 <= grp_update_baselines_fu_626_ap_return_6;
                basedata_2_phase_V_reg_1301 <= grp_update_baselines_fu_626_ap_return_2;
                basedata_3_baseline_reg_1326 <= grp_update_baselines_fu_626_ap_return_7;
                basedata_3_phase_V_reg_1306 <= grp_update_baselines_fu_626_ap_return_3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state21_io) or (regslice_both_events_out_V_V_U_apdone_blk = ap_const_logic_1))) and (icmp_ln234_fu_1220_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                baseline_grow_V6_rew_reg_505 <= baseline_grow_V6_phi_reg_574;
                baseline_shrink_V5_r_reg_490 <= baseline_shrink_V5_p_reg_562;
                holdoff_V4_rewind_reg_475 <= holdoff_V4_phi_reg_550;
                lane_V7_rewind_reg_520 <= lane_V7_phi_reg_586;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_empty_n_phi_fu_615_p8 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                event_time_V_reg_1382 <= event_time_V_fu_1055_p2;
                icmp_ln851_reg_1387 <= icmp_ln851_fu_1065_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                group_reg_1337 <= group_fu_993_p2;
                t_V_reg_1331 <= next_out_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                icmp_ln240_reg_1260 <= icmp_ln240_fu_809_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state21_io) or (regslice_both_events_out_V_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                next_out_V <= add_ln700_fu_1209_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((timestamp_V_ap_vld = ap_const_logic_0) or (streamin_TVALID_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                p_0327_05312_fu_334 <= select_ln240_1_fu_829_p3;
                p_095_05321_fu_330 <= select_ln240_fu_821_p3;
                time_V_reg_1266 <= timestamp_V;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (timestamp_V_ap_vld, ap_CS_fsm, ap_CS_fsm_state3, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state19, ap_phi_mux_empty_n_phi_fu_615_p8, regslice_both_events_out_V_V_U_apdone_blk, ap_block_state21_io, icmp_ln234_fu_1220_p2, streamin_TVALID_int, events_out_V_V_TREADY_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if ((not(((timestamp_V_ap_vld = ap_const_logic_0) or (streamin_TVALID_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((ap_phi_mux_empty_n_phi_fu_615_p8 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (events_out_V_V_TREADY_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if ((not(((ap_const_boolean_1 = ap_block_state21_io) or (regslice_both_events_out_V_V_U_apdone_blk = ap_const_logic_1))) and (icmp_ln234_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((ap_const_boolean_1 = ap_block_state21_io) or (regslice_both_events_out_V_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln700_fu_1209_p2 <= std_logic_vector(unsigned(t_V_reg_1331) + unsigned(ap_const_lv2_1));
    and_ln850_1_fu_1140_p2 <= (p_Result_11_fu_1116_p3 and icmp_ln851_1_fu_1134_p2);
    and_ln850_fu_1097_p2 <= (p_Result_s_fu_1089_p3 and icmp_ln851_reg_1387);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_NS_fsm_state13 <= ap_NS_fsm(12);
    ap_NS_fsm_state3 <= ap_NS_fsm(2);

    ap_block_state21_io_assign_proc : process(empty_n_reg_612, events_out_V_V_TREADY_int)
    begin
                ap_block_state21_io <= ((empty_n_reg_612 = ap_const_lv1_1) and (events_out_V_V_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state3_assign_proc : process(timestamp_V_ap_vld, streamin_TVALID_int)
    begin
                ap_block_state3 <= ((timestamp_V_ap_vld = ap_const_logic_0) or (streamin_TVALID_int = ap_const_logic_0));
    end process;

    ap_phi_mux_do_init_phi_fu_464_p6 <= do_init_reg_459;
    ap_phi_mux_empty_n_phi_fu_615_p8 <= empty_n_reg_612;

    ap_rst_n_ctrl_clk_inv_assign_proc : process(ap_rst_n_ctrl_clk)
    begin
                ap_rst_n_ctrl_clk_inv <= not(ap_rst_n_ctrl_clk);
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    event_time_V_fu_1055_p2 <= std_logic_vector(unsigned(zext_ln209_fu_1051_p1) + unsigned(tmp_start_V_load_new_fu_1031_p4));

    events_out_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, empty_n_reg_612, events_out_V_V_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((empty_n_reg_612 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            events_out_V_V_TDATA_blk_n <= events_out_V_V_TREADY_int;
        else 
            events_out_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        events_out_V_V_TDATA_int <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_3_fu_1198_p2),112));

    events_out_V_V_TVALID <= regslice_both_events_out_V_V_U_vld_out;

    events_out_V_V_TVALID_int_assign_proc : process(ap_CS_fsm_state20, events_out_V_V_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) and (events_out_V_V_TREADY_int = ap_const_logic_1))) then 
            events_out_V_V_TVALID_int <= ap_const_logic_1;
        else 
            events_out_V_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    group_fu_993_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(val_assign3_reg_535));
    grp_analyze_pulse_fu_704_ap_start <= grp_analyze_pulse_fu_704_ap_start_reg;
    grp_analyze_pulse_fu_704_trigdata_0_trigger_s <= grp_update_triggers_fu_789_ap_return_8(0);
    grp_analyze_pulse_fu_704_trigdata_1_trigger_s <= grp_update_triggers_fu_789_ap_return_9(0);
    grp_analyze_pulse_fu_704_trigdata_2_trigger_s <= grp_update_triggers_fu_789_ap_return_10(0);
    grp_analyze_pulse_fu_704_trigdata_3_trigger_s <= grp_update_triggers_fu_789_ap_return_11(0);
    grp_update_baselines_fu_626_ap_start <= grp_update_baselines_fu_626_ap_start_reg;
    grp_update_baselines_fu_626_grow_n_V <= 
        baseline_grow_V6_phi_reg_574 when (icmp_ln240_reg_1260(0) = '1') else 
        p_095_05321_fu_330;
    grp_update_baselines_fu_626_phases_0_V_read <= streamin_TDATA_int(16 - 1 downto 0);
    grp_update_baselines_fu_626_phases_1_V_read <= streamin_TDATA_int(31 downto 16);
    grp_update_baselines_fu_626_phases_2_V_read <= streamin_TDATA_int(47 downto 32);
    grp_update_baselines_fu_626_phases_3_V_read <= streamin_TDATA_int(63 downto 48);
    grp_update_baselines_fu_626_shrink_n_V <= 
        baseline_shrink_V5_p_reg_562 when (icmp_ln240_reg_1260(0) = '1') else 
        p_0327_05312_fu_334;
    icmp_ln234_fu_1220_p2 <= "1" when (val_assign3_reg_535 = ap_const_lv9_1FF) else "0";
    icmp_ln240_fu_809_p2 <= "1" when (val_assign3_reg_535 = ap_const_lv9_0) else "0";
    icmp_ln851_1_fu_1134_p2 <= "0" when (p_Result_5_fu_1124_p4 = ap_const_lv15_0) else "1";
    icmp_ln851_fu_1065_p2 <= "0" when (trunc_ln851_fu_1061_p1 = ap_const_lv15_0) else "1";
    or_ln1356_fu_1180_p2 <= (tmp_3_fu_1160_p6 or select_ln1356_fu_1172_p3);
    p_Result_11_fu_1116_p3 <= tmp_0_reg_598(124 downto 124);
    p_Result_5_fu_1124_p4 <= tmp_0_reg_598(123 downto 109);
    p_Result_s_fu_1089_p3 <= tmp_0_reg_598(15 downto 15);

    pulsedata_V_0_read_assign_proc : process(t_V_reg_1331, ap_CS_fsm_state18, pulsedata_V_0_empty_n)
    begin
        if (((t_V_reg_1331 = ap_const_lv2_0) and (pulsedata_V_0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            pulsedata_V_0_read <= ap_const_logic_1;
        else 
            pulsedata_V_0_read <= ap_const_logic_0;
        end if; 
    end process;

    pulsedata_V_0_read_nbread_fu_388_p2_0 <= (0=>(pulsedata_V_0_empty_n), others=>'-');

    pulsedata_V_0_write_assign_proc : process(grp_analyze_pulse_fu_704_pulsedata_V_0_write, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            pulsedata_V_0_write <= grp_analyze_pulse_fu_704_pulsedata_V_0_write;
        else 
            pulsedata_V_0_write <= ap_const_logic_0;
        end if; 
    end process;


    pulsedata_V_1_read_assign_proc : process(t_V_reg_1331, ap_CS_fsm_state18, pulsedata_V_1_empty_n)
    begin
        if (((pulsedata_V_1_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18) and (t_V_reg_1331 = ap_const_lv2_1))) then 
            pulsedata_V_1_read <= ap_const_logic_1;
        else 
            pulsedata_V_1_read <= ap_const_logic_0;
        end if; 
    end process;

    pulsedata_V_1_read_nbread_fu_382_p2_0 <= (0=>(pulsedata_V_1_empty_n), others=>'-');

    pulsedata_V_1_write_assign_proc : process(grp_analyze_pulse_fu_704_pulsedata_V_1_write, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            pulsedata_V_1_write <= grp_analyze_pulse_fu_704_pulsedata_V_1_write;
        else 
            pulsedata_V_1_write <= ap_const_logic_0;
        end if; 
    end process;


    pulsedata_V_2_read_assign_proc : process(t_V_reg_1331, ap_CS_fsm_state18, pulsedata_V_2_empty_n)
    begin
        if (((pulsedata_V_2_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18) and (t_V_reg_1331 = ap_const_lv2_2))) then 
            pulsedata_V_2_read <= ap_const_logic_1;
        else 
            pulsedata_V_2_read <= ap_const_logic_0;
        end if; 
    end process;

    pulsedata_V_2_read_nbread_fu_376_p2_0 <= (0=>(pulsedata_V_2_empty_n), others=>'-');

    pulsedata_V_2_write_assign_proc : process(grp_analyze_pulse_fu_704_pulsedata_V_2_write, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            pulsedata_V_2_write <= grp_analyze_pulse_fu_704_pulsedata_V_2_write;
        else 
            pulsedata_V_2_write <= ap_const_logic_0;
        end if; 
    end process;


    pulsedata_V_3_read_assign_proc : process(t_V_reg_1331, ap_CS_fsm_state18, pulsedata_V_3_empty_n)
    begin
        if (((pulsedata_V_3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18) and (t_V_reg_1331 = ap_const_lv2_3))) then 
            pulsedata_V_3_read <= ap_const_logic_1;
        else 
            pulsedata_V_3_read <= ap_const_logic_0;
        end if; 
    end process;

    pulsedata_V_3_read_nbread_fu_394_p2_0 <= (0=>(pulsedata_V_3_empty_n), others=>'-');

    pulsedata_V_3_write_assign_proc : process(grp_analyze_pulse_fu_704_pulsedata_V_3_write, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            pulsedata_V_3_write <= grp_analyze_pulse_fu_704_pulsedata_V_3_write;
        else 
            pulsedata_V_3_write <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_1_fu_1108_p3 <= tmp_0_reg_598(124 downto 124);
    ret_V_3_fu_1198_p2 <= (sext_ln1356_fu_1194_p1 or select_ln1503_fu_1152_p3);
    ret_V_fu_1081_p3 <= tmp_0_reg_598(15 downto 15);
    select_ln1356_fu_1172_p3 <= 
        ap_const_lv93_1FFFFFFF0000000000000000 when (xor_ln850_fu_1102_p2(0) = '1') else 
        ap_const_lv93_0;
    select_ln1503_fu_1152_p3 <= 
        ap_const_lv97_1000000000000000000000000 when (xor_ln850_1_fu_1146_p2(0) = '1') else 
        ap_const_lv97_0;
    select_ln240_1_fu_829_p3 <= 
        baseline_shrink_V5_p_reg_562 when (icmp_ln240_reg_1260(0) = '1') else 
        p_0327_05312_fu_334;
    select_ln240_fu_821_p3 <= 
        baseline_grow_V6_phi_reg_574 when (icmp_ln240_reg_1260(0) = '1') else 
        p_095_05321_fu_330;
        sext_ln1356_fu_1194_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_fu_1186_p3),97));


    streamin_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state3, streamin_TVALID_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            streamin_TDATA_blk_n <= streamin_TVALID_int;
        else 
            streamin_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    streamin_TREADY_assign_proc : process(streamin_TVALID, regslice_both_streamin_data_V_U_ack_in)
    begin
        if (((streamin_TVALID = ap_const_logic_1) and (regslice_both_streamin_data_V_U_ack_in = ap_const_logic_1))) then 
            streamin_TREADY <= ap_const_logic_1;
        else 
            streamin_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    streamin_TREADY_int_assign_proc : process(timestamp_V_ap_vld, ap_CS_fsm_state3, streamin_TVALID_int)
    begin
        if ((not(((timestamp_V_ap_vld = ap_const_logic_0) or (streamin_TVALID_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            streamin_TREADY_int <= ap_const_logic_1;
        else 
            streamin_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    timestamp_V_ap_ack_assign_proc : process(timestamp_V_ap_vld, ap_CS_fsm_state3, streamin_TVALID_int)
    begin
        if ((not(((timestamp_V_ap_vld = ap_const_logic_0) or (streamin_TVALID_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            timestamp_V_ap_ack <= ap_const_logic_1;
        else 
            timestamp_V_ap_ack <= ap_const_logic_0;
        end if; 
    end process;


    timestamp_V_blk_n_assign_proc : process(timestamp_V_ap_vld, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            timestamp_V_blk_n <= timestamp_V_ap_vld;
        else 
            timestamp_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    tmp_2_fu_1071_p4 <= tmp_0_reg_598(24 downto 16);
    tmp_3_fu_1160_p6 <= ((((lane_V7_phi_reg_586 & tmp_2_fu_1071_p4) & t_V_reg_1331) & ap_const_lv16_0) & event_time_V_reg_1382);
    tmp_9_fu_1186_p3 <= (xor_ln850_fu_1102_p2 & or_ln1356_fu_1180_p2);
    tmp_peak_time_V_load_fu_1041_p4 <= tmp_0_reg_598(98 downto 89);
    tmp_start_V_load_new_fu_1031_p4 <= tmp_0_reg_598(88 downto 25);
    triggercfg_0_threshold_V_address0 <= zext_ln238_fu_889_p1(9 - 1 downto 0);

    triggercfg_0_threshold_V_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            triggercfg_0_threshold_V_ce0 <= ap_const_logic_1;
        else 
            triggercfg_0_threshold_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    triggercfg_1_threshold_V_address0 <= zext_ln238_fu_889_p1(9 - 1 downto 0);

    triggercfg_1_threshold_V_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            triggercfg_1_threshold_V_ce0 <= ap_const_logic_1;
        else 
            triggercfg_1_threshold_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    triggercfg_2_threshold_V_address0 <= zext_ln238_fu_889_p1(9 - 1 downto 0);

    triggercfg_2_threshold_V_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            triggercfg_2_threshold_V_ce0 <= ap_const_logic_1;
        else 
            triggercfg_2_threshold_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    triggercfg_3_threshold_V_address0 <= zext_ln238_fu_889_p1(9 - 1 downto 0);

    triggercfg_3_threshold_V_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            triggercfg_3_threshold_V_ce0 <= ap_const_logic_1;
        else 
            triggercfg_3_threshold_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln851_fu_1061_p1 <= tmp_0_reg_598(15 - 1 downto 0);
    xor_ln850_1_fu_1146_p2 <= (ret_V_1_fu_1108_p3 xor and_ln850_1_fu_1140_p2);
    xor_ln850_fu_1102_p2 <= (ret_V_fu_1081_p3 xor and_ln850_fu_1097_p2);
    zext_ln209_fu_1051_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_peak_time_V_load_fu_1041_p4),64));
    zext_ln238_fu_889_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val_assign3_reg_535),64));
end behav;
