// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="photon_trigger,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.953000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.339000,HLS_SYN_LAT=10239,HLS_SYN_TPT=none,HLS_SYN_MEM=194,HLS_SYN_DSP=0,HLS_SYN_FF=10126,HLS_SYN_LUT=8798,HLS_VERSION=2019_2_1}" *)

module photon_trigger (
        ap_clk,
        ap_rst_n,
        streamin_TDATA,
        streamin_TVALID,
        streamin_TREADY,
        streamin_TLAST,
        events_out_V_din,
        events_out_V_full_n,
        events_out_V_write,
        timestamp_V,
        timestamp_V_ap_vld,
        timestamp_V_ap_ack,
        lane_V,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 21'd1;
parameter    ap_ST_fsm_state2 = 21'd2;
parameter    ap_ST_fsm_state3 = 21'd4;
parameter    ap_ST_fsm_state4 = 21'd8;
parameter    ap_ST_fsm_state5 = 21'd16;
parameter    ap_ST_fsm_state6 = 21'd32;
parameter    ap_ST_fsm_state7 = 21'd64;
parameter    ap_ST_fsm_state8 = 21'd128;
parameter    ap_ST_fsm_state9 = 21'd256;
parameter    ap_ST_fsm_state10 = 21'd512;
parameter    ap_ST_fsm_state11 = 21'd1024;
parameter    ap_ST_fsm_state12 = 21'd2048;
parameter    ap_ST_fsm_state13 = 21'd4096;
parameter    ap_ST_fsm_state14 = 21'd8192;
parameter    ap_ST_fsm_state15 = 21'd16384;
parameter    ap_ST_fsm_state16 = 21'd32768;
parameter    ap_ST_fsm_state17 = 21'd65536;
parameter    ap_ST_fsm_state18 = 21'd131072;
parameter    ap_ST_fsm_state19 = 21'd262144;
parameter    ap_ST_fsm_state20 = 21'd524288;
parameter    ap_ST_fsm_state21 = 21'd1048576;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 13;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [63:0] streamin_TDATA;
input   streamin_TVALID;
output   streamin_TREADY;
input   streamin_TLAST;
output  [111:0] events_out_V_din;
input   events_out_V_full_n;
output   events_out_V_write;
input  [63:0] timestamp_V;
input   timestamp_V_ap_vld;
output   timestamp_V_ap_ack;
input  [1:0] lane_V;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

reg streamin_TREADY;
reg events_out_V_write;
reg timestamp_V_ap_ack;

 reg    ap_rst_n_inv;
wire   [8:0] triggercfg_0_threshold_V_address0;
reg    triggercfg_0_threshold_V_ce0;
wire   [15:0] triggercfg_0_threshold_V_q0;
wire   [8:0] triggercfg_1_threshold_V_address0;
reg    triggercfg_1_threshold_V_ce0;
wire   [15:0] triggercfg_1_threshold_V_q0;
wire   [8:0] triggercfg_2_threshold_V_address0;
reg    triggercfg_2_threshold_V_ce0;
wire   [15:0] triggercfg_2_threshold_V_q0;
wire   [8:0] triggercfg_3_threshold_V_address0;
reg    triggercfg_3_threshold_V_ce0;
wire   [15:0] triggercfg_3_threshold_V_q0;
wire   [9:0] holdoff_V;
wire   [8:0] baseline_shrink_V;
wire   [8:0] baseline_grow_V;
wire   [31:0] dropped_i;
reg    dropped_o_ap_vld;
reg   [1:0] next_out_V;
reg    streamin_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
wire    ap_CS_fsm_state3;
reg    timestamp_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] ap_phi_mux_do_init_phi_fu_459_p6;
wire   [0:0] icmp_ln239_fu_803_p2;
reg   [0:0] icmp_ln239_reg_1161;
reg   [63:0] time_V_reg_1167;
reg    ap_block_state3;
wire    ap_CS_fsm_state11;
reg   [15:0] basedata_0_phase_V_reg_1192;
reg   [15:0] basedata_1_phase_V_reg_1197;
reg   [15:0] basedata_2_phase_V_reg_1202;
reg   [15:0] basedata_3_phase_V_reg_1207;
reg   [15:0] basedata_0_baseline_reg_1212;
reg   [15:0] basedata_1_baseline_reg_1217;
reg   [15:0] basedata_2_baseline_reg_1222;
reg   [15:0] basedata_3_baseline_reg_1227;
reg   [1:0] t_V_reg_1232;
wire    ap_CS_fsm_state17;
wire   [8:0] group_fu_987_p2;
reg   [8:0] group_reg_1238;
wire    ap_CS_fsm_state18;
wire   [15:0] event_phase_V_fu_1025_p1;
reg   [15:0] event_phase_V_reg_1283;
wire    ap_CS_fsm_state19;
reg   [15:0] event_baseline_V_reg_1288;
reg   [8:0] tmp_3_reg_1293;
wire   [0:0] ap_phi_mux_empty_n_phi_fu_609_p8;
wire   [63:0] event_time_V_fu_1073_p2;
reg   [63:0] event_time_V_reg_1298;
reg   [31:0] dropped_read_reg_1303;
wire   [31:0] add_ln262_fu_1105_p2;
reg   [31:0] add_ln262_reg_1308;
wire    ap_CS_fsm_state20;
wire    grp_update_baselines_fu_620_ap_start;
wire    grp_update_baselines_fu_620_ap_done;
wire    grp_update_baselines_fu_620_ap_idle;
wire    grp_update_baselines_fu_620_ap_ready;
wire   [15:0] grp_update_baselines_fu_620_phases_0_V_read;
wire   [15:0] grp_update_baselines_fu_620_phases_1_V_read;
wire   [15:0] grp_update_baselines_fu_620_phases_2_V_read;
wire   [15:0] grp_update_baselines_fu_620_phases_3_V_read;
wire   [8:0] grp_update_baselines_fu_620_grow_n_V;
wire   [8:0] grp_update_baselines_fu_620_shrink_n_V;
wire   [15:0] grp_update_baselines_fu_620_ap_return_0;
wire   [15:0] grp_update_baselines_fu_620_ap_return_1;
wire   [15:0] grp_update_baselines_fu_620_ap_return_2;
wire   [15:0] grp_update_baselines_fu_620_ap_return_3;
wire   [15:0] grp_update_baselines_fu_620_ap_return_4;
wire   [15:0] grp_update_baselines_fu_620_ap_return_5;
wire   [15:0] grp_update_baselines_fu_620_ap_return_6;
wire   [15:0] grp_update_baselines_fu_620_ap_return_7;
wire    grp_analyze_pulse_fu_698_ap_start;
wire    grp_analyze_pulse_fu_698_ap_done;
wire    grp_analyze_pulse_fu_698_ap_idle;
wire    grp_analyze_pulse_fu_698_ap_ready;
wire    grp_analyze_pulse_fu_698_trigdata_0_trigger_s;
wire    grp_analyze_pulse_fu_698_trigdata_1_trigger_s;
wire    grp_analyze_pulse_fu_698_trigdata_2_trigger_s;
wire    grp_analyze_pulse_fu_698_trigdata_3_trigger_s;
wire   [124:0] grp_analyze_pulse_fu_698_pulsedata_V_0_din;
wire    grp_analyze_pulse_fu_698_pulsedata_V_0_write;
wire   [124:0] grp_analyze_pulse_fu_698_pulsedata_V_1_din;
wire    grp_analyze_pulse_fu_698_pulsedata_V_1_write;
wire   [124:0] grp_analyze_pulse_fu_698_pulsedata_V_2_din;
wire    grp_analyze_pulse_fu_698_pulsedata_V_2_write;
wire   [124:0] grp_analyze_pulse_fu_698_pulsedata_V_3_din;
wire    grp_analyze_pulse_fu_698_pulsedata_V_3_write;
wire   [15:0] grp_update_triggers_fu_783_ap_return_0;
wire   [15:0] grp_update_triggers_fu_783_ap_return_1;
wire   [15:0] grp_update_triggers_fu_783_ap_return_2;
wire   [15:0] grp_update_triggers_fu_783_ap_return_3;
wire   [15:0] grp_update_triggers_fu_783_ap_return_4;
wire   [15:0] grp_update_triggers_fu_783_ap_return_5;
wire   [15:0] grp_update_triggers_fu_783_ap_return_6;
wire   [15:0] grp_update_triggers_fu_783_ap_return_7;
wire   [0:0] grp_update_triggers_fu_783_ap_return_8;
wire   [0:0] grp_update_triggers_fu_783_ap_return_9;
wire   [0:0] grp_update_triggers_fu_783_ap_return_10;
wire   [0:0] grp_update_triggers_fu_783_ap_return_11;
reg   [0:0] do_init_reg_454;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state21;
wire   [0:0] icmp_ln233_fu_1121_p2;
reg   [9:0] holdoff_V4_phi_reg_545;
reg   [9:0] holdoff_V4_rewind_reg_470;
reg   [8:0] baseline_shrink_V5_p_reg_557;
reg   [8:0] baseline_shrink_V5_r_reg_485;
reg   [8:0] baseline_grow_V6_phi_reg_569;
reg   [8:0] baseline_grow_V6_rew_reg_500;
reg   [1:0] lane_V7_phi_reg_581;
reg   [1:0] lane_V7_rewind_reg_515;
reg   [8:0] val_assign3_reg_530;
reg   [124:0] tmp_0_reg_593;
reg   [0:0] empty_n_reg_606;
reg    grp_update_baselines_fu_620_ap_start_reg;
reg   [20:0] ap_NS_fsm;
wire    ap_NS_fsm_state3;
wire   [8:0] select_ln239_fu_815_p3;
wire   [8:0] select_ln239_1_fu_823_p3;
reg    grp_analyze_pulse_fu_698_ap_start_reg;
wire    ap_CS_fsm_state12;
wire    ap_NS_fsm_state13;
wire    ap_CS_fsm_state13;
wire    pulsedata_V_0_full_n;
reg    pulsedata_V_0_write;
wire    ap_CS_fsm_state15;
wire    pulsedata_V_1_full_n;
reg    pulsedata_V_1_write;
wire    pulsedata_V_2_full_n;
reg    pulsedata_V_2_write;
wire    pulsedata_V_3_full_n;
reg    pulsedata_V_3_write;
wire   [63:0] zext_ln237_fu_883_p1;
wire   [1:0] add_ln700_fu_1110_p2;
reg   [8:0] p_076_03061_fu_312;
reg   [8:0] p_0218_03052_fu_316;
wire   [0:0] pulsedata_V_2_read_nbread_fu_358_p2_0;
wire   [124:0] pulsedata_V_2_dout;
wire    pulsedata_V_2_empty_n;
reg    pulsedata_V_2_read;
wire   [0:0] pulsedata_V_1_read_nbread_fu_364_p2_0;
wire   [124:0] pulsedata_V_1_dout;
wire    pulsedata_V_1_empty_n;
reg    pulsedata_V_1_read;
wire   [0:0] pulsedata_V_0_read_nbread_fu_370_p2_0;
wire   [124:0] pulsedata_V_0_dout;
wire    pulsedata_V_0_empty_n;
reg    pulsedata_V_0_read;
wire   [0:0] pulsedata_V_3_read_nbread_fu_376_p2_0;
wire   [124:0] pulsedata_V_3_dout;
wire    pulsedata_V_3_empty_n;
reg    pulsedata_V_3_read;
wire   [9:0] tmp_peak_time_V_load_fu_1039_p4;
wire   [63:0] tmp_start_V_load_new_fu_1029_p4;
wire   [63:0] zext_ln209_fu_1069_p1;
wire   [4:0] zext_ln214_fu_1079_p1;
wire   [0:0] xor_ln262_fu_1095_p0;
wire   [0:0] xor_ln262_fu_1095_p2;
wire   [31:0] zext_ln262_fu_1101_p1;
wire    regslice_both_streamin_data_V_U_apdone_blk;
wire   [63:0] streamin_TDATA_int;
wire    streamin_TVALID_int;
reg    streamin_TREADY_int;
wire    regslice_both_streamin_data_V_U_ack_in;
wire    regslice_both_w1_streamin_last_U_apdone_blk;
wire    streamin_TLAST_int;
wire    regslice_both_w1_streamin_last_U_vld_out;
wire    regslice_both_w1_streamin_last_U_ack_in;

// power-on initialization
initial begin
#0 next_out_V = 2'd0;
#0 ap_CS_fsm = 21'd1;
#0 grp_update_baselines_fu_620_ap_start_reg = 1'b0;
#0 grp_analyze_pulse_fu_698_ap_start_reg = 1'b0;
end

photon_trigger_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
photon_trigger_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .triggercfg_0_threshold_V_address0(triggercfg_0_threshold_V_address0),
    .triggercfg_0_threshold_V_ce0(triggercfg_0_threshold_V_ce0),
    .triggercfg_0_threshold_V_q0(triggercfg_0_threshold_V_q0),
    .triggercfg_1_threshold_V_address0(triggercfg_1_threshold_V_address0),
    .triggercfg_1_threshold_V_ce0(triggercfg_1_threshold_V_ce0),
    .triggercfg_1_threshold_V_q0(triggercfg_1_threshold_V_q0),
    .triggercfg_2_threshold_V_address0(triggercfg_2_threshold_V_address0),
    .triggercfg_2_threshold_V_ce0(triggercfg_2_threshold_V_ce0),
    .triggercfg_2_threshold_V_q0(triggercfg_2_threshold_V_q0),
    .triggercfg_3_threshold_V_address0(triggercfg_3_threshold_V_address0),
    .triggercfg_3_threshold_V_ce0(triggercfg_3_threshold_V_ce0),
    .triggercfg_3_threshold_V_q0(triggercfg_3_threshold_V_q0),
    .holdoff_V(holdoff_V),
    .baseline_shrink_V(baseline_shrink_V),
    .baseline_grow_V(baseline_grow_V),
    .dropped_o(add_ln262_reg_1308),
    .dropped_o_ap_vld(dropped_o_ap_vld),
    .dropped_i(dropped_i)
);

update_baselines grp_update_baselines_fu_620(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_update_baselines_fu_620_ap_start),
    .ap_done(grp_update_baselines_fu_620_ap_done),
    .ap_idle(grp_update_baselines_fu_620_ap_idle),
    .ap_ready(grp_update_baselines_fu_620_ap_ready),
    .group_V(val_assign3_reg_530),
    .phases_0_V_read(grp_update_baselines_fu_620_phases_0_V_read),
    .phases_1_V_read(grp_update_baselines_fu_620_phases_1_V_read),
    .phases_2_V_read(grp_update_baselines_fu_620_phases_2_V_read),
    .phases_3_V_read(grp_update_baselines_fu_620_phases_3_V_read),
    .grow_n_V(grp_update_baselines_fu_620_grow_n_V),
    .shrink_n_V(grp_update_baselines_fu_620_shrink_n_V),
    .ap_return_0(grp_update_baselines_fu_620_ap_return_0),
    .ap_return_1(grp_update_baselines_fu_620_ap_return_1),
    .ap_return_2(grp_update_baselines_fu_620_ap_return_2),
    .ap_return_3(grp_update_baselines_fu_620_ap_return_3),
    .ap_return_4(grp_update_baselines_fu_620_ap_return_4),
    .ap_return_5(grp_update_baselines_fu_620_ap_return_5),
    .ap_return_6(grp_update_baselines_fu_620_ap_return_6),
    .ap_return_7(grp_update_baselines_fu_620_ap_return_7)
);

analyze_pulse grp_analyze_pulse_fu_698(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_analyze_pulse_fu_698_ap_start),
    .ap_done(grp_analyze_pulse_fu_698_ap_done),
    .ap_idle(grp_analyze_pulse_fu_698_ap_idle),
    .ap_ready(grp_analyze_pulse_fu_698_ap_ready),
    .group_V(val_assign3_reg_530),
    .trigdata_0_phase_V_s(grp_update_triggers_fu_783_ap_return_0),
    .trigdata_1_phase_V_s(grp_update_triggers_fu_783_ap_return_1),
    .trigdata_2_phase_V_s(grp_update_triggers_fu_783_ap_return_2),
    .trigdata_3_phase_V_s(grp_update_triggers_fu_783_ap_return_3),
    .trigdata_0_baseline(grp_update_triggers_fu_783_ap_return_4),
    .trigdata_1_baseline(grp_update_triggers_fu_783_ap_return_5),
    .trigdata_2_baseline(grp_update_triggers_fu_783_ap_return_6),
    .trigdata_3_baseline(grp_update_triggers_fu_783_ap_return_7),
    .trigdata_0_trigger_s(grp_analyze_pulse_fu_698_trigdata_0_trigger_s),
    .trigdata_1_trigger_s(grp_analyze_pulse_fu_698_trigdata_1_trigger_s),
    .trigdata_2_trigger_s(grp_analyze_pulse_fu_698_trigdata_2_trigger_s),
    .trigdata_3_trigger_s(grp_analyze_pulse_fu_698_trigdata_3_trigger_s),
    .holdoff_V(holdoff_V4_phi_reg_545),
    .timestamp_V(time_V_reg_1167),
    .pulsedata_V_0_din(grp_analyze_pulse_fu_698_pulsedata_V_0_din),
    .pulsedata_V_0_full_n(pulsedata_V_0_full_n),
    .pulsedata_V_0_write(grp_analyze_pulse_fu_698_pulsedata_V_0_write),
    .pulsedata_V_1_din(grp_analyze_pulse_fu_698_pulsedata_V_1_din),
    .pulsedata_V_1_full_n(pulsedata_V_1_full_n),
    .pulsedata_V_1_write(grp_analyze_pulse_fu_698_pulsedata_V_1_write),
    .pulsedata_V_2_din(grp_analyze_pulse_fu_698_pulsedata_V_2_din),
    .pulsedata_V_2_full_n(pulsedata_V_2_full_n),
    .pulsedata_V_2_write(grp_analyze_pulse_fu_698_pulsedata_V_2_write),
    .pulsedata_V_3_din(grp_analyze_pulse_fu_698_pulsedata_V_3_din),
    .pulsedata_V_3_full_n(pulsedata_V_3_full_n),
    .pulsedata_V_3_write(grp_analyze_pulse_fu_698_pulsedata_V_3_write)
);

update_triggers grp_update_triggers_fu_783(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_0_phase_V_read(basedata_0_phase_V_reg_1192),
    .data_1_phase_V_read(basedata_1_phase_V_reg_1197),
    .data_2_phase_V_read(basedata_2_phase_V_reg_1202),
    .data_3_phase_V_read(basedata_3_phase_V_reg_1207),
    .data_0_baseline_V_r(basedata_0_baseline_reg_1212),
    .data_1_baseline_V_r(basedata_1_baseline_reg_1217),
    .data_2_baseline_V_r(basedata_2_baseline_reg_1222),
    .data_3_baseline_V_r(basedata_3_baseline_reg_1227),
    .trig_cfg_0_threshol(triggercfg_0_threshold_V_q0),
    .trig_cfg_1_threshol(triggercfg_1_threshold_V_q0),
    .trig_cfg_2_threshol(triggercfg_2_threshold_V_q0),
    .trig_cfg_3_threshol(triggercfg_3_threshold_V_q0),
    .ap_return_0(grp_update_triggers_fu_783_ap_return_0),
    .ap_return_1(grp_update_triggers_fu_783_ap_return_1),
    .ap_return_2(grp_update_triggers_fu_783_ap_return_2),
    .ap_return_3(grp_update_triggers_fu_783_ap_return_3),
    .ap_return_4(grp_update_triggers_fu_783_ap_return_4),
    .ap_return_5(grp_update_triggers_fu_783_ap_return_5),
    .ap_return_6(grp_update_triggers_fu_783_ap_return_6),
    .ap_return_7(grp_update_triggers_fu_783_ap_return_7),
    .ap_return_8(grp_update_triggers_fu_783_ap_return_8),
    .ap_return_9(grp_update_triggers_fu_783_ap_return_9),
    .ap_return_10(grp_update_triggers_fu_783_ap_return_10),
    .ap_return_11(grp_update_triggers_fu_783_ap_return_11)
);

fifo_w125_d64_A pulsedata_V_0_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_analyze_pulse_fu_698_pulsedata_V_0_din),
    .if_full_n(pulsedata_V_0_full_n),
    .if_write(pulsedata_V_0_write),
    .if_dout(pulsedata_V_0_dout),
    .if_empty_n(pulsedata_V_0_empty_n),
    .if_read(pulsedata_V_0_read)
);

fifo_w125_d64_A pulsedata_V_1_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_analyze_pulse_fu_698_pulsedata_V_1_din),
    .if_full_n(pulsedata_V_1_full_n),
    .if_write(pulsedata_V_1_write),
    .if_dout(pulsedata_V_1_dout),
    .if_empty_n(pulsedata_V_1_empty_n),
    .if_read(pulsedata_V_1_read)
);

fifo_w125_d64_A pulsedata_V_2_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_analyze_pulse_fu_698_pulsedata_V_2_din),
    .if_full_n(pulsedata_V_2_full_n),
    .if_write(pulsedata_V_2_write),
    .if_dout(pulsedata_V_2_dout),
    .if_empty_n(pulsedata_V_2_empty_n),
    .if_read(pulsedata_V_2_read)
);

fifo_w125_d64_A pulsedata_V_3_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_analyze_pulse_fu_698_pulsedata_V_3_din),
    .if_full_n(pulsedata_V_3_full_n),
    .if_write(pulsedata_V_3_write),
    .if_dout(pulsedata_V_3_dout),
    .if_empty_n(pulsedata_V_3_empty_n),
    .if_read(pulsedata_V_3_read)
);

regslice_both #(
    .DataWidth( 64 ))
regslice_both_streamin_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(streamin_TDATA),
    .vld_in(streamin_TVALID),
    .ack_in(regslice_both_streamin_data_V_U_ack_in),
    .data_out(streamin_TDATA_int),
    .vld_out(streamin_TVALID_int),
    .ack_out(streamin_TREADY_int),
    .apdone_blk(regslice_both_streamin_data_V_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_streamin_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(streamin_TLAST),
    .vld_in(streamin_TVALID),
    .ack_in(regslice_both_w1_streamin_last_U_ack_in),
    .data_out(streamin_TLAST_int),
    .vld_out(regslice_both_w1_streamin_last_U_vld_out),
    .ack_out(streamin_TREADY_int),
    .apdone_blk(regslice_both_w1_streamin_last_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_analyze_pulse_fu_698_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state13) & (1'b1 == ap_CS_fsm_state12))) begin
            grp_analyze_pulse_fu_698_ap_start_reg <= 1'b1;
        end else if ((grp_analyze_pulse_fu_698_ap_ready == 1'b1)) begin
            grp_analyze_pulse_fu_698_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_update_baselines_fu_620_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state3) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_update_baselines_fu_620_ap_start_reg <= 1'b1;
        end else if ((grp_update_baselines_fu_620_ap_ready == 1'b1)) begin
            grp_update_baselines_fu_620_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if ((ap_phi_mux_do_init_phi_fu_459_p6 == 1'd0)) begin
            baseline_grow_V6_phi_reg_569 <= baseline_grow_V6_rew_reg_500;
        end else if ((ap_phi_mux_do_init_phi_fu_459_p6 == 1'd1)) begin
            baseline_grow_V6_phi_reg_569 <= baseline_grow_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if ((ap_phi_mux_do_init_phi_fu_459_p6 == 1'd0)) begin
            baseline_shrink_V5_p_reg_557 <= baseline_shrink_V5_r_reg_485;
        end else if ((ap_phi_mux_do_init_phi_fu_459_p6 == 1'd1)) begin
            baseline_shrink_V5_p_reg_557 <= baseline_shrink_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln233_fu_1121_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        do_init_reg_454 <= 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state1) | ((1'b1 == ap_CS_fsm_state21) & (icmp_ln233_fu_1121_p2 == 1'd1)))) begin
        do_init_reg_454 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        if ((t_V_reg_1232 == 2'd0)) begin
            empty_n_reg_606 <= pulsedata_V_0_read_nbread_fu_370_p2_0;
        end else if ((t_V_reg_1232 == 2'd1)) begin
            empty_n_reg_606 <= pulsedata_V_1_read_nbread_fu_364_p2_0;
        end else if ((t_V_reg_1232 == 2'd2)) begin
            empty_n_reg_606 <= pulsedata_V_2_read_nbread_fu_358_p2_0;
        end else if ((t_V_reg_1232 == 2'd3)) begin
            empty_n_reg_606 <= pulsedata_V_3_read_nbread_fu_376_p2_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if ((ap_phi_mux_do_init_phi_fu_459_p6 == 1'd0)) begin
            holdoff_V4_phi_reg_545 <= holdoff_V4_rewind_reg_470;
        end else if ((ap_phi_mux_do_init_phi_fu_459_p6 == 1'd1)) begin
            holdoff_V4_phi_reg_545 <= holdoff_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if ((ap_phi_mux_do_init_phi_fu_459_p6 == 1'd0)) begin
            lane_V7_phi_reg_581 <= lane_V7_rewind_reg_515;
        end else if ((ap_phi_mux_do_init_phi_fu_459_p6 == 1'd1)) begin
            lane_V7_phi_reg_581 <= lane_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        if ((t_V_reg_1232 == 2'd0)) begin
            tmp_0_reg_593 <= pulsedata_V_0_dout;
        end else if ((t_V_reg_1232 == 2'd1)) begin
            tmp_0_reg_593 <= pulsedata_V_1_dout;
        end else if ((t_V_reg_1232 == 2'd2)) begin
            tmp_0_reg_593 <= pulsedata_V_2_dout;
        end else if ((t_V_reg_1232 == 2'd3)) begin
            tmp_0_reg_593 <= pulsedata_V_3_dout;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln233_fu_1121_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        val_assign3_reg_530 <= group_reg_1238;
    end else if (((1'b1 == ap_CS_fsm_state1) | ((1'b1 == ap_CS_fsm_state21) & (icmp_ln233_fu_1121_p2 == 1'd1)))) begin
        val_assign3_reg_530 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        add_ln262_reg_1308 <= add_ln262_fu_1105_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        basedata_0_baseline_reg_1212 <= grp_update_baselines_fu_620_ap_return_4;
        basedata_0_phase_V_reg_1192 <= grp_update_baselines_fu_620_ap_return_0;
        basedata_1_baseline_reg_1217 <= grp_update_baselines_fu_620_ap_return_5;
        basedata_1_phase_V_reg_1197 <= grp_update_baselines_fu_620_ap_return_1;
        basedata_2_baseline_reg_1222 <= grp_update_baselines_fu_620_ap_return_6;
        basedata_2_phase_V_reg_1202 <= grp_update_baselines_fu_620_ap_return_2;
        basedata_3_baseline_reg_1227 <= grp_update_baselines_fu_620_ap_return_7;
        basedata_3_phase_V_reg_1207 <= grp_update_baselines_fu_620_ap_return_3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln233_fu_1121_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        baseline_grow_V6_rew_reg_500 <= baseline_grow_V6_phi_reg_569;
        baseline_shrink_V5_r_reg_485 <= baseline_shrink_V5_p_reg_557;
        holdoff_V4_rewind_reg_470 <= holdoff_V4_phi_reg_545;
        lane_V7_rewind_reg_515 <= lane_V7_phi_reg_581;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (ap_phi_mux_empty_n_phi_fu_609_p8 == 1'd1))) begin
        dropped_read_reg_1303 <= dropped_i;
        event_time_V_reg_1298 <= event_time_V_fu_1073_p2;
        tmp_3_reg_1293 <= {{tmp_0_reg_593[24:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        event_baseline_V_reg_1288 <= {{tmp_0_reg_593[124:109]}};
        event_phase_V_reg_1283 <= event_phase_V_fu_1025_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        group_reg_1238 <= group_fu_987_p2;
        t_V_reg_1232 <= next_out_V;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln239_reg_1161 <= icmp_ln239_fu_803_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        next_out_V <= add_ln700_fu_1110_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((timestamp_V_ap_vld == 1'b0) | (streamin_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        p_0218_03052_fu_316 <= select_ln239_1_fu_823_p3;
        p_076_03061_fu_312 <= select_ln239_fu_815_p3;
        time_V_reg_1167 <= timestamp_V;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) & (empty_n_reg_606 == 1'd1))) begin
        dropped_o_ap_vld = 1'b1;
    end else begin
        dropped_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((events_out_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
        events_out_V_write = 1'b1;
    end else begin
        events_out_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((t_V_reg_1232 == 2'd0) & (pulsedata_V_0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        pulsedata_V_0_read = 1'b1;
    end else begin
        pulsedata_V_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        pulsedata_V_0_write = grp_analyze_pulse_fu_698_pulsedata_V_0_write;
    end else begin
        pulsedata_V_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((pulsedata_V_1_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state18) & (t_V_reg_1232 == 2'd1))) begin
        pulsedata_V_1_read = 1'b1;
    end else begin
        pulsedata_V_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        pulsedata_V_1_write = grp_analyze_pulse_fu_698_pulsedata_V_1_write;
    end else begin
        pulsedata_V_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((pulsedata_V_2_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state18) & (t_V_reg_1232 == 2'd2))) begin
        pulsedata_V_2_read = 1'b1;
    end else begin
        pulsedata_V_2_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        pulsedata_V_2_write = grp_analyze_pulse_fu_698_pulsedata_V_2_write;
    end else begin
        pulsedata_V_2_write = 1'b0;
    end
end

always @ (*) begin
    if (((pulsedata_V_3_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state18) & (t_V_reg_1232 == 2'd3))) begin
        pulsedata_V_3_read = 1'b1;
    end else begin
        pulsedata_V_3_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        pulsedata_V_3_write = grp_analyze_pulse_fu_698_pulsedata_V_3_write;
    end else begin
        pulsedata_V_3_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        streamin_TDATA_blk_n = streamin_TVALID_int;
    end else begin
        streamin_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((streamin_TVALID == 1'b1) & (regslice_both_streamin_data_V_U_ack_in == 1'b1))) begin
        streamin_TREADY = 1'b1;
    end else begin
        streamin_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((timestamp_V_ap_vld == 1'b0) | (streamin_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        streamin_TREADY_int = 1'b1;
    end else begin
        streamin_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((~((timestamp_V_ap_vld == 1'b0) | (streamin_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        timestamp_V_ap_ack = 1'b1;
    end else begin
        timestamp_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        timestamp_V_blk_n = timestamp_V_ap_vld;
    end else begin
        timestamp_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        triggercfg_0_threshold_V_ce0 = 1'b1;
    end else begin
        triggercfg_0_threshold_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        triggercfg_1_threshold_V_ce0 = 1'b1;
    end else begin
        triggercfg_1_threshold_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        triggercfg_2_threshold_V_ce0 = 1'b1;
    end else begin
        triggercfg_2_threshold_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        triggercfg_3_threshold_V_ce0 = 1'b1;
    end else begin
        triggercfg_3_threshold_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if ((~((timestamp_V_ap_vld == 1'b0) | (streamin_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((ap_phi_mux_empty_n_phi_fu_609_p8 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (icmp_ln233_fu_1121_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln262_fu_1105_p2 = (dropped_read_reg_1303 + zext_ln262_fu_1101_p1);

assign add_ln700_fu_1110_p2 = (t_V_reg_1232 + 2'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_NS_fsm_state13 = ap_NS_fsm[32'd12];

assign ap_NS_fsm_state3 = ap_NS_fsm[32'd2];

always @ (*) begin
    ap_block_state3 = ((timestamp_V_ap_vld == 1'b0) | (streamin_TVALID_int == 1'b0));
end

assign ap_phi_mux_do_init_phi_fu_459_p6 = do_init_reg_454;

assign ap_phi_mux_empty_n_phi_fu_609_p8 = empty_n_reg_606;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign event_phase_V_fu_1025_p1 = tmp_0_reg_593[15:0];

assign event_time_V_fu_1073_p2 = (tmp_start_V_load_new_fu_1029_p4 + zext_ln209_fu_1069_p1);

assign events_out_V_din = {{{{{{event_baseline_V_reg_1288}, {zext_ln214_fu_1079_p1}}, {tmp_3_reg_1293}}, {t_V_reg_1232}}, {event_phase_V_reg_1283}}, {event_time_V_reg_1298}};

assign group_fu_987_p2 = (9'd1 + val_assign3_reg_530);

assign grp_analyze_pulse_fu_698_ap_start = grp_analyze_pulse_fu_698_ap_start_reg;

assign grp_analyze_pulse_fu_698_trigdata_0_trigger_s = grp_update_triggers_fu_783_ap_return_8;

assign grp_analyze_pulse_fu_698_trigdata_1_trigger_s = grp_update_triggers_fu_783_ap_return_9;

assign grp_analyze_pulse_fu_698_trigdata_2_trigger_s = grp_update_triggers_fu_783_ap_return_10;

assign grp_analyze_pulse_fu_698_trigdata_3_trigger_s = grp_update_triggers_fu_783_ap_return_11;

assign grp_update_baselines_fu_620_ap_start = grp_update_baselines_fu_620_ap_start_reg;

assign grp_update_baselines_fu_620_grow_n_V = ((icmp_ln239_reg_1161[0:0] === 1'b1) ? baseline_grow_V6_phi_reg_569 : p_076_03061_fu_312);

assign grp_update_baselines_fu_620_phases_0_V_read = streamin_TDATA_int[15:0];

assign grp_update_baselines_fu_620_phases_1_V_read = {{streamin_TDATA_int[31:16]}};

assign grp_update_baselines_fu_620_phases_2_V_read = {{streamin_TDATA_int[47:32]}};

assign grp_update_baselines_fu_620_phases_3_V_read = {{streamin_TDATA_int[63:48]}};

assign grp_update_baselines_fu_620_shrink_n_V = ((icmp_ln239_reg_1161[0:0] === 1'b1) ? baseline_shrink_V5_p_reg_557 : p_0218_03052_fu_316);

assign icmp_ln233_fu_1121_p2 = ((val_assign3_reg_530 == 9'd511) ? 1'b1 : 1'b0);

assign icmp_ln239_fu_803_p2 = ((val_assign3_reg_530 == 9'd0) ? 1'b1 : 1'b0);

assign pulsedata_V_0_read_nbread_fu_370_p2_0 = pulsedata_V_0_empty_n;

assign pulsedata_V_1_read_nbread_fu_364_p2_0 = pulsedata_V_1_empty_n;

assign pulsedata_V_2_read_nbread_fu_358_p2_0 = pulsedata_V_2_empty_n;

assign pulsedata_V_3_read_nbread_fu_376_p2_0 = pulsedata_V_3_empty_n;

assign select_ln239_1_fu_823_p3 = ((icmp_ln239_reg_1161[0:0] === 1'b1) ? baseline_shrink_V5_p_reg_557 : p_0218_03052_fu_316);

assign select_ln239_fu_815_p3 = ((icmp_ln239_reg_1161[0:0] === 1'b1) ? baseline_grow_V6_phi_reg_569 : p_076_03061_fu_312);

assign tmp_peak_time_V_load_fu_1039_p4 = {{tmp_0_reg_593[98:89]}};

assign tmp_start_V_load_new_fu_1029_p4 = {{tmp_0_reg_593[88:25]}};

assign triggercfg_0_threshold_V_address0 = zext_ln237_fu_883_p1;

assign triggercfg_1_threshold_V_address0 = zext_ln237_fu_883_p1;

assign triggercfg_2_threshold_V_address0 = zext_ln237_fu_883_p1;

assign triggercfg_3_threshold_V_address0 = zext_ln237_fu_883_p1;

assign xor_ln262_fu_1095_p0 = events_out_V_full_n;

assign xor_ln262_fu_1095_p2 = (xor_ln262_fu_1095_p0 ^ 1'd1);

assign zext_ln209_fu_1069_p1 = tmp_peak_time_V_load_fu_1039_p4;

assign zext_ln214_fu_1079_p1 = lane_V7_phi_reg_581;

assign zext_ln237_fu_883_p1 = val_assign3_reg_530;

assign zext_ln262_fu_1101_p1 = xor_ln262_fu_1095_p2;

endmodule //photon_trigger
