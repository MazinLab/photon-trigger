-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity trigger is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 13;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_CONTROL_R_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_R_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    instream_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    instream_TVALID : IN STD_LOGIC;
    instream_TREADY : OUT STD_LOGIC;
    instream_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    instream_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    instream_TUSER : IN STD_LOGIC_VECTOR (8 downto 0);
    instream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    outstream_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    outstream_TVALID : OUT STD_LOGIC;
    outstream_TREADY : IN STD_LOGIC;
    outstream_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    outstream_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    outstream_TUSER : OUT STD_LOGIC_VECTOR (12 downto 0);
    outstream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_r_AWVALID : IN STD_LOGIC;
    s_axi_control_r_AWREADY : OUT STD_LOGIC;
    s_axi_control_r_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_ADDR_WIDTH-1 downto 0);
    s_axi_control_r_WVALID : IN STD_LOGIC;
    s_axi_control_r_WREADY : OUT STD_LOGIC;
    s_axi_control_r_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH-1 downto 0);
    s_axi_control_r_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH/8-1 downto 0);
    s_axi_control_r_ARVALID : IN STD_LOGIC;
    s_axi_control_r_ARREADY : OUT STD_LOGIC;
    s_axi_control_r_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_ADDR_WIDTH-1 downto 0);
    s_axi_control_r_RVALID : OUT STD_LOGIC;
    s_axi_control_r_RREADY : IN STD_LOGIC;
    s_axi_control_r_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH-1 downto 0);
    s_axi_control_r_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_r_BVALID : OUT STD_LOGIC;
    s_axi_control_r_BREADY : IN STD_LOGIC;
    s_axi_control_r_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of trigger is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "trigger_trigger,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.237000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=620,HLS_SYN_LUT=711,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal thresholds_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal thresholds_ce0 : STD_LOGIC;
    signal thresholds_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal holdoff : STD_LOGIC_VECTOR (15 downto 0);
    signal previous_cache_data_since_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal previous_cache_data_phase_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal previous_cache_data_since_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal previous_cache_data_phase_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal previous_cache_data_since_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal previous_cache_data_phase_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal previous_cache_data_since_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal previous_cache_data_phase_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal previous_data_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal previous_data_ce0 : STD_LOGIC;
    signal previous_data_we0 : STD_LOGIC;
    signal previous_data_d0 : STD_LOGIC_VECTOR (127 downto 0);
    signal previous_data_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal previous_data_ce1 : STD_LOGIC;
    signal previous_data_q1 : STD_LOGIC_VECTOR (127 downto 0);
    signal instream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal outstream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal holdoff_read_reg_714 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_nbreadreq_fu_152_p7 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_726 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_7_reg_726_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_reg_732 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_732_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal phase_fu_259_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal phase_reg_747 : STD_LOGIC_VECTOR (15 downto 0);
    signal phase_1_reg_753 : STD_LOGIC_VECTOR (15 downto 0);
    signal phase_2_reg_759 : STD_LOGIC_VECTOR (15 downto 0);
    signal phase_3_reg_765 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln223_fu_293_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln223_reg_771 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal previous_fu_298_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal previous_reg_776 : STD_LOGIC_VECTOR (15 downto 0);
    signal previous_7_reg_783 : STD_LOGIC_VECTOR (15 downto 0);
    signal previous_2_reg_790 : STD_LOGIC_VECTOR (15 downto 0);
    signal previous_1_reg_797 : STD_LOGIC_VECTOR (15 downto 0);
    signal previous_4_reg_804 : STD_LOGIC_VECTOR (15 downto 0);
    signal previous_3_reg_811 : STD_LOGIC_VECTOR (15 downto 0);
    signal previous_6_reg_818 : STD_LOGIC_VECTOR (15 downto 0);
    signal previous_5_reg_825 : STD_LOGIC_VECTOR (15 downto 0);
    signal thresh_fu_372_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal thresh_reg_832 : STD_LOGIC_VECTOR (15 downto 0);
    signal thresh_1_reg_837 : STD_LOGIC_VECTOR (15 downto 0);
    signal thresh_2_reg_842 : STD_LOGIC_VECTOR (15 downto 0);
    signal thresh_3_reg_847 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_856 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_1_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_1_reg_861 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_2_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_2_reg_866 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_871 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_3_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_3_reg_876 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_4_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_4_reg_881 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_5_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_5_reg_886 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_1_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_1_reg_891 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_6_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_6_reg_896 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_7_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_7_reg_901 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_8_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_8_reg_906 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_2_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_2_reg_911 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_9_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_9_reg_916 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_10_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_10_reg_921 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_11_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_11_reg_926 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_3_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_3_reg_931 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln573_fu_253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln573_1_fu_406_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal previous_10_fu_585_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal previous_13_fu_613_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal previous_16_fu_641_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal previous_19_fu_669_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal and_ln65_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln79_fu_573_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln65_1_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal previous_9_fu_578_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln65_2_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln79_1_fu_601_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln65_3_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal previous_12_fu_606_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln65_4_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln79_2_fu_629_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln65_5_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal previous_15_fu_634_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln65_6_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln79_3_fu_657_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln65_7_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal previous_18_fu_662_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal regslice_both_outstream_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_41 : BOOLEAN;
    signal ap_enable_state2_pp0_iter0_stage0 : BOOLEAN;
    signal ap_enable_operation_48 : BOOLEAN;
    signal ap_enable_state3_pp0_iter0_stage1 : BOOLEAN;
    signal ap_enable_operation_74 : BOOLEAN;
    signal ap_enable_state4_pp0_iter1_stage0 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal outstream_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal outstream_TVALID_int_regslice : STD_LOGIC;
    signal outstream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_outstream_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_outstream_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_outstream_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_outstream_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_outstream_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_outstream_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_outstream_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_outstream_V_user_V_U_apdone_blk : STD_LOGIC;
    signal outstream_TUSER_int_regslice : STD_LOGIC_VECTOR (12 downto 0);
    signal regslice_both_outstream_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_outstream_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_outstream_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_outstream_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_outstream_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component trigger_previous_data IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (127 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component trigger_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        holdoff : OUT STD_LOGIC_VECTOR (15 downto 0);
        thresholds_address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        thresholds_ce0 : IN STD_LOGIC;
        thresholds_q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component trigger_control_r_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component trigger_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    previous_data_U : component trigger_previous_data
    generic map (
        DataWidth => 128,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => previous_data_address0,
        ce0 => previous_data_ce0,
        we0 => previous_data_we0,
        d0 => previous_data_d0,
        address1 => previous_data_address1,
        ce1 => previous_data_ce1,
        q1 => previous_data_q1);

    control_s_axi_U : component trigger_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        holdoff => holdoff,
        thresholds_address0 => thresholds_address0,
        thresholds_ce0 => thresholds_ce0,
        thresholds_q0 => thresholds_q0);

    control_r_s_axi_U : component trigger_control_r_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_R_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_R_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_r_AWVALID,
        AWREADY => s_axi_control_r_AWREADY,
        AWADDR => s_axi_control_r_AWADDR,
        WVALID => s_axi_control_r_WVALID,
        WREADY => s_axi_control_r_WREADY,
        WDATA => s_axi_control_r_WDATA,
        WSTRB => s_axi_control_r_WSTRB,
        ARVALID => s_axi_control_r_ARVALID,
        ARREADY => s_axi_control_r_ARREADY,
        ARADDR => s_axi_control_r_ARADDR,
        RVALID => s_axi_control_r_RVALID,
        RREADY => s_axi_control_r_RREADY,
        RDATA => s_axi_control_r_RDATA,
        RRESP => s_axi_control_r_RRESP,
        BVALID => s_axi_control_r_BVALID,
        BREADY => s_axi_control_r_BREADY,
        BRESP => s_axi_control_r_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    regslice_both_outstream_V_data_V_U : component trigger_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => outstream_TDATA_int_regslice,
        vld_in => outstream_TVALID_int_regslice,
        ack_in => outstream_TREADY_int_regslice,
        data_out => outstream_TDATA,
        vld_out => regslice_both_outstream_V_data_V_U_vld_out,
        ack_out => outstream_TREADY,
        apdone_blk => regslice_both_outstream_V_data_V_U_apdone_blk);

    regslice_both_outstream_V_keep_V_U : component trigger_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv8_0,
        vld_in => outstream_TVALID_int_regslice,
        ack_in => regslice_both_outstream_V_keep_V_U_ack_in_dummy,
        data_out => outstream_TKEEP,
        vld_out => regslice_both_outstream_V_keep_V_U_vld_out,
        ack_out => outstream_TREADY,
        apdone_blk => regslice_both_outstream_V_keep_V_U_apdone_blk);

    regslice_both_outstream_V_strb_V_U : component trigger_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv8_0,
        vld_in => outstream_TVALID_int_regslice,
        ack_in => regslice_both_outstream_V_strb_V_U_ack_in_dummy,
        data_out => outstream_TSTRB,
        vld_out => regslice_both_outstream_V_strb_V_U_vld_out,
        ack_out => outstream_TREADY,
        apdone_blk => regslice_both_outstream_V_strb_V_U_apdone_blk);

    regslice_both_outstream_V_user_V_U : component trigger_regslice_both
    generic map (
        DataWidth => 13)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => outstream_TUSER_int_regslice,
        vld_in => outstream_TVALID_int_regslice,
        ack_in => regslice_both_outstream_V_user_V_U_ack_in_dummy,
        data_out => outstream_TUSER,
        vld_out => regslice_both_outstream_V_user_V_U_vld_out,
        ack_out => outstream_TREADY,
        apdone_blk => regslice_both_outstream_V_user_V_U_apdone_blk);

    regslice_both_outstream_V_last_V_U : component trigger_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_3_reg_732_pp0_iter1_reg,
        vld_in => outstream_TVALID_int_regslice,
        ack_in => regslice_both_outstream_V_last_V_U_ack_in_dummy,
        data_out => outstream_TLAST,
        vld_out => regslice_both_outstream_V_last_V_U_vld_out,
        ack_out => outstream_TREADY,
        apdone_blk => regslice_both_outstream_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (grp_nbreadreq_fu_152_p7 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (grp_nbreadreq_fu_152_p7 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln223_reg_771 <= add_ln223_fu_293_p2;
                previous_1_reg_797 <= previous_data_q1(63 downto 48);
                previous_2_reg_790 <= previous_data_q1(47 downto 32);
                previous_3_reg_811 <= previous_data_q1(95 downto 80);
                previous_4_reg_804 <= previous_data_q1(79 downto 64);
                previous_5_reg_825 <= previous_data_q1(127 downto 112);
                previous_6_reg_818 <= previous_data_q1(111 downto 96);
                previous_7_reg_783 <= previous_data_q1(31 downto 16);
                previous_reg_776 <= previous_fu_298_p1;
                thresh_1_reg_837 <= thresholds_q0(31 downto 16);
                thresh_2_reg_842 <= thresholds_q0(47 downto 32);
                thresh_3_reg_847 <= thresholds_q0(63 downto 48);
                thresh_reg_832 <= thresh_fu_372_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                holdoff_read_reg_714 <= holdoff;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln65_10_reg_921 <= icmp_ln65_10_fu_521_p2;
                icmp_ln65_11_reg_926 <= icmp_ln65_11_fu_525_p2;
                icmp_ln65_1_reg_861 <= icmp_ln65_1_fu_467_p2;
                icmp_ln65_2_reg_866 <= icmp_ln65_2_fu_471_p2;
                icmp_ln65_3_reg_876 <= icmp_ln65_3_fu_481_p2;
                icmp_ln65_4_reg_881 <= icmp_ln65_4_fu_485_p2;
                icmp_ln65_5_reg_886 <= icmp_ln65_5_fu_489_p2;
                icmp_ln65_6_reg_896 <= icmp_ln65_6_fu_499_p2;
                icmp_ln65_7_reg_901 <= icmp_ln65_7_fu_503_p2;
                icmp_ln65_8_reg_906 <= icmp_ln65_8_fu_507_p2;
                icmp_ln65_9_reg_916 <= icmp_ln65_9_fu_517_p2;
                icmp_ln65_reg_856 <= icmp_ln65_fu_463_p2;
                icmp_ln78_1_reg_891 <= icmp_ln78_1_fu_494_p2;
                icmp_ln78_2_reg_911 <= icmp_ln78_2_fu_512_p2;
                icmp_ln78_3_reg_931 <= icmp_ln78_3_fu_530_p2;
                icmp_ln78_reg_871 <= icmp_ln78_fu_476_p2;
                phase_1_reg_753 <= instream_TDATA(31 downto 16);
                phase_2_reg_759 <= instream_TDATA(47 downto 32);
                phase_3_reg_765 <= instream_TDATA(63 downto 48);
                phase_reg_747 <= phase_fu_259_p1;
                tmp_3_reg_732 <= instream_TLAST;
                tmp_3_reg_732_pp0_iter1_reg <= tmp_3_reg_732;
                tmp_7_reg_726 <= instream_TUSER;
                tmp_7_reg_726_pp0_iter1_reg <= tmp_7_reg_726;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                previous_cache_data_phase_0 <= phase_reg_747;
                previous_cache_data_phase_1 <= phase_1_reg_753;
                previous_cache_data_phase_2 <= phase_2_reg_759;
                previous_cache_data_phase_3 <= phase_3_reg_765;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                previous_cache_data_since_0 <= previous_10_fu_585_p3;
                previous_cache_data_since_1 <= previous_13_fu_613_p3;
                previous_cache_data_since_2 <= previous_16_fu_641_p3;
                previous_cache_data_since_3 <= previous_19_fu_669_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, grp_nbreadreq_fu_152_p7, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_CS_fsm_state7, regslice_both_outstream_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (grp_nbreadreq_fu_152_p7 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (grp_nbreadreq_fu_152_p7 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state7 => 
                if (((regslice_both_outstream_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln223_fu_293_p2 <= std_logic_vector(unsigned(tmp_7_reg_726) + unsigned(ap_const_lv9_1FF));
    add_ln79_1_fu_601_p2 <= std_logic_vector(unsigned(previous_2_reg_790) + unsigned(ap_const_lv16_FFFF));
    add_ln79_2_fu_629_p2 <= std_logic_vector(unsigned(previous_4_reg_804) + unsigned(ap_const_lv16_FFFF));
    add_ln79_3_fu_657_p2 <= std_logic_vector(unsigned(previous_6_reg_818) + unsigned(ap_const_lv16_FFFF));
    add_ln79_fu_573_p2 <= std_logic_vector(unsigned(previous_reg_776) + unsigned(ap_const_lv16_FFFF));
    and_ln65_1_fu_568_p2 <= (icmp_ln65_reg_856 and and_ln65_fu_564_p2);
    and_ln65_2_fu_592_p2 <= (icmp_ln65_5_reg_886 and icmp_ln65_4_reg_881);
    and_ln65_3_fu_596_p2 <= (icmp_ln65_3_reg_876 and and_ln65_2_fu_592_p2);
    and_ln65_4_fu_620_p2 <= (icmp_ln65_8_reg_906 and icmp_ln65_7_reg_901);
    and_ln65_5_fu_624_p2 <= (icmp_ln65_6_reg_896 and and_ln65_4_fu_620_p2);
    and_ln65_6_fu_648_p2 <= (icmp_ln65_11_reg_926 and icmp_ln65_10_reg_921);
    and_ln65_7_fu_652_p2 <= (icmp_ln65_9_reg_916 and and_ln65_6_fu_648_p2);
    and_ln65_fu_564_p2 <= (icmp_ln65_2_reg_866 and icmp_ln65_1_reg_861);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state7_blk_assign_proc : process(regslice_both_outstream_V_data_V_U_apdone_blk)
    begin
        if ((regslice_both_outstream_V_data_V_U_apdone_blk = ap_const_logic_1)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= (((ap_ST_fsm_pp0_stage1 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage1_subdone)) or ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone)));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(instream_TVALID, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, outstream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (outstream_TREADY_int_regslice = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (instream_TVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(instream_TVALID, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, outstream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (outstream_TREADY_int_regslice = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (instream_TVALID = ap_const_logic_0)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter1, outstream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage1_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (outstream_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter1, outstream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (outstream_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, outstream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (outstream_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(instream_TVALID)
    begin
                ap_block_state2_pp0_stage0_iter0 <= (instream_TVALID = ap_const_logic_0);
    end process;

        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage1_iter1_assign_proc : process(outstream_TREADY_int_regslice)
    begin
                ap_block_state5_pp0_stage1_iter1 <= (outstream_TREADY_int_regslice = ap_const_logic_0);
    end process;


    ap_block_state6_pp0_stage0_iter2_assign_proc : process(outstream_TREADY_int_regslice)
    begin
                ap_block_state6_pp0_stage0_iter2 <= (outstream_TREADY_int_regslice = ap_const_logic_0);
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage1, grp_nbreadreq_fu_152_p7, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (grp_nbreadreq_fu_152_p7 = ap_const_lv1_0))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state7, regslice_both_outstream_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_outstream_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

        ap_enable_operation_41 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_48 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_74 <= (ap_const_boolean_1 = ap_const_boolean_1);
    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_state2_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
                ap_enable_state2_pp0_iter0_stage0 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state3_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1)
    begin
                ap_enable_state3_pp0_iter0_stage1 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_enable_state4_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_enable_state4_pp0_iter1_stage0 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, regslice_both_outstream_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_outstream_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_nbreadreq_fu_152_p7 <= (0=>(instream_TVALID), others=>'-');
    icmp_ln65_10_fu_521_p2 <= "1" when (unsigned(phase_3_reg_765) < unsigned(previous_5_reg_825)) else "0";
    icmp_ln65_11_fu_525_p2 <= "1" when (previous_6_reg_818 = ap_const_lv16_0) else "0";
    icmp_ln65_1_fu_467_p2 <= "1" when (unsigned(phase_reg_747) < unsigned(previous_7_reg_783)) else "0";
    icmp_ln65_2_fu_471_p2 <= "1" when (previous_reg_776 = ap_const_lv16_0) else "0";
    icmp_ln65_3_fu_481_p2 <= "1" when (unsigned(previous_1_reg_797) > unsigned(thresh_1_reg_837)) else "0";
    icmp_ln65_4_fu_485_p2 <= "1" when (unsigned(phase_1_reg_753) < unsigned(previous_1_reg_797)) else "0";
    icmp_ln65_5_fu_489_p2 <= "1" when (previous_2_reg_790 = ap_const_lv16_0) else "0";
    icmp_ln65_6_fu_499_p2 <= "1" when (unsigned(previous_3_reg_811) > unsigned(thresh_2_reg_842)) else "0";
    icmp_ln65_7_fu_503_p2 <= "1" when (unsigned(phase_2_reg_759) < unsigned(previous_3_reg_811)) else "0";
    icmp_ln65_8_fu_507_p2 <= "1" when (previous_4_reg_804 = ap_const_lv16_0) else "0";
    icmp_ln65_9_fu_517_p2 <= "1" when (unsigned(previous_5_reg_825) > unsigned(thresh_3_reg_847)) else "0";
    icmp_ln65_fu_463_p2 <= "1" when (unsigned(previous_7_reg_783) > unsigned(thresh_reg_832)) else "0";
    icmp_ln78_1_fu_494_p2 <= "0" when (previous_2_reg_790 = ap_const_lv16_0) else "1";
    icmp_ln78_2_fu_512_p2 <= "0" when (previous_4_reg_804 = ap_const_lv16_0) else "1";
    icmp_ln78_3_fu_530_p2 <= "0" when (previous_6_reg_818 = ap_const_lv16_0) else "1";
    icmp_ln78_fu_476_p2 <= "0" when (previous_reg_776 = ap_const_lv16_0) else "1";

    instream_TDATA_blk_n_assign_proc : process(instream_TVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            instream_TDATA_blk_n <= instream_TVALID;
        else 
            instream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    instream_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            instream_TREADY <= ap_const_logic_1;
        else 
            instream_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    outstream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter2, outstream_TREADY_int_regslice)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            outstream_TDATA_blk_n <= outstream_TREADY_int_regslice;
        else 
            outstream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outstream_TDATA_int_regslice <= (((previous_5_reg_825 & previous_3_reg_811) & previous_1_reg_797) & previous_7_reg_783);
    outstream_TUSER_int_regslice <= ((((and_ln65_7_fu_652_p2 & and_ln65_5_fu_624_p2) & and_ln65_3_fu_596_p2) & and_ln65_1_fu_568_p2) & tmp_7_reg_726_pp0_iter1_reg);
    outstream_TVALID <= regslice_both_outstream_V_data_V_U_vld_out;

    outstream_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            outstream_TVALID_int_regslice <= ap_const_logic_1;
        else 
            outstream_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    phase_fu_259_p1 <= instream_TDATA(16 - 1 downto 0);
    previous_10_fu_585_p3 <= 
        holdoff_read_reg_714 when (and_ln65_1_fu_568_p2(0) = '1') else 
        previous_9_fu_578_p3;
    previous_12_fu_606_p3 <= 
        add_ln79_1_fu_601_p2 when (icmp_ln78_1_reg_891(0) = '1') else 
        ap_const_lv16_0;
    previous_13_fu_613_p3 <= 
        holdoff_read_reg_714 when (and_ln65_3_fu_596_p2(0) = '1') else 
        previous_12_fu_606_p3;
    previous_15_fu_634_p3 <= 
        add_ln79_2_fu_629_p2 when (icmp_ln78_2_reg_911(0) = '1') else 
        ap_const_lv16_0;
    previous_16_fu_641_p3 <= 
        holdoff_read_reg_714 when (and_ln65_5_fu_624_p2(0) = '1') else 
        previous_15_fu_634_p3;
    previous_18_fu_662_p3 <= 
        add_ln79_3_fu_657_p2 when (icmp_ln78_3_reg_931(0) = '1') else 
        ap_const_lv16_0;
    previous_19_fu_669_p3 <= 
        holdoff_read_reg_714 when (and_ln65_7_fu_652_p2(0) = '1') else 
        previous_18_fu_662_p3;
    previous_9_fu_578_p3 <= 
        add_ln79_fu_573_p2 when (icmp_ln78_reg_871(0) = '1') else 
        ap_const_lv16_0;
    previous_data_address0 <= zext_ln573_1_fu_406_p1(9 - 1 downto 0);
    previous_data_address1 <= zext_ln573_fu_253_p1(9 - 1 downto 0);

    previous_data_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            previous_data_ce0 <= ap_const_logic_1;
        else 
            previous_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    previous_data_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            previous_data_ce1 <= ap_const_logic_1;
        else 
            previous_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    previous_data_d0 <= (((((((previous_cache_data_phase_3 & previous_cache_data_since_3) & previous_cache_data_phase_2) & previous_cache_data_since_2) & previous_cache_data_phase_1) & previous_cache_data_since_1) & previous_cache_data_phase_0) & previous_cache_data_since_0);

    previous_data_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            previous_data_we0 <= ap_const_logic_1;
        else 
            previous_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    previous_fu_298_p1 <= previous_data_q1(16 - 1 downto 0);
    thresh_fu_372_p1 <= thresholds_q0(16 - 1 downto 0);
    thresholds_address0 <= zext_ln573_fu_253_p1(9 - 1 downto 0);

    thresholds_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            thresholds_ce0 <= ap_const_logic_1;
        else 
            thresholds_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln573_1_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln223_reg_771),64));
    zext_ln573_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(instream_TUSER),64));
end behav;
