// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="trigger_trigger,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.237000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=590,HLS_SYN_LUT=671,HLS_VERSION=2021_1}" *)

module trigger (
// synthesis translate_off
    kernel_block,
// synthesis translate_on
        ap_clk,
        ap_rst_n,
        instream_TDATA,
        instream_TVALID,
        instream_TREADY,
        instream_TKEEP,
        instream_TSTRB,
        instream_TUSER,
        instream_TLAST,
        outstream_TDATA,
        outstream_TVALID,
        outstream_TREADY,
        outstream_TKEEP,
        outstream_TSTRB,
        outstream_TUSER,
        outstream_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 13;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

// synthesis translate_off
output kernel_block;
// synthesis translate_on
input   ap_clk;
input   ap_rst_n;
input  [63:0] instream_TDATA;
input   instream_TVALID;
output   instream_TREADY;
input  [7:0] instream_TKEEP;
input  [7:0] instream_TSTRB;
input  [8:0] instream_TUSER;
input  [0:0] instream_TLAST;
output  [63:0] outstream_TDATA;
output   outstream_TVALID;
input   outstream_TREADY;
output  [7:0] outstream_TKEEP;
output  [7:0] outstream_TSTRB;
output  [12:0] outstream_TUSER;
output  [0:0] outstream_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg instream_TREADY;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [8:0] thresholds_address0;
reg    thresholds_ce0;
wire   [63:0] thresholds_q0;
wire   [15:0] holdoff;
reg   [15:0] previous_cache_data_since_0;
reg   [15:0] previous_cache_data_phase_0;
reg   [15:0] previous_cache_data_since_1;
reg   [15:0] previous_cache_data_phase_1;
reg   [15:0] previous_cache_data_since_2;
reg   [15:0] previous_cache_data_phase_2;
reg   [15:0] previous_cache_data_since_3;
reg   [15:0] previous_cache_data_phase_3;
wire   [8:0] previous_data_address0;
reg    previous_data_ce0;
reg    previous_data_we0;
wire   [127:0] previous_data_d0;
wire   [8:0] previous_data_address1;
reg    previous_data_ce1;
wire   [127:0] previous_data_q1;
reg    instream_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    outstream_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1;
reg    ap_enable_reg_pp0_iter2;
reg   [15:0] holdoff_read_reg_712;
wire   [0:0] grp_nbreadreq_fu_150_p7;
reg   [8:0] tmp_7_reg_724;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state6_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [8:0] tmp_7_reg_724_pp0_iter1_reg;
reg   [0:0] tmp_3_reg_730;
reg   [0:0] tmp_3_reg_730_pp0_iter1_reg;
wire   [15:0] phase_fu_257_p1;
reg   [15:0] phase_reg_745;
reg   [15:0] phase_1_reg_751;
reg   [15:0] phase_2_reg_757;
reg   [15:0] phase_3_reg_763;
wire   [8:0] add_ln223_fu_291_p2;
reg   [8:0] add_ln223_reg_769;
wire    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
wire   [15:0] previous_fu_296_p1;
reg   [15:0] previous_reg_774;
reg   [15:0] previous_7_reg_781;
reg   [15:0] previous_2_reg_788;
reg   [15:0] previous_1_reg_795;
reg   [15:0] previous_4_reg_802;
reg   [15:0] previous_3_reg_809;
reg   [15:0] previous_6_reg_816;
reg   [15:0] previous_5_reg_823;
wire   [15:0] thresh_fu_370_p1;
reg   [15:0] thresh_reg_830;
reg   [15:0] thresh_1_reg_835;
reg   [15:0] thresh_2_reg_840;
reg   [15:0] thresh_3_reg_845;
wire   [0:0] icmp_ln65_fu_461_p2;
reg   [0:0] icmp_ln65_reg_854;
wire   [0:0] icmp_ln65_1_fu_465_p2;
reg   [0:0] icmp_ln65_1_reg_859;
wire   [0:0] icmp_ln65_2_fu_469_p2;
reg   [0:0] icmp_ln65_2_reg_864;
wire   [0:0] icmp_ln78_fu_474_p2;
reg   [0:0] icmp_ln78_reg_869;
wire   [0:0] icmp_ln65_3_fu_479_p2;
reg   [0:0] icmp_ln65_3_reg_874;
wire   [0:0] icmp_ln65_4_fu_483_p2;
reg   [0:0] icmp_ln65_4_reg_879;
wire   [0:0] icmp_ln65_5_fu_487_p2;
reg   [0:0] icmp_ln65_5_reg_884;
wire   [0:0] icmp_ln78_1_fu_492_p2;
reg   [0:0] icmp_ln78_1_reg_889;
wire   [0:0] icmp_ln65_6_fu_497_p2;
reg   [0:0] icmp_ln65_6_reg_894;
wire   [0:0] icmp_ln65_7_fu_501_p2;
reg   [0:0] icmp_ln65_7_reg_899;
wire   [0:0] icmp_ln65_8_fu_505_p2;
reg   [0:0] icmp_ln65_8_reg_904;
wire   [0:0] icmp_ln78_2_fu_510_p2;
reg   [0:0] icmp_ln78_2_reg_909;
wire   [0:0] icmp_ln65_9_fu_515_p2;
reg   [0:0] icmp_ln65_9_reg_914;
wire   [0:0] icmp_ln65_10_fu_519_p2;
reg   [0:0] icmp_ln65_10_reg_919;
wire   [0:0] icmp_ln65_11_fu_523_p2;
reg   [0:0] icmp_ln65_11_reg_924;
wire   [0:0] icmp_ln78_3_fu_528_p2;
reg   [0:0] icmp_ln78_3_reg_929;
reg    ap_block_pp0_stage1_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln573_fu_251_p1;
wire   [63:0] zext_ln573_1_fu_404_p1;
wire   [15:0] previous_10_fu_583_p3;
wire   [15:0] previous_13_fu_611_p3;
wire   [15:0] previous_16_fu_639_p3;
wire   [15:0] previous_19_fu_667_p3;
reg    ap_block_pp0_stage1_01001;
wire   [0:0] and_ln65_fu_562_p2;
wire   [15:0] add_ln79_fu_571_p2;
wire   [0:0] and_ln65_1_fu_566_p2;
wire   [15:0] previous_9_fu_576_p3;
wire   [0:0] and_ln65_2_fu_590_p2;
wire   [15:0] add_ln79_1_fu_599_p2;
wire   [0:0] and_ln65_3_fu_594_p2;
wire   [15:0] previous_12_fu_604_p3;
wire   [0:0] and_ln65_4_fu_618_p2;
wire   [15:0] add_ln79_2_fu_627_p2;
wire   [0:0] and_ln65_5_fu_622_p2;
wire   [15:0] previous_15_fu_632_p3;
wire   [0:0] and_ln65_6_fu_646_p2;
wire   [15:0] add_ln79_3_fu_655_p2;
wire   [0:0] and_ln65_7_fu_650_p2;
wire   [15:0] previous_18_fu_660_p3;
wire    ap_CS_fsm_state7;
wire    regslice_both_outstream_V_data_V_U_apdone_blk;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state7_blk;
reg    ap_block_pp0;
wire    ap_enable_operation_41;
reg    ap_enable_state2_pp0_iter0_stage0;
wire    ap_enable_operation_48;
reg    ap_enable_state3_pp0_iter0_stage1;
wire    ap_enable_operation_74;
reg    ap_enable_state4_pp0_iter1_stage0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] outstream_TDATA_int_regslice;
reg    outstream_TVALID_int_regslice;
wire    outstream_TREADY_int_regslice;
wire    regslice_both_outstream_V_data_V_U_vld_out;
wire    regslice_both_outstream_V_keep_V_U_apdone_blk;
wire    regslice_both_outstream_V_keep_V_U_ack_in_dummy;
wire    regslice_both_outstream_V_keep_V_U_vld_out;
wire    regslice_both_outstream_V_strb_V_U_apdone_blk;
wire    regslice_both_outstream_V_strb_V_U_ack_in_dummy;
wire    regslice_both_outstream_V_strb_V_U_vld_out;
wire    regslice_both_outstream_V_user_V_U_apdone_blk;
wire   [12:0] outstream_TUSER_int_regslice;
wire    regslice_both_outstream_V_user_V_U_ack_in_dummy;
wire    regslice_both_outstream_V_user_V_U_vld_out;
wire    regslice_both_outstream_V_last_V_U_apdone_blk;
wire    regslice_both_outstream_V_last_V_U_ack_in_dummy;
wire    regslice_both_outstream_V_last_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 previous_cache_data_since_0 = 16'd0;
#0 previous_cache_data_phase_0 = 16'd0;
#0 previous_cache_data_since_1 = 16'd0;
#0 previous_cache_data_phase_1 = 16'd0;
#0 previous_cache_data_since_2 = 16'd0;
#0 previous_cache_data_phase_2 = 16'd0;
#0 previous_cache_data_since_3 = 16'd0;
#0 previous_cache_data_phase_3 = 16'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

trigger_previous_data #(
    .DataWidth( 128 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
previous_data_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(previous_data_address0),
    .ce0(previous_data_ce0),
    .we0(previous_data_we0),
    .d0(previous_data_d0),
    .address1(previous_data_address1),
    .ce1(previous_data_ce1),
    .q1(previous_data_q1)
);

trigger_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .holdoff(holdoff),
    .thresholds_address0(thresholds_address0),
    .thresholds_ce0(thresholds_ce0),
    .thresholds_q0(thresholds_q0),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

trigger_regslice_both #(
    .DataWidth( 64 ))
regslice_both_outstream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(outstream_TDATA_int_regslice),
    .vld_in(outstream_TVALID_int_regslice),
    .ack_in(outstream_TREADY_int_regslice),
    .data_out(outstream_TDATA),
    .vld_out(regslice_both_outstream_V_data_V_U_vld_out),
    .ack_out(outstream_TREADY),
    .apdone_blk(regslice_both_outstream_V_data_V_U_apdone_blk)
);

trigger_regslice_both #(
    .DataWidth( 8 ))
regslice_both_outstream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(8'd0),
    .vld_in(outstream_TVALID_int_regslice),
    .ack_in(regslice_both_outstream_V_keep_V_U_ack_in_dummy),
    .data_out(outstream_TKEEP),
    .vld_out(regslice_both_outstream_V_keep_V_U_vld_out),
    .ack_out(outstream_TREADY),
    .apdone_blk(regslice_both_outstream_V_keep_V_U_apdone_blk)
);

trigger_regslice_both #(
    .DataWidth( 8 ))
regslice_both_outstream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(8'd0),
    .vld_in(outstream_TVALID_int_regslice),
    .ack_in(regslice_both_outstream_V_strb_V_U_ack_in_dummy),
    .data_out(outstream_TSTRB),
    .vld_out(regslice_both_outstream_V_strb_V_U_vld_out),
    .ack_out(outstream_TREADY),
    .apdone_blk(regslice_both_outstream_V_strb_V_U_apdone_blk)
);

trigger_regslice_both #(
    .DataWidth( 13 ))
regslice_both_outstream_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(outstream_TUSER_int_regslice),
    .vld_in(outstream_TVALID_int_regslice),
    .ack_in(regslice_both_outstream_V_user_V_U_ack_in_dummy),
    .data_out(outstream_TUSER),
    .vld_out(regslice_both_outstream_V_user_V_U_vld_out),
    .ack_out(outstream_TREADY),
    .apdone_blk(regslice_both_outstream_V_user_V_U_apdone_blk)
);

trigger_regslice_both #(
    .DataWidth( 1 ))
regslice_both_outstream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_3_reg_730_pp0_iter1_reg),
    .vld_in(outstream_TVALID_int_regslice),
    .ack_in(regslice_both_outstream_V_last_V_U_ack_in_dummy),
    .data_out(outstream_TLAST),
    .vld_out(regslice_both_outstream_V_last_V_U_vld_out),
    .ack_out(outstream_TREADY),
    .apdone_blk(regslice_both_outstream_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (grp_nbreadreq_fu_150_p7 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (grp_nbreadreq_fu_150_p7 == 1'd1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln223_reg_769 <= add_ln223_fu_291_p2;
        previous_1_reg_795 <= {{previous_data_q1[63:48]}};
        previous_2_reg_788 <= {{previous_data_q1[47:32]}};
        previous_3_reg_809 <= {{previous_data_q1[95:80]}};
        previous_4_reg_802 <= {{previous_data_q1[79:64]}};
        previous_5_reg_823 <= {{previous_data_q1[127:112]}};
        previous_6_reg_816 <= {{previous_data_q1[111:96]}};
        previous_7_reg_781 <= {{previous_data_q1[31:16]}};
        previous_reg_774 <= previous_fu_296_p1;
        thresh_1_reg_835 <= {{thresholds_q0[31:16]}};
        thresh_2_reg_840 <= {{thresholds_q0[47:32]}};
        thresh_3_reg_845 <= {{thresholds_q0[63:48]}};
        thresh_reg_830 <= thresh_fu_370_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        holdoff_read_reg_712 <= holdoff;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln65_10_reg_919 <= icmp_ln65_10_fu_519_p2;
        icmp_ln65_11_reg_924 <= icmp_ln65_11_fu_523_p2;
        icmp_ln65_1_reg_859 <= icmp_ln65_1_fu_465_p2;
        icmp_ln65_2_reg_864 <= icmp_ln65_2_fu_469_p2;
        icmp_ln65_3_reg_874 <= icmp_ln65_3_fu_479_p2;
        icmp_ln65_4_reg_879 <= icmp_ln65_4_fu_483_p2;
        icmp_ln65_5_reg_884 <= icmp_ln65_5_fu_487_p2;
        icmp_ln65_6_reg_894 <= icmp_ln65_6_fu_497_p2;
        icmp_ln65_7_reg_899 <= icmp_ln65_7_fu_501_p2;
        icmp_ln65_8_reg_904 <= icmp_ln65_8_fu_505_p2;
        icmp_ln65_9_reg_914 <= icmp_ln65_9_fu_515_p2;
        icmp_ln65_reg_854 <= icmp_ln65_fu_461_p2;
        icmp_ln78_1_reg_889 <= icmp_ln78_1_fu_492_p2;
        icmp_ln78_2_reg_909 <= icmp_ln78_2_fu_510_p2;
        icmp_ln78_3_reg_929 <= icmp_ln78_3_fu_528_p2;
        icmp_ln78_reg_869 <= icmp_ln78_fu_474_p2;
        phase_1_reg_751 <= {{instream_TDATA[31:16]}};
        phase_2_reg_757 <= {{instream_TDATA[47:32]}};
        phase_3_reg_763 <= {{instream_TDATA[63:48]}};
        phase_reg_745 <= phase_fu_257_p1;
        tmp_3_reg_730 <= instream_TLAST;
        tmp_3_reg_730_pp0_iter1_reg <= tmp_3_reg_730;
        tmp_7_reg_724 <= instream_TUSER;
        tmp_7_reg_724_pp0_iter1_reg <= tmp_7_reg_724;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        previous_cache_data_phase_0 <= phase_reg_745;
        previous_cache_data_phase_1 <= phase_1_reg_751;
        previous_cache_data_phase_2 <= phase_2_reg_757;
        previous_cache_data_phase_3 <= phase_3_reg_763;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        previous_cache_data_since_0 <= previous_10_fu_583_p3;
        previous_cache_data_since_1 <= previous_13_fu_611_p3;
        previous_cache_data_since_2 <= previous_16_fu_639_p3;
        previous_cache_data_since_3 <= previous_19_fu_667_p3;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((regslice_both_outstream_V_data_V_U_apdone_blk == 1'b1)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (grp_nbreadreq_fu_150_p7 == 1'd0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_outstream_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_outstream_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        instream_TDATA_blk_n = instream_TVALID;
    end else begin
        instream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        instream_TREADY = 1'b1;
    end else begin
        instream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        outstream_TDATA_blk_n = outstream_TREADY_int_regslice;
    end else begin
        outstream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        outstream_TVALID_int_regslice = 1'b1;
    end else begin
        outstream_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        previous_data_ce0 = 1'b1;
    end else begin
        previous_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        previous_data_ce1 = 1'b1;
    end else begin
        previous_data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        previous_data_we0 = 1'b1;
    end else begin
        previous_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        thresholds_ce0 = 1'b1;
    end else begin
        thresholds_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (grp_nbreadreq_fu_150_p7 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (grp_nbreadreq_fu_150_p7 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((regslice_both_outstream_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln223_fu_291_p2 = ($signed(tmp_7_reg_724) + $signed(9'd511));

assign add_ln79_1_fu_599_p2 = ($signed(previous_2_reg_788) + $signed(16'd65535));

assign add_ln79_2_fu_627_p2 = ($signed(previous_4_reg_802) + $signed(16'd65535));

assign add_ln79_3_fu_655_p2 = ($signed(previous_6_reg_816) + $signed(16'd65535));

assign add_ln79_fu_571_p2 = ($signed(previous_reg_774) + $signed(16'd65535));

assign and_ln65_1_fu_566_p2 = (icmp_ln65_reg_854 & and_ln65_fu_562_p2);

assign and_ln65_2_fu_590_p2 = (icmp_ln65_5_reg_884 & icmp_ln65_4_reg_879);

assign and_ln65_3_fu_594_p2 = (icmp_ln65_3_reg_874 & and_ln65_2_fu_590_p2);

assign and_ln65_4_fu_618_p2 = (icmp_ln65_8_reg_904 & icmp_ln65_7_reg_899);

assign and_ln65_5_fu_622_p2 = (icmp_ln65_6_reg_894 & and_ln65_4_fu_618_p2);

assign and_ln65_6_fu_646_p2 = (icmp_ln65_11_reg_924 & icmp_ln65_10_reg_919);

assign and_ln65_7_fu_650_p2 = (icmp_ln65_9_reg_914 & and_ln65_6_fu_646_p2);

assign and_ln65_fu_562_p2 = (icmp_ln65_2_reg_864 & icmp_ln65_1_reg_859);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_pp0 = (((ap_ST_fsm_pp0_stage1 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage1_subdone)) | ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone)));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (outstream_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (instream_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (outstream_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (instream_TVALID == 1'b0)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (outstream_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (outstream_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (outstream_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = (instream_TVALID == 1'b0);
end

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage1_iter1 = (outstream_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter2 = (outstream_TREADY_int_regslice == 1'b0);
end

assign ap_enable_operation_41 = (1'b1 == 1'b1);

assign ap_enable_operation_48 = (1'b1 == 1'b1);

assign ap_enable_operation_74 = (1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state2_pp0_iter0_stage0 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state3_pp0_iter0_stage1 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_enable_state4_pp0_iter1_stage0 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_nbreadreq_fu_150_p7 = instream_TVALID;

assign icmp_ln65_10_fu_519_p2 = ((phase_3_reg_763 < previous_5_reg_823) ? 1'b1 : 1'b0);

assign icmp_ln65_11_fu_523_p2 = ((previous_6_reg_816 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln65_1_fu_465_p2 = ((phase_reg_745 < previous_7_reg_781) ? 1'b1 : 1'b0);

assign icmp_ln65_2_fu_469_p2 = ((previous_reg_774 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln65_3_fu_479_p2 = ((previous_1_reg_795 > thresh_1_reg_835) ? 1'b1 : 1'b0);

assign icmp_ln65_4_fu_483_p2 = ((phase_1_reg_751 < previous_1_reg_795) ? 1'b1 : 1'b0);

assign icmp_ln65_5_fu_487_p2 = ((previous_2_reg_788 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln65_6_fu_497_p2 = ((previous_3_reg_809 > thresh_2_reg_840) ? 1'b1 : 1'b0);

assign icmp_ln65_7_fu_501_p2 = ((phase_2_reg_757 < previous_3_reg_809) ? 1'b1 : 1'b0);

assign icmp_ln65_8_fu_505_p2 = ((previous_4_reg_802 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln65_9_fu_515_p2 = ((previous_5_reg_823 > thresh_3_reg_845) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_461_p2 = ((previous_7_reg_781 > thresh_reg_830) ? 1'b1 : 1'b0);

assign icmp_ln78_1_fu_492_p2 = ((previous_2_reg_788 != 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln78_2_fu_510_p2 = ((previous_4_reg_802 != 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln78_3_fu_528_p2 = ((previous_6_reg_816 != 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_474_p2 = ((previous_reg_774 != 16'd0) ? 1'b1 : 1'b0);

assign outstream_TDATA_int_regslice = {{{{previous_5_reg_823}, {previous_3_reg_809}}, {previous_1_reg_795}}, {previous_7_reg_781}};

assign outstream_TUSER_int_regslice = {{{{{and_ln65_7_fu_650_p2}, {and_ln65_5_fu_622_p2}}, {and_ln65_3_fu_594_p2}}, {and_ln65_1_fu_566_p2}}, {tmp_7_reg_724_pp0_iter1_reg}};

assign outstream_TVALID = regslice_both_outstream_V_data_V_U_vld_out;

assign phase_fu_257_p1 = instream_TDATA[15:0];

assign previous_10_fu_583_p3 = ((and_ln65_1_fu_566_p2[0:0] == 1'b1) ? holdoff_read_reg_712 : previous_9_fu_576_p3);

assign previous_12_fu_604_p3 = ((icmp_ln78_1_reg_889[0:0] == 1'b1) ? add_ln79_1_fu_599_p2 : 16'd0);

assign previous_13_fu_611_p3 = ((and_ln65_3_fu_594_p2[0:0] == 1'b1) ? holdoff_read_reg_712 : previous_12_fu_604_p3);

assign previous_15_fu_632_p3 = ((icmp_ln78_2_reg_909[0:0] == 1'b1) ? add_ln79_2_fu_627_p2 : 16'd0);

assign previous_16_fu_639_p3 = ((and_ln65_5_fu_622_p2[0:0] == 1'b1) ? holdoff_read_reg_712 : previous_15_fu_632_p3);

assign previous_18_fu_660_p3 = ((icmp_ln78_3_reg_929[0:0] == 1'b1) ? add_ln79_3_fu_655_p2 : 16'd0);

assign previous_19_fu_667_p3 = ((and_ln65_7_fu_650_p2[0:0] == 1'b1) ? holdoff_read_reg_712 : previous_18_fu_660_p3);

assign previous_9_fu_576_p3 = ((icmp_ln78_reg_869[0:0] == 1'b1) ? add_ln79_fu_571_p2 : 16'd0);

assign previous_data_address0 = zext_ln573_1_fu_404_p1;

assign previous_data_address1 = zext_ln573_fu_251_p1;

assign previous_data_d0 = {{{{{{{{previous_cache_data_phase_3}, {previous_cache_data_since_3}}, {previous_cache_data_phase_2}}, {previous_cache_data_since_2}}, {previous_cache_data_phase_1}}, {previous_cache_data_since_1}}, {previous_cache_data_phase_0}}, {previous_cache_data_since_0}};

assign previous_fu_296_p1 = previous_data_q1[15:0];

assign thresh_fu_370_p1 = thresholds_q0[15:0];

assign thresholds_address0 = zext_ln573_fu_251_p1;

assign zext_ln573_1_fu_404_p1 = add_ln223_reg_769;

assign zext_ln573_fu_251_p1 = instream_TUSER;


// synthesis translate_off
`include "trigger_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //trigger

